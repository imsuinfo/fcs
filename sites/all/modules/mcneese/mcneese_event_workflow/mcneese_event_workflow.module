<?php

/**
 * @file
 * McNeese State University Event Workflow module.
 */

/**
 * @defgroup mcneese_event_workflow McNeese Event Workflow
 * @{
 * Provides Workflow specific module functionality for the Events Workflow
 * System.
 */

/**
 * Provides a status for 'soft-delete'.
 * Event is considered deleted, but actually still exists.
 */
define('MCNEESE_EVENT_WORKFLOW_EVENT_STATUS_DELETED', 0);

/**
 * This is the normal status of an event.
 */
define('MCNEESE_EVENT_WORKFLOW_EVENT_STATUS_NORMAL', 1);

/**
 * Implements hook_permission().
 */
function mcneese_event_workflow_permission() {
  $permissions = array();
  $permissions['mcneese event workflow administer'] = array(
    'title' => t("Administer Event Workflow"),
    'description' => t("Grants permissions to administer event requests and workflow."),
  );

  $permissions['mcneese event workflow request'] = array(
    'title' => t("Request Event Workflow"),
    'description' => t("Grants permissions to make request events."),
  );

  $permissions['mcneese event workflow review'] = array(
    'title' => t("Review Event Workflow"),
    'description' => t("Grants permissions to review event requests."),
  );

  $permissions['mcneese event workflow manage'] = array(
    'title' => t("Manage Event Workflow"),
    'description' => t("Grants permissions to manage event requests."),
  );


  return $permissions;
}

/**
 * Implements hook_menu().
 */
function mcneese_event_workflow_menu() {
  $items = array();

  $items['events'] = array(
    'title' => "Event Requests",
    'description' => "Manage workflow events.",
    'page callback' => 'mcneese_event_workflow_management_page',
    'file' => 'mcneese_event_workflow_management_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_access',
    'tab_parent' => '',
  );

  $items['events/create-0'] = array(
    'title' => "Create Facilities Use and Special Event Request Form",
    'description' => "Make a request to use facilities or host special events at McNeese State University.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_event_workflow_event_create_0_form'),
    'file' => 'mcneese_event_workflow_event_create_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('create'),
    'tab_parent' => 'events',
  );

  $items['events/create-0/%'] = array(
    'title' => "Create Facilities Use and Special Event Request Form",
    'description' => "Make a request to use facilities or host special events at McNeese State University.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_event_workflow_event_create_0_form', 2),
    'file' => 'mcneese_event_workflow_event_create_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('create'),
    'tab_parent' => 'events',
  );

  $items['events/create-0/%/%'] = array(
    'title' => "Create Facilities Use and Special Event Request Form",
    'description' => "Make a request to use facilities or host special events at McNeese State University.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_event_workflow_event_create_0_form', 2, 3),
    'file' => 'mcneese_event_workflow_event_create_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('create'),
    'tab_parent' => 'events',
  );

  $items['events/edit-0/%'] = array(
    'title' => "Edit Facilities Use and Special Event Request Form",
    'description' => "Make changes to an existing facilities and special event request form.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_event_workflow_event_edit_0_form', 2),
    'file' => 'mcneese_event_workflow_event_edit_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('edit', 2),
    'tab_parent' => 'events',
  );

  $items['events/edit-0/%/%'] = array(
    'title' => "Edit Facilities Use and Special Event Request Form",
    'description' => "Make changes to an existing facilities and special event request form.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_event_workflow_event_edit_0_form', 2, 3),
    'file' => 'mcneese_event_workflow_event_edit_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('edit', 2),
    'tab_parent' => 'events',
  );

  $items['events/edit-0/ctools/%/%'] = array(
    'title' => "Edit Facilities Use and Special Event Request Form",
    'description' => "Make changes to an existing facilities and special event request form.",
    'page callback' => 'mcneese_event_workflow_event_edit_0_form_ctools',
    'page arguments' => array(3, 4),
    'file' => 'mcneese_event_workflow_event_edit_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('edit', 3),
    'tab_parent' => 'events',
    'type' => MENU_CALLBACK,
  );

  $items['events/manage-0/%'] = array(
    'title' => "Manage Facilities Use and Special Event Request Forms",
    'description' => "Manage an event request.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_event_workflow_event_manage_0_page', 2),
    'file' => 'mcneese_event_workflow_event_manage_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('manage', 2),
    'tab_parent' => 'events',
  );

  $items['events/delete-0/%'] = array(
    'title' => "Delete Facilities Use and Special Event Request Form",
    'description' => "Delete an event request.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_event_workflow_event_delete_0_page', 2),
    'file' => 'mcneese_event_workflow_event_manage_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('delete', 2),
    'tab_parent' => 'events',
  );

  $items['events/list-0'] = array(
    'title' => "List Facilities Use and Special Event Request Forms",
    'description' => "View a list of event requests viewable by the current account.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_event_workflow_event_list_0_page'),
    'file' => 'mcneese_event_workflow_event_list_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('list'),
    'tab_parent' => 'events',
  );

  $items['events/list-0/%'] = array(
    'title' => "List Facilities Use and Special Event Request Forms",
    'description' => "View a list of event requests viewable by the current account.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_event_workflow_event_list_0_page', 2),
    'file' => 'mcneese_event_workflow_event_list_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('list'),
    'tab_parent' => 'events',
  );

  $items['events/search-0'] = array(
    'title' => "Search Facilities Use and Special Event Request Forms",
    'description' => "Search event requests viewable by the current account.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_event_workflow_event_search_0_page'),
    'file' => 'mcneese_event_workflow_event_search_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('search'),
    'tab_parent' => 'events',
  );

  $items['events/search-0/%'] = array(
    'title' => "Search Facilities Use and Special Event Request Forms",
    'description' => "Search event requests viewable by the current account.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_event_workflow_event_search_0_page', 2),
    'file' => 'mcneese_event_workflow_event_search_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('search'),
    'tab_parent' => 'events',
  );

  $items['events/view-0/%'] = array(
    'title' => "View Facilities Use and Special Event Request Form",
    'description' => "View a specific event request.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_event_workflow_event_view_0_page', 2),
    'file' => 'mcneese_event_workflow_event_view_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('view', 2),
    'tab_parent' => 'events/list-0',
    'tab_root' => 'events/list-0',
  );

  $items['events/view-0/%/%'] = array(
    'title' => "View Facilities Use and Special Event Request Form",
    'description' => "View a specific event request.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_event_workflow_event_view_0_page', 2, 3),
    'file' => 'mcneese_event_workflow_event_view_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('view', 2),
    'tab_parent' => 'events/list-0',
    'tab_root' => 'events/list-0',
  );

  $items['events/pdf-0/%/%'] = array(
    'title' => "Render PDF for Facilities Use and Special Event Request Form",
    'description' => "Download a PDF of a specific event request.",
    'page callback' => 'mcneese_event_workflow_event_pdf_0_page',
    'page arguments' => array(2, 3),
    'file' => 'mcneese_event_workflow_event_view_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('view', 2),
    'tab_parent' => 'events/list-0',
    'tab_root' => 'events/list-0',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Access callback for event workflow management page.
 *
 * @param string $operation
 *   (optional) When specified, performs access check based on operation.
 * @param int $id
 *   (optional) When specified, performs access check based the provided id.
 *   Some operations require this to return TRUE under certain circumstances.
 *
 * @param bool
 *   TRUE on access granted, FALSE otherwise.
 */
function mcneese_event_workflow_management_page_event_access($operation = NULL, $id = NULL) {
  global $user;

  if (user_access('mcneese event workflow administer')) {
    return TRUE;
  }

  if ($operation == 'create') {
    if (user_access('mcneese event workflow request')) {
      return TRUE;
    }
  }
  elseif ($operation == 'edit') {
    if (user_access('mcneese event workflow manage')) {
      return TRUE;
    }
    elseif (user_access('mcneese event workflow request')) {
      if (is_null($id)) return FALSE;

      try {
        $query = db_select('mew_event_requests', 'mew');
        $query->fields('mew', array('id'));
        $query->condition('mew.id', $id);
        $query->condition('mew.user_id', $user->uid);
        $query->countQuery();

        $executed = $query->execute();
        $result = $executed->fetchField();

        if ($result > 0) return TRUE;

        return FALSE;
      }
      catch (Exception $ex) {
        cf_error::on_exception($ex);

        return FALSE;
      }
    }
  }
  elseif ($operation == 'view') {
    if (user_access('mcneese event workflow review') || user_access('mcneese event workflow manage')) {
      return TRUE;
    }
    elseif (user_access('mcneese event workflow request')) {
      if (is_null($id)) return FALSE;

      try {
        $query = db_select('mew_event_requests', 'mew');
        $query->fields('mew', array('id'));
        $query->condition('mew.id', $id);
        $query->condition('mew.user_id', $user->uid);
        $query->countQuery();

        $executed = $query->execute();
        $result = $executed->fetchField();

        if ($result > 0) return TRUE;

        return FALSE;
      }
      catch (Exception $ex) {
        cf_error::on_exception($ex);

        return FALSE;
      }
    }
  }
  elseif ($operation == 'list') {
    if (user_access('mcneese event workflow request') || user_access('mcneese event workflow review') || user_access('mcneese event workflow manage')) {
      return TRUE;
    }
  }
  elseif ($operation == 'search') {
    if (user_access('mcneese event workflow review') || user_access('mcneese event manage ')) {
      return TRUE;
    }
  }
  elseif ($operation == 'delete') {
    if (user_access('mcneese event workflow manage')) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Access callback for event workflow management page.
 *
 * @param bool
 *   TRUE on access granted, FALSE otherwise.
 */
function mcneese_event_workflow_management_page_access() {
  if (user_access('mcneese event workflow administer') || user_access('mcneese event workflow request') || user_access('mcneese event workflow review') || user_access('mcneese event workflow manage')) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_cronapi().
 */
function mcneese_event_workflow_cronapi() {
  $items = array();

  $items['mcneese_event_workflow_oracle_recache'] = array(
    'title' => t("Recreate Oracle Cache"),
    'callback' => 'mcneese_event_workflow_oracle_recache_cron',
    'callback arguments' => array(),
    'enabled' => FALSE,
  );

  return $items;
}

/**
 * Returns an array of event workflow state options for populating lists.
 *
 * @return array
 *   An array of options available.
 */
function event_workflow_get_workflow_states_tree() {
  $options = array();

  $options_tree = taxonomy_get_tree(2, 0, NULL, TRUE);
  foreach ($options_tree as &$branch) {
    $options[$branch->tid] = $branch->name;
  }

  asort($options);

  return $options;
}

/**
 * Performs a select query.
 *
 * @param string $query
 *   A query string to process.
 * @param array $arguments
 *   (optional) An array of arguments
 *
 * @return array|bool
 *   An array containing the query results.
 *   FALSE is returned on error.
 */
function mcneese_event_workflow_oracle_select($query, $arguments = array()) {
  if (!is_string($query)) {
    cf_error::invalid_string('query');

    return FALSE;
  }

  if (!is_array($arguments)) {
    cf_error::invalid_array('arguments');

    return FALSE;
  }

  $results = array();

  try {
    $conn = Database::getConnection('default', 'oracle');

    $results = (array) $conn->oracleQuery($query, $arguments)->fetchAll();
  } catch (Exception $ex) {
    cf_error::on_exception($ex);

    return FALSE;
  }

  return $results;
}

/**
 * Returns a list of columns defined in the venue list table.
 *
 * @return array|bool
 *   An array containing the column names.
 *   FALSE is returned on error.
 *
 * @see: mcneese_event_workflow_oracle_select()
 */
function mcneese_event_workflow_load_venue_detail_columns() {
  $cache_id = __function__;
  $columns = &drupal_static($cache_id, NULL);
  if (is_array($columns)) {
    return $columns;
  }

  if ($cache = cache_get($cache_id)){
    return $cache->data;
  }

  $columns = array();
  $rows = mcneese_event_workflow_oracle_select('select * from ucs.msu_venue_detail where rownum = 1');

  // determine columns names by selecting the first
  if (!empty($rows)) {
    $row = array_pop($rows);
    foreach ($row as $key => &$value) {
      // oracle returns duplicate/redundant data in numeric rows.
      if (is_numeric($key)) continue;

      if (!array_key_exists($key, $columns)) {
        $columns[] = $key;
      }
    }
  }

  if (empty($columns)) return FALSE;

  cache_set($cache_id, $columns, 'cache', CACHE_PERMANENT);

  return $columns;
}

/**
 * Returns a list of columns defined in the venue list table.
 *
 * @return array|bool
 *   An array containing the column names.
 *   FALSE is returned on error.
 *
 * @see: mcneese_event_workflow_oracle_select()
 */
function mcneese_event_workflow_load_venue_list_columns() {
  $cache_id = __function__;
  $columns = &drupal_static($cache_id, NULL);
  if (is_array($columns)) {
    return $columns;
  }

  if ($cache = cache_get($cache_id)){
    return $cache->data;
  }

  $columns = array();
  $rows = mcneese_event_workflow_oracle_select('select * from ucs.msu_venue_list where rownum = 1');

  // determine columns names by selecting the first row.
  if (!empty($rows)) {
    $row = array_pop($rows);
    foreach ($row as $key => &$value) {
      // oracle returns duplicate/redundant data in numeric rows.
      if (is_numeric($key)) continue;

      if (!array_key_exists($key, $columns)) {
        $columns[] = $key;
      }
    }
  }

  if (empty($columns)) return FALSE;

  cache_set($cache_id, $columns, 'cache', CACHE_PERMANENT);

  return $columns;
}

/**
 * Returns a list of buildings available.
 *
 * @param string|null $column
 *   (optional) when specified, only load a single, specific, column.
 *   Note: ucs.msu_venue_list calls the building location 'category', so use
 *  'category' for the 'location' column.
 * @param bool $column
 *   (optional) When specified, only load distinct results.
 *
 * @return array|bool
 *   An array containing the basic building information.
 *   FALSE is returned on error.
 *
 * @see: mcneese_event_workflow_load_venue_list_columns()
 * @see: mcneese_event_workflow_oracle_select()
 */
function mcneese_event_workflow_load_buildings_list($column = NULL, $distinct = FALSE) {
  if (!is_null($column) && !is_string($column)) {
    cf_error::invalid_string('column');
    return FALSE;
  }

  if (!is_bool($distinct)) {
    cf_error::invalid_bool('distinct');
    return FALSE;
  }

  $cache_id = __function__;
  $cache_expire = '+1 day';

  if (!empty($column)) {
    $cache_id .= '_' . $column;
  }

  if ($distinct) {
    $cache_id .= '_distinct';
  }

  $items = &drupal_static($cache_id, NULL);
  if (is_array($items)) {
    return $items;
  }

  if ($cache = cache_get($cache_id)){
    return $cache->data;
  }

  $columns = '*';
  if (!empty($column)) {
    // sanitize string by only allowing 'word' characters.
    $columns = preg_replace('/\W*/i', '', $column);
  }

  if ($distinct) {
    $columns = 'distinct (' . $columns . ')';
  }

  $items = array();
  $rows = (array) mcneese_event_workflow_oracle_select('select ' . $columns . ' from ucs.msu_venue_list');

  if (empty($column)) {
    foreach ($rows as &$row) {
      $item = array();

      if (is_array($row)) {
        foreach ($row as $key => &$value) {
          // oracle returns duplicate/redundant data in numeric rows.
          if (is_numeric($key)) continue;

          $item[$key] = $value;
        }
      }

      $items[] = $item;
    }
  }
  else {
    // return a single depth array when there is only 1 column being selected.
    foreach ($rows as &$row) {
      if (is_array($row)) {
        foreach ($row as $key => &$value) {
          // oracle returns duplicate/redundant data in numeric rows.
          if (is_numeric($key)) continue;

          $items[] = $value;
        }
      }
    }
  }

  if (empty($items)) return FALSE;

  $reset_cache_interval = new DateTime($cache_expire);
  cache_set($cache_id, $items, 'cache', $reset_cache_interval->getTimestamp());

  return $items;
}

 /**
 * Returns a list of buildings available.
 *
 * Note: ucs.msu_venue_list calls the building location 'category'.
 *
 * @param string|null $location
 *   (optional) when specified, load all buildings associated with a location.
 * @param string|null $building_code
 *   (optional) when specified, load all buildings associated with a building_code.
 * @param string|null $room_number
 *   (optional) when specified, load all buildings associated with a room_number.
 *
 * @return array|bool
 *   An array containing the detailed building information.
 *   FALSE is returned on error.
 *
 * @see: mcneese_event_workflow_load_buildings_list()
 * @see: mcneese_event_workflow_load_venue_list_columns()
 * @see: mcneese_event_workflow_oracle_select()
 */
function mcneese_event_workflow_load_buildings($location = NULL, $building_code = NULL, $room_number = NULL) {
  if (!is_null($location) && !is_string($location)) {
    cf_error::invalid_string('location');
    return FALSE;
  }

  $cache_id = __function__;
  $cache_expire = '+1 day';

  if (!empty($location)) {
    $cache_id .= '_' . $location;
  }

  if (!empty($building_code)) {
    $cache_id .= '_' . $building_code;
  }

  if (!empty($room_number)) {
    $cache_id .= '_' . $room_number;
  }

  $items = &drupal_static($cache_id, NULL);
  if (is_array($items)) {
    return $items;
  }

  if ($cache = cache_get($cache_id)){
    return $cache->data;
  }

  $where = '';
  if (!empty($location)) {
    // sanitize string by only allowing 'word' characters.
    $sanitized_location = preg_replace('/\W*/i', '', $location);

    $where .= ' where category = \'' . $sanitized_location . '\'';
  }

  if (!empty($building_code)) {
    // sanitize string by only allowing 'word' characters.
    $sanitized_building_code = preg_replace('/\W*/i', '', $building_code);

    if (empty($where)) {
      $where .= ' where building_code = \'' . $sanitized_building_code . '\'';
    }
    else {
      $where .= ' AND building_code = \'' . $sanitized_building_code . '\'';
    }
  }

  if (!empty($room_number)) {
    // sanitize string by only allowing 'word' characters.
    $sanitized_room_number = preg_replace('/\W*/i', '', $room_number);

    if (empty($where)) {
      $where .= ' where room_number = \'' . $sanitized_room_number . '\'';
    }
    else {
      $where .= ' AND room_number = \'' . $sanitized_room_number . '\'';
    }
  }

  $items = array();
  $rows = mcneese_event_workflow_oracle_select('select * from ucs.msu_venue_list' . $where);

  if ($rows === FALSE) {
    return FALSE;
  }

  if (empty($column)) {
    foreach ($rows as &$row) {
      $item = array();

      if (is_array($row)) {
        foreach ($row as $key => &$value) {
          // oracle returns duplicate/redundant data in numeric rows.
          if (is_numeric($key)) continue;

          $item[$key] = $value;
        }
      }

      $items[] = $item;
    }
  }
  else {
    // return a single depth array when there is only 1 column being selected.
    foreach ($rows as &$row) {
      if (is_array($row)) {
        foreach ($row as $key => &$value) {
          // oracle returns duplicate/redundant data in numeric rows.
          if (is_numeric($key)) continue;

          $items[] = $value;
        }
      }
    }
  }

  if (empty($items)) return FALSE;

  $reset_cache_interval = new DateTime($cache_expire);
  cache_set($cache_id, $items, 'cache', $reset_cache_interval->getTimestamp());

  return $items;
}

/**
 * Returns a list of user roles available.
 *
 * @return array|bool
 *   An array containing the roles.
 *   FALSE is returned on error.
 */
function mcneese_event_workflow_load_event_user_roles() {
  $cache_id = __function__;
  $roles = &drupal_static($cache_id, NULL);
  if (is_array($roles)) {
    return $roles;
  }

  if ($cache = cache_get($cache_id)){
    return $cache->data;
  }

  $columns = array();
  $rows = (array) mcneese_event_workflow_oracle_select('select distinct role from ucs.msu_event_role');

  // strip out redundant rows provided by oracle.
  foreach ($rows as &$row) {
    if (is_array($row)) {
      foreach ($row as $key => &$value) {
        // oracle returns duplicate/redundant data in numeric rows.
        if (is_numeric($key)) continue;

        $roles[] = $value;
      }
    }
  }

  if (empty($roles)) return FALSE;

  cache_set($cache_id, $roles, 'cache', CACHE_PERMANENT);

  return $roles;
}

/**
 * Returns an array containg mapping information for oracle.
 *
 * Use this to map drupal event role taxonomy terms with the oracle roles.
 *
 * @return array|bool
 *   An array containing the mapping information.
 *   FALSE is returned on error.
 */
function mcneese_event_workflow_load_event_user_role_mapping() {
  $cache_id = __function__;
  $terms = &drupal_static($cache_id, array());
  if (!empty($terms)) {
    return $terms;
  }

  try {
    $query = db_select('taxonomy_term_data', 'ttd');
    $query->innerJoin('taxonomy_vocabulary', 'tv', 'tv.vid = ttd.vid');
    $query->fields('ttd', array('tid'));
    $query->condition('tv.machine_name', 'user_roles');

    $executed = $query->execute();
    foreach ($executed as $row) {
      $term = taxonomy_term_load($row->tid);
      $name = $term->field_role_oracle_name['und'][0]['value'];

      $terms[$name] = array('tid' => FALSE, 'role' => FALSE, 'rid' => FALSE, 'name' => FALSE);


      if (!empty($term->field_role_oracle_name['und'][0]['value'])) {
        $terms[$name]['tid'] = $row->tid;
      }

      if (!empty($term->field_role_system_name['und'][0]['value'])) {
        $role = user_role_load_by_name($term->field_role_system_name['und'][0]['value']);

        if (is_object($role)) {
          $terms[$name]['role'] = $role->name;
          $terms[$name]['rid'] = $role->rid;
        }

        unset($role);
      }

      if (!empty($term->name)) {
        $terms[$name]['name'] = $term->name;
      }
    }
  } catch (Exception $ex) {
    cf_error::on_exception($ex);

    return FALSE;
  }

  return $terms;
}

/**
 * Returns user's information.
 *
 * @param string $banner_id
 *   The numeric banner id string uniquely representing some user.
 *
 * @return array|bool
 *   An array containing the user information.
 *   FALSE is returned on error.
 */
function mcneese_event_workflow_load_event_user($banner_id) {
  $cache_id = __function__;
  $user = &drupal_static($cache_id, NULL);
  if (is_array($user)) {
    return $user;
  }

  if (!is_string($banner_id)) {
    cf_error::invalid_string('banner_id');

    return FALSE;
  }

  $user = array();
  $rows = (array) mcneese_event_workflow_oracle_select('select * from ucs.msu_event_role where id = :banner_id', array('banner_id' => $banner_id));

  // strip out redundant rows provided by oracle.
  foreach ($rows as &$row) {
    foreach ($row as $key => &$value) {
      // oracle returns duplicate/redundant data in numeric rows.
      if (is_numeric($key)) continue;

      if ($key == 'role') {
        if (!array_key_exists('role', $user)) {
          $user['role'] = array();
        }

        $user['role'][] = $value;
      }
      else {
        $user[$key] = $value;
      }
    }
  }

  if (empty($user)) return FALSE;

  return $user;
}

/**
 * Synchronizes the user settings with the oracle settings.
 *
 * @param object|null $user
 *   (optional) The user object to synchronize.
 *   If not specified, then the current user is synchronized.
 *
 * @return bool
 *   TRUE on success, FALSE otherwise.
 */
function mcneese_event_workflow_synchronize_user_settings($user = NULL) {
  if (is_null($user)) {
    $user = cf_current_user();
  }

  if (!is_object($user)) {
    cf_error::invalid_object('user');
    return FALSE;
  }

  // skip special-case ldapless user.
  if ($user->uid == 8) return TRUE;

  $mappings = mcneese_event_workflow_load_event_user_role_mapping();

  // unset all system role information associated with oracle.
  $system_roles = (array) $user->roles;
  foreach ($mappings as $mapping) {
    if (array_key_exists($mapping['rid'], $system_roles)) {
      unset($system_roles[$mapping['rid']]);
    }
  }

  // if the (non-admin) user has no core roles, then assign requester role.
  $assign_requester_role = TRUE;
  foreach ($system_roles as $key => &$role) {
    if ($role == 'administrator') {
      $assign_requester_role = FALSE;
      break;
    }

    if ($role == 'reviewer') {
      $assign_requester_role = FALSE;
      break;
    }

    if ($role == 'manager') {
      $assign_requester_role = FALSE;
      break;
    }

    if ($role == 'requester') {
      $assign_requester_role = FALSE;
      break;
    }
  }

  if ($assign_requester_role) {
    $role = user_role_load_by_name('requester');
    $system_roles[$role->rid] = 'requester';
  }

  if (isset($user->field_user_banner_id['und'][0]['value'])) {
    $u = mcneese_event_workflow_load_event_user($user->field_user_banner_id['und'][0]['value']);

    if ($u == FALSE) {
      // @todo: throw watchdog error?
      $u = array();
    }

    $event_roles = array();
    if (!empty($u['role'])) {
      foreach ($u['role'] as $role) {
        if (isset($mappings[$role]['tid'])) {
          $event_roles[] = array('tid' => $mappings[$role]['tid']);
          $system_roles[$mappings[$role]['rid']] = $mappings[$role]['role'];
        }
      }
    }

    $edit = array('field_user_event_roles' => array('und' => $event_roles), 'roles' => $system_roles);

    if (user_save($user, $edit)) return TRUE;
  }

  return FALSE;
}

/**
 * Manually trigger cache save or cache reset.
 *
 * The purpose of this is to provide a way to cache all database information.
 * The oracle database at McNeese has scheduled downtime.
 * This system is supposed to operate even when the database is down.
 * Therefore, caching is necessary and needs to be performed prior to downtime.
 *
 * @param bool $save
 *   (optional) When TRUE, caches are saved.
 *   When FALSE, caches are purged.
 */
function mcneese_event_workflow_force_cache($save = TRUE) {
  // reset is performed in both cases to ensure that the cache is fresh.
  cache_clear_all('mcneese_event_workflow_load_venue_detail_columns', 'cache');
  cache_clear_all('mcneese_event_workflow_load_venue_list_columns', 'cache');
  cache_clear_all('mcneese_event_workflow_load_event_user_roles', 'cache');

  cache_clear_all('mcneese_event_workflow_load_buildings_list', 'cache');
  cache_clear_all('mcneese_event_workflow_load_buildings_list_', 'cache', TRUE);

  cache_clear_all('mcneese_event_workflow_load_buildings', 'cache');
  cache_clear_all('mcneese_event_workflow_load_buildings_', 'cache', TRUE);

  if ($save) {
    mcneese_event_workflow_load_venue_detail_columns();
    mcneese_event_workflow_load_event_user_roles();

    $venue_list_columns = mcneese_event_workflow_load_venue_list_columns();

    if ($venue_list_columns == FALSE) {
      // @todo: throw watchdog error?
      $venue_list_columns = array();
    }

    mcneese_event_workflow_load_buildings_list();

    foreach ($venue_list_columns as $column) {
      mcneese_event_workflow_load_buildings_list($column, FALSE);
      mcneese_event_workflow_load_buildings_list($column, TRUE);
    }

    $building_locations = mcneese_event_workflow_load_buildings_list('category', TRUE);

    if ($building_locations == FALSE) {
      // @todo: throw watchdog error?
      $building_location = array();
    }

    mcneese_event_workflow_load_buildings();

    foreach ($building_locations as $location) {
      mcneese_event_workflow_load_buildings($location);
    }
  }
}

/**
 * Executes the cron queue to recreate the oracle cache.
 *
 * This requires the ultimate_cron module to function.
 *
 * @see mcneese_event_workflow_cronapi()
 * @see mcneese_event_workflow_force_cache()
 */
function mcneese_event_workflow_oracle_recache_cron() {
  mcneese_event_workflow_force_cache();
}

/**
 * Returns a list of secondary tables and their structure.
 *
 * @return array
 *  A list of secondary tables and their structure.
 */
function mcneese_event_workflow_secondary_table_structure() {
  $structure = array();
  $structure['top'] = array(
    'location' => array(
      'path' => 'event][location',
    ),
    'room_list' => array(
      'path' => 'event][room_list',
      'storage' => 'alternate',
      'alternate' => array(
        'building' => array(
          'path' => 'event][room_list',
          'key' => 1,
        ),
        'room' => array(
          'path' => 'event][room_list',
          'key' => 2,
        ),
      ),
      'alternate_exception' => array(
        'location' => array(
          'exception_path' => 'top][location',
          'path' => 'event][location',
          'key' => 0,
        ),
      ),
      'alternate_method' => array(
        'explode' => array('_', 3),
      ),
    ),
    'additional' => array(
      'path' => 'event][additional',
    ),
  );

  $structure['dates'] = array(
    'date' => array(
      'path' => 'event][dates][date',
      'storage' => array('date_popup' => 'Y/m/d'),
    ),
    'time_start' => array(
      'path' => 'event][dates][time_start',
      'storage' => array('timestamp' => 'h:ia'),
    ),
    'time_stop' => array(
      'path' => 'event][dates][time_stop',
      'storage' => array('timestamp' => 'h:ia'),
    ),
  );

  $structure['coordinator'] = array(
    'name' => array(
      'path' => 'event][coordinator][name',
    ),
    'phone' => array(
      'path' => 'event][coordinator][phone',
    ),
    'email' => array(
      'path' => 'event][coordinator][email',
    ),
    'classification' => array(
      'path' => 'event][coordinator][classification',
    ),
  );

  $structure['information'] = array(
    'title' => array(
      'path' => 'event][information][title',
    ),
    'attendance' => array(
      'path' => 'event][information][attendance',
    ),
    'type' => array(
      'path' => 'event][information][type',
    ),
  );

  $structure['plans'] = array(
    'audience' => array(
      'path' => 'event][plans][audience',
    ),
    'description' => array(
      'path' => 'event][plans][description',
    ),
    'activities' => array(
      'path' => 'event][plans][activities',
    ),
    'dates' => array(
      'path' => 'event][plans][dates',
    ),
  );

  $structure['registration'] = array(
    'require' => array(
      'path' => 'event][registration][require',
    ),
    'website' => array(
      'path' => 'event][registration][website',
    ),
    'phone' => array(
      'path' => 'event][registration][phone',
    ),
    'ticket_price' => array(
      'path' => 'event][registration][ticket_price',
    ),
    'ticket_dates' => array(
      'path' => 'event][registration][ticket_dates',
    ),
    'ticket_website' => array(
      'path' => 'event][registration][ticket_website',
    ),
    'ticket_phone' => array(
      'path' => 'event][registration][ticket_phone',
    ),
    'generate_revenue' => array(
      'path' => 'event][registration][generate_revenue',
    ),
    'revenue_generated' => array(
      'path' => 'event][registration][revenue_generated',
      'columns' => event_workflow_get_revenue_generated_list_options('column_name'),
    ),
  );

  $structure['setup'] = array(
    'rectangular_tables_8ft' => array(
      'path' => 'event][setup][rectangular_tables_8ft',
    ),
    'round_tables_8ft' => array(
      'path' => 'event][setup][round_tables_8ft',
    ),
    'other_tables' => array(
      'path' => 'event][setup][other_tables',
    ),
    'standard_blue_chairs' => array(
      'path' => 'event][setup][standard_blue_chairs',
    ),
    'podium' => array(
      'path' => 'event][setup][podium',
    ),
    'portable_stage' => array(
      'path' => 'event][setup][portable_stage',
    ),
    'portable_stage_configuration' => array(
      'path' => 'event][setup][portable_stage_configuration',
    ),
    'security' => array(
      'path' => 'event][setup][security',
    ),
    'parking_assistance' => array(
      'path' => 'event][setup][parking_assistance',
    ),
    'parking_assistance_area' => array(
      'path' => 'event][setup][parking_assistance_area',
    ),
    'road_closures' => array(
      'path' => 'event][setup][road_closures',
    ),
    'road_closures_details' => array(
      'path' => 'event][setup][road_closures_details',
    ),
    'special_requests' => array(
      'path' => 'event][setup][special_requests',
    ),
    'special_requests_details' => array(
      'path' => 'event][setup][special_requests_details',
    ),
  );

  $structure['presentation'] = array(
    'technical_equipment' => array(
      'path' => 'event][presentation][technical_equipment',
    ),
    'technical_equipment_details' => array(
      'path' => 'event][presentation][technical_equipment_details',
      'columns' => event_workflow_get_technical_equipment_details_list_options('column_name'),
    ),
    'technical_equipment_microphone' => array(
      'path' => 'event][presentation][technical_equipment_microphone',
    ),
    'external_audio_person' => array(
      'path' => 'event][presentation][external_audio_person',
    ),
    'external_audio_person_name' => array(
      'path' => 'event][presentation][external_audio_person_name',
    ),
    'external_audio_person_email' => array(
      'path' => 'event][presentation][external_audio_person_email',
    ),
    'external_audio_person_phone' =>  array(
      'path' =>'event][presentation][external_audio_person_phone',
    ),
    'publicity' => array(
      'path' => 'event][presentation][publicity',
    ),
    'publicity_details' => array(
      'path' => 'event][presentation][publicity_details',
      'columns' => event_workflow_get_publicity_details_list_options('column_name'),
    ),
    'production' => array(
      'path' => 'event][presentation][production',
    ),
    'production_name' => array(
      'path' => 'event][presentation][production_name',
    ),
    'production_email' => array(
      'path' => 'event][presentation][production_email',
    ),
    'production_phone' => array(
      'path' => 'event][presentation][production_phone',
    ),
    'printed_material' => array(
      'path' => 'event][presentation][printed_material',
    ),
    'university_logo' => array(
      'path' => 'event][presentation][university_logo',
    ),
    'designing_material' => array(
      'path' => 'event][presentation][designing_material',
      'columns' => event_workflow_get_designing_material_list_options('column_name'),
    ),
    'designing_material_name' => array(
      'path' => 'event][presentation][designing_material_name',
    ),
    'designing_material_email' => array(
      'path' => 'event][presentation][designing_material_email',
    ),
    'designing_material_phone' => array(
      'path' => 'event][presentation][designing_material_phone',
    ),
  );

  $structure['services'] = array(
    'food_served' => array(
      'path' => 'event][services][food_served',
    ),
    'food_caterer' => array(
      'path' => 'event][services][food_caterer',
    ),
    'alcohol' => array(
      'path' => 'event][services][alcohol',
    ),
    'open_flames' => array(
      'path' => 'event][services][open_flames',
    ),
  );

  return $structure;
}

/**
 * Returns a list of secondary tables and their presentation options.
 *
 * @params int|null $option
 *   (optional) If NULL, present the table presentation structure of all fields
 *   and nested within their appropriate group.
 *   1: Provide group presentation options.
 *
 * @return array
 *  A list of secondary tables and their presentation options.
 */
function mcneese_event_workflow_secondary_table_presentation($option = NULL) {
  $presentation = array();

  if (!is_null($option)) {
    if ($option == 1) {
      $presentation['dates'] = array(
        'weight' => 1,
        'group' => 1,
        'label' => "Date Settings",
      );

      $presentation['coordinator'] = array(
        'weight' => 1,
        'group' => 0,
        'label' => "Coordinator Settings",
      );

      $presentation['information'] = array(
        'weight' => 0,
        'group' => 0,
        'label' => "Event Information",
      );

      $presentation['plans'] = array(
        'weight' => 1,
        'group' => 1,
        'label' => "Event Plans",
      );

      $presentation['registration'] = array(
        'weight' => 0,
        'group' => 2,
        'label' => "Event Registration",
        'event_type' => array(
          'hide_link' => array(57),
        ),
      );

      $presentation['setup'] = array(
        'weight' => 1,
        'group' => 2,
        'label' => "Event Setup",
      );

      $presentation['presentation'] = array(
        'weight' => 0,
        'group' => 3,
        'label' => "Event Presentation",
      );

      $presentation['services'] = array(
        'weight' => 1,
        'group' => 3,
        'label' => "Event Services",
      );

      $presentation['top'] = array(
        'weight' => 0,
        'group' => 4,
        'label' => "Miscellaneous",
      );
    }

    return $presentation;
  }

  $presentation['mer'] = array(
    'id' => array(
      'label' => 'Request ID',
      'group' => 'information',
      'weight' => 0,
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
    'created' => array(
      'label' => 'Created On',
      'group' => 'information',
      'weight' => 7,
      'type' => array(
        'value' => 'timestamp',
      ),
      'display' => array(
        'value' => 'Y/m/d h:ia',
      ),
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
    'user_id' => array(
      'label' => 'Created By',
      'group' => 'information',
      'weight' => 8,
      'type' => array(
        'value' => 'user_id',
      ),
      'display' => array(
        'value' => 'account_name',
      ),
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
    'updated' => array(
      'label' => 'Updated On',
      'group' => 'information',
      'weight' => 9,
      'type' => array(
        'value' => 'timestamp',
      ),
      'display' => array(
        'value' => 'Y/m/d h:ia',
      ),
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
  );

  $presentation['top'] = array(
    'location' => array(
      'label' => 'Event Location',
      'group' => 'information',
      'weight' => 3,
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
    'building' => array(
      'label' => 'Event Building',
      'group' => 'information',
      'weight' => 4,
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
    'room' => array(
      'label' => 'Event Room',
      'group' => 'information',
      'weight' => 5,
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
    'additional' => array(
      'label' => 'Additional Information or Questions to Campus Officials',
      'size' => 'large',
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
  );

  $presentation['dates'] = array(
    'date' => array(
      'label' => 'Date',
      'type' => array(
        'value' => 'timestamp',
      ),
      'display' => array(
        'value' => 'Y/m/d',
      ),
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
    'time_start' => array(
      'label' => 'Start Time',
      'type' => array(
        'value' => 'timestamp',
      ),
      'display' => array(
        'value' => 'h:ia',
      ),
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
    'time_stop' => array(
      'label' => 'Stop Time',
      'type' => array(
        'value' => 'timestamp',
      ),
      'display' => array(
        'value' => 'h:ia',
      ),
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
  );

  $presentation['coordinator'] = array(
    'name' => array(
      'label' => 'Coordinator Name',
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
    'phone' => array(
      'label' => 'Coordinator Phone',
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
    'email' => array(
      'label' => 'Coordinator E-Mail',
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
    'classification' => array(
      'label' => 'Coordinator Classification',
      'type' => array(
        'value' => 'taxonomy',
      ),
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
  );

  $presentation['information'] = array(
    'title' => array(
      'label' => 'Request Title',
      'weight' => 1,
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
    'attendance' => array(
      'label' => 'Expected Attendance',
      'weight' => 6,
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
    'type' => array(
      'label' => 'Request Type',
      'weight' => 2,
      'type' => array(
        'value' => 'taxonomy',
      ),
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
  );

  $presentation['plans'] = array(
    'audience' => array(
      'label' => 'Intended Audience',
      'type' => array(
        'value' => 'taxonomy',
      ),
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
    'description' => array(
      'label' => 'Event Description/Purpose',
      'size' => 'large',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'activities' => array(
      'label' => 'Planned Activities',
      'size' => 'large',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'dates' => array(
      'label' => 'Dates and Times',
      'size' => 'large',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
  );

  $presentation['registration'] = array(
    'require' => array(
      'label' => 'Registration or Ticket Purchase is Required',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'website' => array(
      'label' => 'Registration Website',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'phone' => array(
      'label' => 'Registration Phone',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'ticket_price' => array(
      'label' => 'Ticket Price',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'ticket_dates' => array(
      'label' => 'Ticket Dates',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'ticket_website' => array(
      'label' => 'Ticket Website',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'ticket_phone' => array(
      'label' => 'Ticket Phone',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'generate_revenue' => array(
      'label' => 'Revenue is Generated',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'revenue_generated' => array(
      'label' => 'How Revenue is Generated',
      'value_names' => array(
        'ticket',
        'merchandise',
        'concession',
      ),
      'type' => array(
        'ticket' => 'taxonomy',
        'merchandise' => 'taxonomy',
        'concession' => 'taxonomy',
      ),
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
  );

  $presentation['setup'] = array(
    'rectangular_tables_8ft' => array(
      'label' => 'Quantity of 8ft Rectangular Tables',
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
    'round_tables_8ft' => array(
      'label' => 'Quantity of 8ft Round Tables',
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
    'other_tables' => array(
      'label' => 'Description and Quantity of Other Tables',
      'size' => 'large',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'standard_blue_chairs' => array(
      'label' => 'Quantity of Blue Chairs',
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
    'podium' => array(
      'label' => 'Podium is Required',
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
    'portable_stage' => array(
      'label' => 'Portable Stage is Required',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'portable_stage_configuration' => array(
      'label' => 'Portable Stage Configuration',
      'size' => 'large',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'security' => array(
      'label' => 'Security is Required',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'parking_assistance' => array(
      'label' => 'Parking Assistance or Restrictions are Required',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'parking_assistance_area' => array(
      'label' => 'Parking Assistance or Restriction Explanation',
      'size' => 'large',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'road_closures' => array(
      'label' => 'Road Closures or Barricades are Required',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'road_closures_details' => array(
      'label' => 'Road Closures or Barricades Explanation',
      'size' => 'large',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'special_requests' => array(
      'label' => 'Special Requests are Required',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'special_requests_details' => array(
      'label' => 'Special Requests Explanation',
      'size' => 'large',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
  );

  $presentation['presentation'] = array(
    'technical_equipment' => array(
      'label' => 'Technical Equipment is Required',
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
    'technical_equipment_details' => array(
      'label' => 'Technical Equipment Explanation',
      'value_names' => array(
        'microphone',
        'screen',
        'computer',
        'sound',
      ),
      'type' => array(
        'microphone' => 'taxonomy',
        'screen' => 'taxonomy',
        'computer' => 'taxonomy',
        'sound' => 'taxonomy',
      ),
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
    'technical_equipment_microphone' => array(
      'label' => 'Quantity of Microphones',
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
    'external_audio_person' => array(
      'label' => 'External Audio/Video Person/Company is Required',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'external_audio_person_name' => array(
      'label' => 'Name of Person/Company',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'external_audio_person_email' => array(
      'label' => 'E-mail of Person/Company',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'external_audio_person_phone' => array(
      'label' => 'Phone of Person/Company',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'publicity' => array(
      'label' => 'Publicity is Required',
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
    'publicity_details' => array(
      'label' => 'Publicity Methods',
      'value_names' => array(
        'campus_digest',
        'student_digest',
        'website',
        'social_media',
        'axis_tv',
        'press_release',
      ),
      'type' => array(
        'campus_digest' => 'taxonomy',
        'student_digest' => 'taxonomy',
        'website' => 'taxonomy',
        'social_media' => 'taxonomy',
        'axis_tv' => 'taxonomy',
        'press_release' => 'taxonomy',
       ),
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
    'production' => array(
      'label' => 'Production Company or Professional Promoter is Required',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'production_name' => array(
      'label' => 'Production Company or Professional Promoter Name',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'production_email' => array(
      'label' => 'Production Company or Professional Promoter E-mail',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'production_phone' => array(
      'label' => 'Production Company or Professional Promoter Phone',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'printed_material' => array(
      'label' => 'Printed Material is Required',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'university_logo' => array(
      'label' => 'Printed Material Uses University Logo',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'designing_material' => array(
      'label' => 'Printed Material Designer',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'designing_material_name' => array(
      'label' => 'Name of Printer Material Designer',
      'value_names' => array(
        'public_relations',
        'marketing',
        'other',
      ),
      'type' => array(
        'public_relations' => 'taxonomy',
        'marketing' => 'taxonomy',
        'other' => 'taxonomy',
      ),
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'designing_material_email' => array(
      'label' => 'E-mail of Printed Material Designer',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
    'designing_material_phone' => array(
      'label' => 'Phone of Printed Material Designer',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
  );

  $presentation['services'] = array(
    'food_served' => array(
      'label' => 'Food or Drink is Being Served',
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
    'food_caterer' => array(
      'label' => 'Name of the Caterer/Business',
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
    'alcohol' => array(
      'label' => 'Alcohol is Being Served',
      'event_type' => array(
        'show' => TRUE,
        'hide' => FALSE,
      ),
    ),
    'open_flames' => array(
      'label' => 'Open Flames are Being Used',
      'event_type' => array(
        'show' => TRUE,
        'hide' => array(57),
      ),
    ),
  );

  return $presentation;
}


/**
 * Generate an array structure for a specific event request item.
 *
 * @param int $request_id
 *   The id representing the specific event request.
 * @param string $field_group
 *   The name of the group the values are associated with.
 * @param string $field_name
 *   The name of the field the values are associated with.
 * @param array $values
 *   An array of values associated with this field.
 * @param array $presentation
 *   A collection of variables to tweak how this value is presented.
 *
 * @return array|bool|null
 *   The built array.
 *   NULL is returned when there should be no array to build.
 *   FALSE is returned on failure.
 */
function mcneese_event_workflow_build_event_request_item_structure($request_id, $field_group, $field_name, $values, $presentation) {
  if (!cf_is_integer($request_id)) {
    cf_error::invalid_integer('request_id');
    return FALSE;
  }

  if (!is_string($field_group)) {
    cf_error::invalid_string('field_group');
    return FALSE;
  }

  if (!is_string($field_name)) {
    cf_error::invalid_string('field_name');
    return FALSE;
  }

  if (!is_array($values)) {
    cf_error::invalid_array('values');
    return FALSE;
  }

  if (!is_array($presentation)) {
    cf_error::invalid_array('presentation');
    return FALSE;
  }

  // define if the label should be displayed or not.
  $label_display = TRUE;
  if (!empty($presentation['label_display'])) {
    $label_display = (bool) $presentation['label_display'];
  }

  // define when label gets placed (prepend or postpend).
  $label_prepend = TRUE;
  if (!empty($presentation['label_prepend'])) {
    $label_prepend = (bool) $presentation['label_prepend'];
  }

  // define when label gets placed (prepend or postpend).
  $size = 'small';
  if (!empty($presentation['size'])) {
    $size = (string) $presentation['size'];
  }

  // define the label text presented to the user.
  $label = '';
  if (isset($presentation['label'])) {
    $label = $presentation['label'];
  }


  $class = $field_group . '-' . $field_name;
  $id = 'field-event-' . $request_id . '-item-' . $class;

  $output = array();
  $output['item'] = array(
    '#id' => $id,
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'field-event-item',
        'field-event-item-' . $class,
        'field-event-item-size-' . $size,
      ),
    ),
  );

  if ($label_display) {
    $output['item']['label'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'field-event-item-label',
          'field-event-item-label-' . $class,
        ),
      ),
      '#weight' => ($label_prepend) ? -1 : 1,
    );

    $output['item']['label']['markup'] = array(
      '#markup' => $label,
    );
  }

  $output['item']['values'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'field-event-item-values',
        'field-event-item-values-' . $class,
      ),
    ),
    '#weight' => 0,
  );

  $no_values = TRUE;
  foreach ($values as $delta => &$value) {
    $generated = mcneese_event_workflow_build_event_request_value_structure($request_id, $field_group, $field_name, $delta, $value, $presentation);

    if ($generated !== FALSE && !isset($generated['no_values'])) {
      $output['item']['values'][$delta] = array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array(
            'field-event-item-delta',
            'field-event-item-delta-' . $class,
            'field-event-item-delta-' . $delta,
            'field-event-item-delta-' . $class . '-' . $delta,
          ),
        ),
        '#weight' => 0,
      );

      $no_values = FALSE;
      foreach ($generated as $generated_key => &$generated_value) {
        $output['item']['values'][$delta][$generated_key] = $generated_value;
      }
    }

    unset($generated);
  }

  if ($no_values) {
    // this is added in case later on it is decided that $output should be returned.
    // the item class needs to communicate that this group has no values.
    $output['item']['#attributes']['class'][] = 'field-event-item-no_values';

    return NULL;
  }

  return $output;
}

/**
 * Generate an array structure for a specific event request value.
 *
 * @param int $request_id
 *   The id representing the specific event request.
 * @param string $field_group
 *   The name of the group the values are associated with.
 * @param string $field_name
 *   The name of the field the values are associated with.
 * @param int $delta
 *   This is for multiple values, each value has its own delta.
 * @param object $value
 *   The value object in the format in the database structure or in a sumulated
 *   structure.
 * @param array $presentation
 *   A collection of variables to tweak how this value is presented.
 *
 * @return array|bool
 *   The built array.
 *   FALSE is returend on failure.
 */
function mcneese_event_workflow_build_event_request_value_structure($request_id, $field_group, $field_name, $delta, $value, $presentation) {
  if (!cf_is_integer($request_id)) {
    cf_error::invalid_integer('request_id');
    return FALSE;
  }

  if (!is_string($field_group)) {
    cf_error::invalid_string('field_group');
    return FALSE;
  }

  if (!is_string($field_name)) {
    cf_error::invalid_string('field_name');
    return FALSE;
  }

  if (!cf_is_integer($delta)) {
    cf_error::invalid_integer('delta');
    return FALSE;
  }

  if (!is_object($value)) {
    cf_error::invalid_object('value');
    return FALSE;
  }

  if (!is_array($presentation)) {
    cf_error::invalid_array('presentation');
    return FALSE;
  }

  // define the presentation type.
  $type = array('value' => 'string');
  if (!empty($presentation['type'])) {
    $type = (array) $presentation['type'];
  }

  // define the presentation display.
  $display = array('value' => 'raw');
  if (!empty($presentation['display'])) {
    $display = (array) $presentation['display'];
  }

  // define the presentation value names.
  $value_names = array('value');
  if (!empty($presentation['value_names'])) {
    $value_names = (array) $presentation['value_names'];
  }

  global $base_path;

  $class = $field_group . '-' . $field_name . '-' . $delta;
  $id = 'field-event-' . $request_id . '-item-' . $class;

  $output = array();
  $output['value'] = array(
    '#id' => $id,
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'field-event-item-values-value',
        'field-event-item-values-value-' . $class,
      ),
    ),
  );

  foreach ($value_names as $value_name) {
    $output['value'][$value_name] = array(
      '#id' => $id . '-' . $value_name,
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'field-event-item-values-value-' . $value_name,
          'field-event-item-values-value-' . $class . '-' . $value_name,
        ),
      ),
    );

    $output['value'][$value_name]['markup'] = array(
      '#markup' => '',
    );

    if (!array_key_exists($value_name, $type)) {
      $type[$value_name] = 'string';
    }

    $output['value'][$value_name]['#attributes']['class'][] = 'field-event-item-values-type-' . $type[$value_name];
    $output['value'][$value_name]['#attributes']['class'][] = 'field-event-item-values-type-' . $class . '-' . $type[$value_name];

    if (property_exists($value, $value_name) && (is_numeric($value->$value_name) || !empty($value->$value_name))) {
      if ($type[$value_name] == 'string' || $type[$value_name] == 'text') {
        $output['value'][$value_name]['markup']['#markup'] = check_plain($value->$value_name);
      }
      elseif ($type[$value_name] == 'timestamp') {
        if (!array_key_exists($value_name, $display)) {
          $display[$value_name] = 'Y/m/d h:ia';
        }

        if ($display[$value_name] == 'stamp') {
          $output['value'][$value_name]['markup']['#markup'] = check_plain($value->$value_name);
        }
        else {
          $output['value'][$value_name]['markup']['#markup'] = check_plain(date($display[$value_name], $value->$value_name));
        }
      }
      elseif ($type[$value_name] == 'taxonomy') {
        $term = taxonomy_term_load($value->$value_name);

        if (is_object($term)) {
          $output['value'][$value_name]['markup']['#markup'] = check_plain($term->name);
        }

        unset($term);
      }
      elseif ($type[$value_name] == 'user_id') {
        $user = user_load($value->$value_name);

        if (is_object($user)){
          if (!array_key_exists($value_name, $display)) {
            $display[$value_name] = 'name';
          }

          if ($display[$value_name] == 'account_name') {
            $output['value'][$value_name]['markup']['#markup'] = '<a href="' . $base_path . 'user/' . $user->uid . '">' . check_plain($user->name) . '</a>';
          }
          elseif ($display[$value_name] != 'pass' && property_exists($user, $display)) {
            $output['value'][$value_name]['markup']['#markup'] = check_plain($user->$display[$value_name]);
          }
        }

        unset($user);
      }

      if (!is_numeric($output['value'][$value_name]['markup']['#markup']) && empty($output['value'][$value_name]['markup']['#markup'])) {
        $output['value'][$value_name]['#attributes']['class'][] = 'empty_value';
      }
    }
    else {
      $output['value'][$value_name]['#attributes']['class'][] = 'no_value';
      $output['no_values'] = TRUE;
    }
  }

  return $output;
}

/**
 * Returns an array of event category options for populating lists.
 *
 * Note: ucs.msu_venue_list calls the building location 'category'.
 *
 * @param string $option
 *   A string designating how the list will be populated.
 *
 * @return array
 *   An array of options available.
 */
function event_workflow_get_location_list_options($option = 'select') {
  $options = array();

  if ($option == 'select') {
    $options[''] = "- Select -";
  }

  $system_column_name = FALSE;
  if ($option == 'column_name') {
    $system_column_name = TRUE;
  }

  $options_tree = taxonomy_get_tree(7, 0, NULL, TRUE);
  foreach ($options_tree as &$branch) {
    if ($system_column_name) {
      if (!empty($branch->field_system_column_name['und'][0]['value'])) {
        $options[$branch->tid] = $branch->field_system_column_name['und'][0]['value'];
      }
    }
    else {
      $branch_category = '';
      if (isset($branch->field_column_venue_category['und'][0]['value'])) {
        $branch_category = $branch->field_column_venue_category['und'][0]['value'];
      }

      $options[$branch_category] = $branch->name;
    }
  }

  asort($options);

  return $options;
}

/**
 * Returns an array of event intended audience options for populating lists.
 *
 * @param string $option
 *   A string designating how the list will be populated.
 *
 * @return array
 *   An array of options available.
 */
function event_workflow_get_audience_list_options($option = 'select') {
  $options = array();

  if ($option == 'select') {
    $options[''] = "- Select -";
  }

  $system_column_name = FALSE;
  if ($option == 'column_name') {
    $system_column_name = TRUE;
  }

  $options_tree = taxonomy_get_tree(9, 0, NULL, TRUE);
  foreach ($options_tree as &$branch) {
    if ($system_column_name) {
      if (!empty($branch->field_system_column_name['und'][0]['value'])) {
        $options[$branch->tid] = $branch->field_system_column_name['und'][0]['value'];
      }
    }
    else {
      $options[$branch->tid] = $branch->name;
    }
  }

  asort($options);

  return $options;
}

/**
 * Returns an array of event revenue generated options for populating lists.
 *
 * @param string $option
 *   A string designating how the list will be populated.
 *
 * @return array
 *   An array of options available.
 */
function event_workflow_get_revenue_generated_list_options($option = 'select') {
  $options = array();

  if ($option == 'select') {
    $options[''] = "- Select -";
  }

  $system_column_name = FALSE;
  if ($option == 'column_name') {
    $system_column_name = TRUE;
  }

  $options_tree = taxonomy_get_tree(15, 0, NULL, TRUE);
  foreach ($options_tree as &$branch) {
    if ($system_column_name) {
      if (!empty($branch->field_system_column_name['und'][0]['value'])) {
        $options[$branch->tid] = $branch->field_system_column_name['und'][0]['value'];
      }
    }
    else {
      $options[$branch->tid] = $branch->name;
    }
  }

  asort($options);

  return $options;
}

/**
 * Returns an array of event information type options for populating lists.
 *
 * @param string $option
 *   A string designating how the list will be populated.
 *
 * @return array
 *   An array of options available.
 */
function event_workflow_get_information_type_list_options($option = 'select') {
  $options = array();

  if ($option == 'select') {
    $options[''] = "- Select -";
  }

  $system_column_name = FALSE;
  if ($option == 'column_name') {
    $system_column_name = TRUE;
  }

  $options_tree = taxonomy_get_tree(8, 0, NULL, TRUE);
  foreach ($options_tree as &$branch) {
    if ($system_column_name) {
      if (!empty($branch->field_system_column_name['und'][0]['value'])) {
        $options[$branch->tid] = $branch->field_system_column_name['und'][0]['value'];
      }
    }
    else {
      $options[$branch->tid] = $branch->name;
    }
  }

  asort($options);

  return $options;
}

/**
 * Returns an array of event publicity details options for populating lists.
 *
 * @param string $option
 *   A string designating how the list will be populated.
 *
 * @return array
 *   An array of options available.
 */
function event_workflow_get_publicity_details_list_options($option = 'select') {
  $options = array();

  if ($option == 'select') {
    $options[''] = "- Select -";
  }

  $system_column_name = FALSE;
  if ($option == 'column_name') {
    $system_column_name = TRUE;
  }

  $options_tree = taxonomy_get_tree(11, 0, NULL, TRUE);
  foreach ($options_tree as &$branch) {
    if ($system_column_name) {
      if (!empty($branch->field_system_column_name['und'][0]['value'])) {
        $options[$branch->tid] = $branch->field_system_column_name['und'][0]['value'];
      }
    }
    else {
      $options[$branch->tid] = $branch->name;
    }
  }

  asort($options);

  return $options;
}

/**
 * Returns an array of event room list for populating lists.
 *
 * @param string|null $location
 *   (optional) When not NULL, select options based on provided location.
 * @param string $option
 *   A string designating how the list will be populated.
 *
 * @return array
 *   An array of options available.
 */
function event_workflow_get_room_list_options($location = NULL, $option = 'select') {
  $options = array();

  $buildings = mcneese_event_workflow_load_buildings($location);

  if ($option == 'special') {
    foreach ($buildings as &$building) {
      if (empty($location)) {
        $id = 'undecided_';
      }
      else {
        $id = check_plain($building['category']) . '_';
      }

      $id .= check_plain($building['building_code']) . '_' . check_plain($building['room_number']);
      $title = '<div class="building_desc">' . check_plain($building['building_desc']) . '</div>';
      $title .= ' <div class="room_number"><span class="room_number-label">Room</span> <span class="room_number-data">' . check_plain($building['room_number']) . '</span></div>';

      if (!empty($building['capacity'])) {
        $title .= '<div class="room_capacity"><span class="capacity-label">Capacity:</span> <span class="capacity-data">' . check_plain($building['capacity']) . '</span></div>';
      }

      $room_desc = 'No information available.';
      if (!empty($building['room_desc'])) {
        $room_desc = check_plain($building['room_desc']);
      }
      $title .= '<div class="room_description"><span class="room_description-label"></span> <span class="room_description-data">' . $room_desc . '</span></div>';

      $options[$id] = $title;
    }
  }

  asort($options);

  return $options;
}

/**
 * Returns an array of event desiging materials options for populating lists.
 *
 * @param string $option
 *   A string designating how the list will be populated.
 *
 * @return array
 *   An array of options available.
 */
function event_workflow_get_designing_material_list_options($option = 'select') {
  $options = array();

  if ($option == 'select') {
    $options[''] = "- Select -";
  }

  $system_column_name = FALSE;
  if ($option == 'column_name') {
    $system_column_name = TRUE;
  }

  $options_tree = taxonomy_get_tree(16, 0, NULL, TRUE);
  foreach ($options_tree as &$branch) {
    if ($system_column_name) {
      if (!empty($branch->field_system_column_name['und'][0]['value'])) {
        $options[$branch->tid] = $branch->field_system_column_name['und'][0]['value'];
      }
    }
    else {
      $options[$branch->tid] = $branch->name;
    }
  }

  asort($options);

  return $options;
}

/**
 * Returns an array of event technical equipment details options for populating lists.
 *
 * @param string $option
 *   A string designating how the list will be populated.
 *
 * @return array
 *   An array of options available.
 */
function event_workflow_get_technical_equipment_details_list_options($option = 'select') {
  $options = array();

  if ($option == 'select') {
    $options[''] = "- Select -";
  }

  $system_column_name = FALSE;
  if ($option == 'column_name') {
    $system_column_name = TRUE;
  }

  $options_tree = taxonomy_get_tree(10, 0, NULL, TRUE);
  foreach ($options_tree as &$branch) {
    if ($system_column_name) {
      if (!empty($branch->field_system_column_name['und'][0]['value'])) {
        $options[$branch->tid] = $branch->field_system_column_name['und'][0]['value'];
      }
    }
    else {
      $options[$branch->tid] = $branch->name;
    }
  }

  asort($options);

  return $options;
}

/***
 * Convert a given value to the appropraite database format.
 *
 * @param string $value
 *   The date or time string to convert.
* @param string $method
 *   The method to use for converting.
 * @param string|array $option
 *   Additional options to pass to the method for conversion.
 *
 * @return
 *   The appropriate datatype suitable for storing into the database.
 *   FALSE is returned on error.
 */
function event_workflow_convert_value_to_database_format($value, $method, $option) {
  if ($method == 'timestamp') {
    return strtotime($value);
  }
  elseif ($method == 'date_popup') {
    return strtotime($value);
  }

  return FALSE;
}

/***
 * Convert a given value to the appropraite database format.
 *
 * @param string $value
 *   The date or time string to convert.
* @param string $method
 *   The method to use for converting.
 * @param string|array $option
 *   Additional options to pass to the method for conversion.
 *
 * @return
 *   The appropriate datatype suitable for storing into the database.
 *   FALSE is returned on error.
 */
function event_workflow_convert_value_from_database_format($value, $method, $option) {
  if ($method == 'timestamp') {
    if (empty($value)) return NULL;

    return date($option, $value);
  }
  elseif ($method == 'date_popup') {
    if (empty($value)) return NULL;

    return date('Y-m-d', $value);
  }

  return FALSE;
}

/**
 * Loads an event by its ID.
 *
 * $param int $id
 *  The numeric event id.
 *
 * @return array|bool
 *   An array of values associated with the event id.
 *   FALSE is returned on error.
 *   An empty array is returned when there is no event by that id.
 */
function event_workflow_load_event_by_id($id) {
  if (!cf_is_integer($id)) {
    cf_error::invalid_integer('id');
    return FALSE;
  }

  $event = array();
  $structure = mcneese_event_workflow_secondary_table_structure();

  try {
    $query = db_select('mew_event_requests', 'mer');
    $query->fields('mer');
    $query->condition('status', 0, '>');
    $query->condition('id', $id);

    $executed = $query->execute();
    $results = $executed->fetchAll();

    if (empty($results)) {
      return array();
    }

    $mer = array_pop($results);

    $query = db_select('mew_event_requests', 'mer');
    $query->fields('mer');
    $query->condition('status', 0, '>');
    $query->condition('id', $id);

    $executed = $query->execute();
    $results = $executed->fetchAll();

    foreach ($structure as $table_name => &$fields) {
      $current_table_name = 'mew_current_' . $table_name;
      $event[$table_name] = array();

      $query = db_select($current_table_name, 'mctn');
      $query->condition('mctn.event_id', $id);
      $query->fields('mctn');

      $executed = $query->execute();
      $results = $executed->fetchAll();

      if (empty($results)) {
        unset($current);
        unset($executed);
        unset($query);

        continue;
      }

      $current = array_pop($results);

      // manually add the event request information and presentation fields.
      $event['mer'] = array();
      foreach (array('id', 'user_id', 'banner_id', 'created', 'updated', 'status', 'state') as $key) {
        $event['mer'][$key] = array(0 => new stdClass());
        $event['mer'][$key][0]->value = $mer->$key;
      }

      // @todo: manually add the event request states.
      #$event['mer'] = array();
      #foreach (array('id', 'user_id', 'banner_id', 'created', 'updated', 'status', 'state') as $key) {
      #  $event['mer'][$key] = array(0 => $mer->$key);
      #}

      foreach ($fields as $field_name => &$field_values) {
        if (isset($structure[$table_name][$field_name]['storage']) && $structure[$table_name][$field_name]['storage'] == 'alternate' && array_key_exists('alternate', $structure[$table_name][$field_name])) {
          foreach ($structure[$table_name][$field_name]['alternate'] as $alternate_name => &$alternate_data) {
            $field_table_name = 'mew_field_' . $table_name . '_' . $alternate_name;

            $query = db_select($field_table_name, 'mftf');
            $query->condition('mftf.event_id', $id);
            $query->condition('mftf.revision', $current->$alternate_name); // @todo: handle case where ->$alternate_name does not exist.
            $query->fields('mftf');

            $executed = $query->execute();
            $results = $executed->fetchAll();

            if (empty($results)) {
              $event[$table_name][$alternate_name] = array();
            }
            else {
              $event[$table_name][$alternate_name] = $results;
            }
          }
        }
        else {
          $field_table_name = 'mew_field_' . $table_name . '_' . $field_name;

          $query = db_select($field_table_name, 'mftf');
          $query->condition('mftf.event_id', $id);
          $query->condition('mftf.revision', $current->$field_name); // @todo: handle case where ->$field_name does not exist.
          $query->fields('mftf');

          $executed = $query->execute();
          $results = $executed->fetchAll();

          if (empty($results)) {
            $event[$table_name][$field_name] = array();
          }
          else {
            $event[$table_name][$field_name] = $results;
          }
        }

        unset($results);
        unset($executed);
        unset($query);
      }

      unset($current);
      unset($results);
      unset($executed);
      unset($query);
    }
  }
  catch (Exception $ex) {
    cf_error::on_exception($ex);
    return FALSE;
  }

  return $event;
}

/**
 * Build the table structure for saving new or existing information.
 *
 * @param array $structure
 *   Describes how the secondary tables are populated and processed.
 * @param array $structure_tables
 *   A collection of 'current' tables to create or update.
 * @param array $structure_field_tables
 *   A collection of 'field' tables to create or update.
 * @param string $table_name
 *   Name of the current table being processed.
 * @param string $field_name
 *   Name of the current field being processed.
 * @param string $db_table
 *   The name of the 'current' table as defined the SQL database.
 * @param string $db_table_field
 *   The name of the 'field' table as defined the SQL database.
 * @param array $user_data
 *   An array of user related information:
 *   - 'user_id': The users ID.
 *   - 'banner_id: The users Banner ID.
 * @param array|null $event
 *   (optional) When NULL, this created tables are new tables.
 *   When an array, the created tables are updates to existing values.
 *   The array should be populated by event_workflow_load_event_by_id().
 *
 * @see mcneese_event_workflow_secondary_table_structure()
 * @see event_workflow_load_event_by_id()
 */
function mcneese_event_workflow_build_table_structure($structure, &$structure_tables, &$structure_field_tables, $table_name, $field_name, $db_table, $db_table_field, $user_data, $values, $event = NULL) {
  if (is_null($event)) {
    $event_id = NULL;
    $revision = 0;
  }
  else {
    $event_id = $event['mer']['id'][0]->value;
    $structure_tables[$db_table]['event_id'] = $event_id;

    $revision = mcneese_event_workflow_get_largest_revision($db_table_field, $event_id) + 1;
  }

  if (!isset($structure_field_tables[$db_table_field])) {
    $structure_field_tables[$db_table_field] = array();
  }

  if (array_key_exists('storage', $structure[$table_name][$field_name])) {
    if (is_array($structure[$table_name][$field_name]['storage'])) {
      $structure_tables[$db_table][$field_name] = $revision;

      $storage_names = array_keys($structure[$table_name][$field_name]['storage']);
      $storage_name = reset($storage_names);

      foreach ($values as $delta => $value) {
        $structure_field_tables[$db_table_field][$delta] = array();
        $structure_field_tables[$db_table_field][$delta]['user_id'] = $user_data['user_id'];
        $structure_field_tables[$db_table_field][$delta]['banner_id'] = $user_data['banner_id'];
        $structure_field_tables[$db_table_field][$delta]['date'] = REQUEST_TIME;
        $structure_field_tables[$db_table_field][$delta]['delta'] = $delta;
        $structure_field_tables[$db_table_field][$delta]['revision'] = $revision;

        if (!is_null($event)) {
          $structure_field_tables[$db_table_field][$delta]['event_id'] = $event_id;
        }

        $storage_values = event_workflow_convert_value_to_database_format($value, $storage_name, $structure[$table_name][$field_name]['storage'][$storage_name]);

        if ($storage_values !== FALSE && !is_null($storage_values)) {
          $structure_field_tables[$db_table_field][$delta]['value'] = $storage_values;
        }
      }
    }
    else {
      // alternate is used for handling fields that are stored in multiple separate tables.
      if ($structure[$table_name][$field_name]['storage'] == 'alternate' && array_key_exists('alternate', $structure[$table_name][$field_name])) {
        unset($structure_tables[$db_table][$field_name]);
        unset($structure_field_tables[$db_table_field]);
      }

      foreach ($values as $delta => $value) {
        $alternate_values = array();
        if (!empty($structure[$table_name][$field_name]['alternate_method'])) {
          foreach ($structure[$table_name][$field_name]['alternate_method'] as $method_name => $method_values) {
            if ($method_name == 'explode') {
              $alternate_values = explode($method_values[0], $value, $method_values[1]);
            }
            break;
          }
        }

        foreach ($structure[$table_name][$field_name]['alternate'] as $alternate_name => &$alternate_data) {
          if (!array_key_exists('key', $alternate_data)) continue;

          $db_table_field = 'mew_field_' . $table_name . '_' . $alternate_name;

          if (!isset($structure_field_tables[$db_table_field])) {
            $structure_field_tables[$db_table_field] = array();
          }

          $structure_field_tables[$db_table_field][$delta] = array();
          $structure_field_tables[$db_table_field][$delta]['user_id'] = $user_data['user_id'];
          $structure_field_tables[$db_table_field][$delta]['banner_id'] = $user_data['banner_id'];
          $structure_field_tables[$db_table_field][$delta]['date'] = REQUEST_TIME;
          $structure_field_tables[$db_table_field][$delta]['delta'] = $delta;
          $structure_field_tables[$db_table_field][$delta]['revision'] = $revision;

          if (isset($alternate_values[$alternate_data['key']]) && (is_numeric($alternate_values[$alternate_data['key']]) || !empty($alternate_values[$alternate_data['key']]))) {
            $structure_field_tables[$db_table_field][$delta]['value'] = $alternate_values[$alternate_data['key']];
          }

          if (!is_null($event_id)) {
            $structure_field_tables[$db_table_field][$delta]['event_id'] = $event_id;
          }

          $structure_tables[$db_table][$alternate_name] = $revision;
        }
      }
    }
  }
  else {
    $structure_tables[$db_table][$field_name] = $revision;

    foreach ($values as $delta => $value) {
      $structure_field_tables[$db_table_field][$delta] = array();
      $structure_field_tables[$db_table_field][$delta]['user_id'] = $user_data['user_id'];
      $structure_field_tables[$db_table_field][$delta]['banner_id'] = $user_data['banner_id'];
      $structure_field_tables[$db_table_field][$delta]['date'] = REQUEST_TIME;
      $structure_field_tables[$db_table_field][$delta]['delta'] = $delta;
      $structure_field_tables[$db_table_field][$delta]['revision'] = $revision;

      if (!is_null($event)) {
        $structure_field_tables[$db_table_field][$delta]['event_id'] = $event_id;
      }

      if (isset($structure[$table_name][$field_name]['columns'])) {
        foreach ($structure[$table_name][$field_name]['columns'] as $special_field_id => &$special_field_name) {
          if (isset($value[$special_field_id]) && $value[$special_field_id] > 0) {
            $structure_field_tables[$db_table_field][$delta][$special_field_name] = $special_field_id;
          }
        }
      }
      elseif (is_numeric($value) || !empty($value)) {
        $structure_field_tables[$db_table_field][$delta]['value'] = $value;
      }
    }
  }
}

/**
 * Gets the largest revision number available.
 *
 * Revisions are on a per-event, per-field basis.
 *
 * @param string $table_field_name
 *   Name of the table with the appropraite revision column.
 * @param int $id
 *   The unique Event ID of the event to get the revision available.
 *
 * @return int|FALSE
 *   The revision number or FALSE on failure.
 */
function mcneese_event_workflow_get_largest_revision($table_field_name, $id) {
  if (!is_string($table_field_name)) {
    cf_error::invalid_string('table_field_name');
    return FALSE;
  }

  if (!cf_is_integer($id)) {
    cf_error::invalid_integer('id');
    return FALSE;
  }

  try {
    $query = db_select($table_field_name, 'tfn');
    $query->fields('tfn', array('revision'));
    $query->condition('tfn.event_id', $id);
    $query->orderBy('tfn.revision', 'DESC');
    $query->range(0, 1);

    $executed = $query->execute();
    $result = $executed->fetchField();

    return $result;
  }
  catch (Exception $ex) {
    cf_error::on_exception($ex);
    return FALSE;
  }

  return FALSE;
}

/**
 * @} End of '@defgroup mcneese_event_workflow McNeese Event Workflow'.
 */
