<?php

/**
 * @file
 * McNeese State University Event Workflow module.
 */

/**
 * @defgroup mcneese_event_workflow McNeese Event Workflow
 * @{
 * Provides Workflow specific module functionality for the Events Workflow
 * System.
 */

/**
 * Defines event status codes.
 */
define('MEW_EVENT_STATUS_DELETED', 0);
define('MEW_EVENT_STATUS_LOCKED', 1);
define('MEW_EVENT_STATUS_UNLOCKED', 2);
define('MEW_EVENT_STATUS_CLOSED_ACCEPTED', 3);
define('MEW_EVENT_STATUS_CLOSED_DENIED', 4);
define('MEW_EVENT_STATUS_CLOSED_UNAVAILABLE', 5);
define('MEW_EVENT_STATUS_CLOSED_DUE_TO_LOCK', 6);
define('MEW_EVENT_STATUS_CANCELLED', 7);

/**
 * Defines Taxonomy VIDs.
 */
 define('MEW_VID_EVENT_CLASSIFICATION', 1);
 define('MEW_VID_EVENT_STEPS', 19);
 define('MEW_VID_EVENT_LOCATION', 7);
 define('MEW_VID_EVENT_AUDIENCE', 9);
 define('MEW_VID_REVENUE_GENERATED', 15);
 define('MEW_VID_EVENT_INFORMATION_TYPE', 8);
 define('MEW_VID_EVENT_PUBLICITY_DETAILS', 11);
 define('MEW_VID_EVENT_DESIGNING_MATERIAL', 16);
 define('MEW_VID_EVENT_TECHNICAL_EQUIPMENT_DETAILS', 10);
 define('MEW_VID_EVENT_REVIEWER_CLASSIFICATION', 17);
 define('MEW_VID_EVENT_REVIEWER_DECISION', 18);
 define('MEW_VID_EVENT_DATES_CATEGORY', 20);

/**
 * Defines Taxonomy TIDs for review steps.
 */
 define('MEW_REVIEW_STEP_COMPLETED', 134);
 define('MEW_REVIEW_STEP_CONFIRM_AND_RESERVE_SERVICES', 121);
 define('MEW_REVIEW_STEP_CONFIRM_AND_RESERVE_HOUSING', 120);
 define('MEW_REVIEW_STEP_CONFIRM_AND_RESERVE_VENUE', 119);
 define('MEW_REVIEW_STEP_MAKE_DECISIONS', 117);
 define('MEW_REVIEW_STEP_RELEASE_HOLD', 118);
 define('MEW_REVIEW_STEP_REVIEW', 132);
 define('MEW_REVIEW_STEP_USAGE_FEES', 133);
 define('MEW_REVIEW_STEP_VENUE_AVAILABLE', 116);

/**
 * Defines Taxonomy TID for review decisions.
 */
 define('MEW_REVIEW_DECISION_APPROVE', 115);
 define('MEW_REVIEW_DECISION_COMMENT', 113);
 define('MEW_REVIEW_DECISION_DENY', 114);
 define('MEW_REVIEW_DECISION_WAVE', 135);
 define('MEW_REVIEW_DECISION_USAGE_FEE', 136);

/**
 * Defines Taxonomy TIDs for review classifications.
 */
 define('MEW_REVIEW_CLASSIFICATION_ADMINISTRATIVE_ACCOUNTING', 105);
 define('MEW_REVIEW_CLASSIFICATION_EVENT_COORDINATOR', 99);
 define('MEW_REVIEW_CLASSIFICATION_FACILITIES', 104);
 define('MEW_REVIEW_CLASSIFICATION_FACULTY_ADVISOR', 100);
 define('MEW_REVIEW_CLASSIFICATION_FOOD_SERVICES', 108);
 define('MEW_REVIEW_CLASSIFICATION_HOUSING', 107);
 define('MEW_REVIEW_CLASSIFICATION_MAINTENANCE', 103);
 define('MEW_REVIEW_CLASSIFICATION_PURCHASING', 106);
 define('MEW_REVIEW_CLASSIFICATION_SECURITY', 102);
 define('MEW_REVIEW_CLASSIFICATION_STUDENT_SERVICES', 101);
 define('MEW_REVIEW_CLASSIFICATION_VENUE_COORDINATOR', 112);
 define('MEW_REVIEW_CLASSIFICATION_SYSTEM_ADMINISTRATOR', 1);
 define('MEW_REVIEW_CLASSIFICATION_MANAGER', 2);
 define('MEW_REVIEW_CLASSIFICATION_FAILSAFE_COORDINATOR', 45);

/**
 * Defines Taxonomy TIDs for event classifications.
 */
 define('MEW_EVENT_CLASSIFICATION_STUDENT', 1);
 define('MEW_EVENT_CLASSIFICATION_CAMPS', 2);
 define('MEW_EVENT_CLASSIFICATION_FACULTY', 3);
 define('MEW_EVENT_CLASSIFICATION_EXTERNAL', 4);

/**
 * Defines Taxonomy TIDs for event dates categories.
 */
 define('MEW_EVENT_DATES_CATEGORY_ACTUAL', 137);
 define('MEW_EVENT_DATES_CATEGORY_SETUP', 138);
 define('MEW_EVENT_DATES_CATEGORY_CLEANUP', 139);

/**
 * Defines operator codes for building search queries.
 */
 define('MEW_OPERATOR_LESS_THAN', 1);
 define('MEW_OPERATOR_LESS_THAN_EQUAL', 2);
 define('MEW_OPERATOR_EQUAL', 3);
 define('MEW_OPERATOR_LIKE', 4);
 define('MEW_OPERATOR_GREATER_THAN_EQUAL', 5);
 define('MEW_OPERATOR_GREATER_THAN', 6);
 define('MEW_OPERATOR_NOT_EQUAL', 7);
 define('MEW_OPERATOR_NOT_LIKE', 8);

/**
 * Defines a recursion limit for the search and/or operations.
 */
 define('MEW_MAX_SEARCH_RECURSION', 3);

/**
 * Defines a failsafe coordinator id to use.
 */
 define('MEW_FAILSAFE_COORDINATOR_ID', 45);


/**
 * Implements hook_permission().
 */
function mcneese_event_workflow_permission() {
  $permissions = array();
  $permissions['mcneese event workflow administer'] = array(
    'title' => t("Administer Event Workflow"),
    'description' => t("Grants permissions to administer event requests and workflow."),
  );

  $permissions['mcneese event workflow request'] = array(
    'title' => t("Request Event Workflow"),
    'description' => t("Grants permissions to make request events."),
  );

  $permissions['mcneese event workflow review'] = array(
    'title' => t("Review Event Workflow"),
    'description' => t("Grants permissions to review event requests."),
  );

  $permissions['mcneese event workflow manage'] = array(
    'title' => t("Manage Event Workflow"),
    'description' => t("Grants permissions to manage event requests."),
  );


  return $permissions;
}

/**
 * Implements hook_menu().
 */
function mcneese_event_workflow_menu() {
  $items = array();

  $items['events'] = array(
    'title' => "Event Requests Dashboard",
    'description' => "Event Dashboard",
    'page callback' => 'mcneese_event_workflow_management_page',
    'file' => 'mcneese_event_workflow_management_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_access',
    'tab_parent' => '',
    'tab_root' => '',
  );

  $items['events/create-0'] = array(
    'title' => "Request Event",
    'description' => "New Request",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_event_workflow_event_create_0_form'),
    'file' => 'mcneese_event_workflow_event_create_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('create'),
    'tab_parent' => 'events',
    'tab_root' => 'events',
  );

  $items['events/create-0/autocomplete/event_coordinator/email'] = array(
    'title' => "",
    'page callback' => 'mcneese_event_workflow_event_edit_0_autocomplete_event_coordinator_email',
    'file' => 'mcneese_event_workflow_autocomplete.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/includes',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('create'),
    'type' => MENU_CALLBACK,
  );

  $items['events/create-0/autocomplete/event_coordinator/name'] = array(
    'title' => "",
    'page callback' => 'mcneese_event_workflow_event_edit_0_autocomplete_event_coordinator_name',
    'file' => 'mcneese_event_workflow_autocomplete.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/includes',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('create'),
    'type' => MENU_CALLBACK,
  );

  $items['events/create-0/autocomplete/event_coordinator/phone'] = array(
    'title' => "",
    'page callback' => 'mcneese_event_workflow_event_edit_0_autocomplete_event_coordinator_phone',
    'file' => 'mcneese_event_workflow_autocomplete.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/includes',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('create'),
    'type' => MENU_CALLBACK,
  );

  // this is provided as a way to have the breadcrumb path simulate the 'view' despite not being in the url path.
  $items['events/edit-0/%'] = array(
    'title' => "View Request",
    'description' => "Edit Request",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_event_workflow_event_edit_0_form', 2),
    'file' => 'mcneese_event_workflow_event_edit_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('edit', 2),
    'tab_parent' => 'events',
    'tab_root' => 'events',
  );

  $items['events/edit-0/%/%'] = array(
    'title' => "Edit Request",
    'description' => "Edit Request",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_event_workflow_event_edit_0_form', 2, 3),
    'file' => 'mcneese_event_workflow_event_edit_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('edit', 2),
    'tab_parent' => 'events',
    'tab_root' => 'events',
  );

  $items['events/edit-0/autocomplete/event_coordinator/email'] = array(
    'title' => "",
    'page callback' => 'mcneese_event_workflow_event_edit_0_autocomplete_event_coordinator_email',
    'file' => 'mcneese_event_workflow_autocomplete.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/includes',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('edit'),
    'type' => MENU_CALLBACK,
  );

  $items['events/edit-0/autocomplete/event_coordinator/name'] = array(
    'title' => "",
    'page callback' => 'mcneese_event_workflow_event_edit_0_autocomplete_event_coordinator_name',
    'file' => 'mcneese_event_workflow_autocomplete.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/includes',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('edit'),
    'type' => MENU_CALLBACK,
  );

  $items['events/edit-0/autocomplete/event_coordinator/phone'] = array(
    'title' => "",
    'page callback' => 'mcneese_event_workflow_event_edit_0_autocomplete_event_coordinator_phone',
    'file' => 'mcneese_event_workflow_autocomplete.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/includes',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('edit'),
    'type' => MENU_CALLBACK,
  );

  $items['events/reviewers-0'] = array(
    'title' => "Manage Reviewers",
    'description' => "Review Request",
    'page callback' => 'mcneese_event_workflow_event_reviewers_0_page',
    'file' => 'mcneese_event_workflow_event_reviewers_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('reviewers'),
    'tab_parent' => 'events',
    'tab_root' => 'events',
  );

  $items['events/reviewers-0/list/%/%'] = array(
    'title' => "List Reviewers",
    'description' => "List Reviewers",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_event_workflow_event_reviewers_0_form', 3, 4),
    'file' => 'mcneese_event_workflow_event_reviewers_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('reviewers'),
    'tab_parent' => 'events/reviewers-0',
    'tab_root' => 'events/reviewers-0',
  );

  $items['events/reviewers-0/delete/%'] = array(
    'title' => "Delete Reviewer",
    'description' => "Delete Reviewer",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_event_workflow_event_reviewers_0_delete_form', 3),
    'file' => 'mcneese_event_workflow_event_reviewers_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('reviewers'),
    'tab_parent' => 'events/reviewers-0',
    'tab_root' => 'events/reviewers-0',
  );

  $items['events/reviewers-0/autocomplete/user_id'] = array(
    'title' => "",
    'page callback' => 'mcneese_event_workflow_event_reviewers_0_autocomplete_user_id',
    'file' => 'mcneese_event_workflow_autocomplete.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/includes',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('reviewers'),
    'type' => MENU_CALLBACK,
  );

  $items['events/reviewers-0/autocomplete/reviewer_classification'] = array(
    'title' => "",
    'page callback' => 'mcneese_event_workflow_event_reviewers_0_autocomplete_reviewer_classification',
    'file' => 'mcneese_event_workflow_autocomplete.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/includes',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('reviewers'),
    'type' => MENU_CALLBACK,
  );

  $items['events/review-0'] = array(
    'title' => "Review Requests",
    'description' => "Review Request",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_event_workflow_event_review_0_page'),
    'file' => 'mcneese_event_workflow_event_review_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('review'),
    'tab_parent' => 'events',
    'tab_root' => 'events',
  );

  $items['events/review-0/%'] = array(
    'title' => "Review Requests",
    'description' => "Review Request",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_event_workflow_event_review_0_page', 2),
    'file' => 'mcneese_event_workflow_event_review_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('review'),
    'tab_parent' => 'events',
    'tab_root' => 'events',
  );

  $items['events/delete-0/%'] = array(
    'title' => "Delete Request",
    'description' => "Delete Request",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_event_workflow_event_delete_0_form', 2),
    'file' => 'mcneese_event_workflow_event_delete_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('delete', 2),
    'tab_parent' => 'events',
    'tab_root' => 'events',
  );

  $items['events/cancel-0/%'] = array(
    'title' => "Cancel Request",
    'description' => "Cancel Request",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_event_workflow_event_cancel_0_form', 2),
    'file' => 'mcneese_event_workflow_event_cancel_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('cancel', 2),
    'tab_parent' => 'events',
    'tab_root' => 'events',
  );

  $items['events/uncancel-0/%'] = array(
    'title' => "Cancel Request",
    'description' => "Uncancel Request",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_event_workflow_event_uncancel_0_form', 2),
    'file' => 'mcneese_event_workflow_event_cancel_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('uncancel', 2),
    'tab_parent' => 'events',
    'tab_root' => 'events',
  );

  $items['events/list-0'] = array(
    'title' => "List Requests",
    'description' => "List Requests",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_event_workflow_event_list_0_page'),
    'file' => 'mcneese_event_workflow_event_list_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('list'),
    'tab_parent' => 'events',
    'tab_root' => 'events',
  );

  $items['events/calendar-0/month'] = array(
    'title' => "Request Calendar",
    'description' => "Request Calendar - Month",
    'page callback' => 'mcneese_event_workflow_event_calendar_month_0_page',
    'page arguments' => array(NULL, NULL),
    'file' => 'mcneese_event_workflow_event_calendar_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('list'),
    'tab_parent' => 'events',
    'tab_root' => 'events',
  );

  $items['events/calendar-0/month/%/%'] = array(
    'title' => "Request Calendar",
    'description' => "Requests Calendar - Month",
    'page callback' => 'mcneese_event_workflow_event_calendar_month_0_page',
    'page arguments' => array(3, 4),
    'file' => 'mcneese_event_workflow_event_calendar_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('list'),
    'tab_parent' => 'events',
    'tab_root' => 'events',
  );

  $items['events/calendar-0/day'] = array(
    'title' => "Request Calendar",
    'description' => "Requests Calendar - Day",
    'page callback' => 'mcneese_event_workflow_event_calendar_day_0_page',
    'page arguments' => array(),
    'file' => 'mcneese_event_workflow_event_calendar_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('list'),
    'tab_parent' => 'events',
    'tab_root' => 'events',
  );

  $items['events/calendar-0/day/%/%/%'] = array(
    'title' => "Request Calendar",
    'description' => "Requests Calendar - Day",
    'page callback' => 'mcneese_event_workflow_event_calendar_day_0_page',
    'page arguments' => array(3, 4, 5),
    'file' => 'mcneese_event_workflow_event_calendar_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('list'),
    'tab_parent' => 'events',
    'tab_root' => 'events',
  );

  $items['events/list-0/%'] = array(
    'title' => "List Requests",
    'description' => "List Requests",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_event_workflow_event_list_0_page', 2),
    'file' => 'mcneese_event_workflow_event_list_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('list'),
    'tab_parent' => 'events',
    'tab_root' => 'events',
  );

  $items['events/search-0'] = array(
    'title' => "Search Requests",
    'description' => "Search Requests",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_event_workflow_event_search_0_form'),
    'file' => 'mcneese_event_workflow_event_search_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('search'),
    'tab_parent' => 'events',
    'tab_root' => 'events',
  );

  $items['events/view-0/%'] = array(
    'title' => "View Request",
    'description' => "View Request",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_event_workflow_event_view_0_page', 2),
    'file' => 'mcneese_event_workflow_event_view_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('view', 2),
    'tab_parent' => 'events/list-0',
    'tab_root' => 'events/list-0',
  );

  $items['events/view-0/%/%'] = array(
    'title' => "View Request",
    'description' => "View Request",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_event_workflow_event_view_0_page', 2, 3),
    'file' => 'mcneese_event_workflow_event_view_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('view', 2),
    'tab_parent' => 'events/list-0',
    'tab_root' => 'events/list-0',
  );

  $items['events/pdf-0/%/%'] = array(
    'title' => "Request PDF",
    'description' => "Download Request PDF",
    'page callback' => 'mcneese_event_workflow_event_pdf_0_page',
    'page arguments' => array(2, 3),
    'file' => 'mcneese_event_workflow_event_view_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('view', 2),
    'tab_parent' => 'events/list-0',
    'tab_root' => 'events/list-0',
    'type' => MENU_CALLBACK,
  );

  $items['events/history-0/%'] = array(
    'title' => "Event History",
    'description' => "Event History",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_event_workflow_event_history_0_form', 2),
    'file' => 'mcneese_event_workflow_event_history_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_event_workflow') . '/pages',
    'access callback' => 'mcneese_event_workflow_management_page_event_access',
    'access arguments' => array('history', 2),
    'tab_parent' => 'events',
    'tab_root' => 'events',
  );

  return $items;
}

/**
 * Build a month calendar display.
 *
 * @param array $items
 *   An array of event request items to link to.
 * @param int $month_start
 *   Unix timestamp for the start of the month.
 * @param int $month_stop
 *   Unix timestamp for the first day of the next month.
 * @param int $absolute_start
 *   Unix timestamp for the first day of the week in which the first day of
 *   the month may be found.
 * @param int $absolute_stop
 *   Unix timestamp for the last day of the week in which the last day of
 *   the month may be found.
 * @param string $title
 *   An HTML title for describing the calendar.
 * @param string $id
 *   (optional) A unique HTML id to associate with the calendar.
 *
 * @return string|bool
 *   The generate HTML markup or FALSE on error.
 */
function mcneese_event_workflow_build_calendar_month_markup($items, $month_start, $month_stop, $absolute_start, $absolute_stop, $title, $id = NULL) {
  if (!is_array($items)) {
    cf_error::invalid_array('items');
    return FALSE;
  }

  if (!cf_is_integer($month_start)) {
    cf_error::invalid_integer('month_start');
    return FALSE;
  }

  if (!cf_is_integer($month_stop)) {
    cf_error::invalid_integer('month_stop');
    return FALSE;
  }

  if (!cf_is_integer($absolute_start)) {
    cf_error::invalid_integer('absolute_start');
    return FALSE;
  }

  if (!cf_is_integer($absolute_stop)) {
    cf_error::invalid_integer('absolute_stop');
    return FALSE;
  }

  if (!is_string($title)) {
    cf_error::invalid_string('title');
    return FALSE;
  }

  $id_string = "";
  if (!empty($id)) {
    if (!is_string($id)) {
      cf_error::invalid_string('id');
      return FALSE;
    }

    $id_string = ' id="' . check_plain($id) . '"';
  }

  global $base_path;

  $week_start = 0;
  $week_stop = 6;

  // for ISO-8601.
  #$week_start = 1;
  #$week_stop = 7;

  $days_of_week = array(
    0 => 'Sunday',
    1 => 'Monday',
    2 => 'Tuesday',
    3 => 'Wednesday',
    4 => 'Thursday',
    5 => 'Friday',
    6 => 'Saturday',
    7 => 'Sunday', // In the case of ISO-8601, Sunday = 7.
  );


  // begin wrappers
  $markup = '<div' . $id_string . ' class="calendar-month-wrapper"><div class="calendar-month">';


  // title
  $markup .= '<div class="calendar-title">' . $title . '</div>';


  // navigation
  $last_month = strtotime('midnight first day of last month', $month_start);
  $next_month = strtotime('midnight first day of next month', $month_start);

  $url_base = $base_path . 'events/calendar-0/month/';

  $last_url = $url_base . date('Y', $last_month) . '/' . date('F', $last_month);
  $next_url = $url_base . date('Y', $next_month) . '/' . date('F', $next_month);

  $markup .= '<div class="calendar-navigation">';
  $markup .= '<div class="calendar-navigation-previous">';
  $markup .= '<a href="' . $last_url . '">Previous</a>';
  $markup .= '</div>';
  $markup .= '<div class="calendar-navigation-next">';
  $markup .= '<a href="' . $next_url . '">Next</a>';
  $markup .= '</div>';
  $markup .= '</div>';


  // header
  $markup .= '<div class="calendar-header">';
  $week_count = $week_start;
  while ($week_count <= $week_stop) {
    $markup .= '<div class="calendar-day weekday-' . $week_count . '">' . $days_of_week[$week_count] . '</div>';
    $week_count++;
  }
  $markup .= '</div>';


  // body
  $markup .= '<div class="calendar-body">';
  $current_date = $absolute_start;
  $week_first = date('W', $current_date);
  $week_count = $week_start;

  $weeks_processed = array();
  while ($current_date < $absolute_stop) {
    $current_week = date('W', $current_date);
    $current_month = date('n', $current_date);
    $current_day = date('j', $current_date);
    $current_month_day = $current_month . '-' . $current_day;

    if ($week_count == $week_start && !isset($weeks_processed[$week_first])) {
      $markup .= '<div class="calendar-week week_number-' . $current_week . '">';
      $weeks_processed[$week_first] = TRUE;
    }

    $current_month = ' month-current';
    if ($current_date < $month_start) {
      $current_month = ' month-previous';
    }
    elseif ($current_date >= $month_stop) {
      $current_month = ' month-next';
    }

    $markup .= '<div class="calendar-day weekday-' . $week_count . ' day-' . $current_day . $current_month . '">';
    $markup .= '<div class="calendar-label">' . $current_day . '</div>';
    if (!empty($items[$current_month_day])) {
      foreach ($items[$current_month_day] as $item_id => $item) {
        $markup .= '<div class="calendar-item"><a class="calendar-item-link" href="' . $item['href'] . '" title="' . $item['tooltip'] . '">' . $item['title'] . '</a></div>';
      }
    }
    $markup .= '</div>';

    $current_date = strtotime('midnight tomorrow', $current_date);

    $week_count++;
    if ($week_count > $week_stop) {
      $markup .= '</div>';

      $week_first = date('W', $current_date);
      $week_count = $week_start;
    }
  }
  $markup .= '</div>';


  // end wrappers
  $markup .= '</div></div>';

  return $markup;
}

/**
 * Access callback for event workflow management page.
 *
 * @param string $operation
 *   (optional) When specified, performs access check based on operation.
 * @param int $event_id
 *   (optional) When specified, performs access check based the provided id.
 *   Some operations require this to return TRUE under certain circumstances.
 * @param object $user
 *   (optional) The user object to obtain access for.
 *
 * @param bool
 *   TRUE on access granted, FALSE otherwise.
 */
function mcneese_event_workflow_management_page_event_access($operation = NULL, $event_id = NULL, $user = NULL) {
  if (is_null($user) || !is_object($user)) {
    $user = cf_current_user();
  }

  $request_status = array(
    MEW_EVENT_STATUS_LOCKED,
    MEW_EVENT_STATUS_UNLOCKED,
    MEW_EVENT_STATUS_CLOSED_ACCEPTED,
    MEW_EVENT_STATUS_CLOSED_DENIED,
    MEW_EVENT_STATUS_CLOSED_UNAVAILABLE,
    MEW_EVENT_STATUS_CLOSED_UNAVAILABLE,
    MEW_EVENT_STATUS_CANCELLED,
  );

  $manager = user_access('mcneese event workflow manage');
  $reviewer = user_access('mcneese event workflow review');
  $requester = user_access('mcneese event workflow request');

  if ($operation == 'create') {
    if ($requester) {
      return TRUE;
    }
  }
  elseif ($operation == 'edit') {
    $edit_request_status = array(
      MEW_EVENT_STATUS_UNLOCKED,
    );

    if ($manager) {
      try {
        $query = db_select('mew_event_requests', 'mer');

        $query->innerjoin('mew_current_top', 'mct', 'mer.id = mct.event_id');
        $query->innerjoin('mew_field_top_status', 'mfts', 'mct.event_id = mfts.event_id AND mct.status = mfts.revision AND mfts.delta = 0');

        // $query->countQuery() does not appear to be functioning as expected, so manually count.
        $query->addExpression('count(mer.id)');

        $query->condition('mer.id', $event_id);
        $query->condition('mfts.value', $edit_request_status, 'IN');

        $result = $query->execute()->fetchField();

        if ($result > 0) return TRUE;

        return FALSE;
      }
      catch (Exception $ex) {
        cf_error::on_exception($ex);

        return FALSE;
      }
    }
    elseif ($requester) {
      if (is_null($event_id)) return FALSE;

      try {
        $query = db_select('mew_event_requests', 'mer');

        $query->innerjoin('mew_current_top', 'mct', 'mer.id = mct.event_id');
        $query->innerjoin('mew_field_top_status', 'mfts', 'mct.event_id = mfts.event_id AND mct.status = mfts.revision AND mfts.delta = 0');

        // $query->countQuery() does not appear to be functioning as expected, so manually count.
        $query->addExpression('count(mer.id)');

        $query->condition('mer.id', $event_id);
        $query->condition('mer.user_id', $user->uid);
        $query->condition('mfts.value', $edit_request_status, 'IN');

        $result = $query->execute()->fetchField();

        if ($result > 0) return TRUE;

        return FALSE;
      }
      catch (Exception $ex) {
        cf_error::on_exception($ex);

        return FALSE;
      }
    }
  }
  elseif ($operation == 'view') {
    if ($manager) {
      try {
        $query = db_select('mew_event_requests', 'mer');

        $query->innerjoin('mew_current_top', 'mct', 'mer.id = mct.event_id');
        $query->innerjoin('mew_field_top_status', 'mfts', 'mct.event_id = mfts.event_id AND mct.status = mfts.revision AND mfts.delta = 0');

        // $query->countQuery() does not appear to be functioning as expected, so manually count.
        $query->addExpression('count(mer.id)');

        $query->condition('mer.id', $event_id);
        $query->condition('mfts.value', MEW_EVENT_STATUS_DELETED, '<>');

        $result = $query->execute()->fetchField();

        if ($result > 0) return TRUE;

        return FALSE;
      }
      catch (Exception $ex) {
        cf_error::on_exception($ex);

        return FALSE;
      }
    }
    elseif ($reviewer) {
      if (is_null($event_id)) {
        return TRUE;
      }
      else {
        // do a quick test to see if the reviewer is also the requester, if so, then grant access when $ignore_decisions
        if ($requester) {
          $query = db_select('mew_event_requests', 'mer');

          $query->innerjoin('mew_current_top', 'mct', 'mer.id = mct.event_id');
          $query->innerjoin('mew_field_top_status', 'mfts', 'mct.event_id = mfts.event_id AND mct.status = mfts.revision AND mfts.delta = 0');

          // $query->countQuery() does not appear to be functioning as expected, so manually count.
          $query->addExpression('count(mer.id)');

          $query->condition('mer.id', $event_id);
          $query->condition('mer.user_id', $user->uid);
          $query->condition('mfts.value', $request_status, 'IN');

          $result = $query->execute()->fetchField();

          if ($result > 0) return TRUE;
        }

        return mcneese_event_workflow_management_page_event_reviewer_access($user, $event_id, FALSE);
      }
    }
    elseif ($requester) {
      if (is_null($event_id)) return FALSE;

      try {
        $query = db_select('mew_event_requests', 'mer');

        $query->innerjoin('mew_current_top', 'mct', 'mer.id = mct.event_id');
        $query->innerjoin('mew_field_top_status', 'mfts', 'mct.event_id = mfts.event_id AND mct.status = mfts.revision AND mfts.delta = 0');

        // $query->countQuery() does not appear to be functioning as expected, so manually count.
        $query->addExpression('count(mer.id)');

        $query->condition('mer.id', $event_id);
        $query->condition('mer.user_id', $user->uid);
        $query->condition('mfts.value', $request_status, 'IN');

        $result = $query->execute()->fetchField();

        if ($result > 0) return TRUE;

        return FALSE;
      }
      catch (Exception $ex) {
        cf_error::on_exception($ex);

        return FALSE;
      }
    }
  }
  elseif ($operation == 'list') {
    if ($requester || $reviewer || $manager) {
      return TRUE;
    }
  }
  elseif ($operation == 'search') {
    if ($requester || $reviewer || $manager) {
      return TRUE;
    }
  }
  elseif ($operation == 'reviewers') {
    if ($manager) {
      return TRUE;
    }
  }
  elseif ($operation == 'review') {
    if (is_null($event_id)) {
      if ($reviewer) {
        return TRUE;
      }
    }
    else {
      return mcneese_event_workflow_management_page_event_reviewer_access($user, $event_id, TRUE);
    }
  }
  elseif ($operation == 'comment') {
    // @todo: currently disabled feature. Enable if such functionality is requested.
    return FALSE;

    if ($manager) {
      return TRUE;
    }

    if (!is_null($event_id)) {
      return mcneese_event_workflow_management_page_event_reviewer_access($user, $event_id, TRUE);
    }
  }
  elseif ($operation == 'log') {
    if ($manager) {
      return TRUE;
    }

    if ($reviewer) {
      if (is_null($event_id)) {
        return TRUE;
      }
      else {
        return mcneese_event_workflow_management_page_event_reviewer_access($user, $event_id, FALSE);
      }
    }
  }
  elseif ($operation == 'delete') {
    if ($manager) {
      return TRUE;
    }
  }

  elseif ($operation == 'cancel') {
    $cancellable_status_normal = array(
      MEW_EVENT_STATUS_UNLOCKED,
    );

    $cancellable_status_admin = array(
      MEW_EVENT_STATUS_LOCKED,
      MEW_EVENT_STATUS_UNLOCKED,
    );

    // if the user is the venue coordinator, then allow them to cancel an event at any point in the process.
    try {
      $query = db_select('mew_event_requests', 'mer');

      $query->innerjoin('mew_current_top', 'mct', 'mer.id = mct.event_id');
      $query->innerjoin('mew_field_top_status', 'mfts', 'mct.event_id = mfts.event_id AND mct.status = mfts.revision AND mfts.delta = 0');

      $query->innerjoin('mew_current_venue_coordinator', 'mcvc', 'mer.id = mcvc.event_id');
      $query->innerjoin('mew_field_venue_coordinator_user_id', 'mfvcui', 'mcvc.event_id = mfvcui.event_id AND mcvc.user_id = mfvcui.revision AND mfvcui.delta = 0');

      // $query->countQuery() does not appear to be functioning as expected, so manually count.
      $query->addExpression('count(mer.id)');

      $query->condition('mer.id', $event_id);
      $query->condition('mfts.value', $cancellable_status_admin, 'IN');
      $query->condition('mfvcui.value', $user->uid);

      $result = $query->execute()->fetchField();

      if ($result > 0) return TRUE;
    }
    catch (Exception $ex) {
      cf_error::on_exception($ex);
      return FALSE;
    }

    if ($manager || $requester) {
      try {
        $query = db_select('mew_event_requests', 'mer');

        $query->innerjoin('mew_current_top', 'mct', 'mer.id = mct.event_id');
        $query->innerjoin('mew_field_top_status', 'mfts', 'mct.event_id = mfts.event_id AND mct.status = mfts.revision AND mfts.delta = 0');

        // $query->countQuery() does not appear to be functioning as expected, so manually count.
        $query->addExpression('count(mer.id)');

        $query->condition('mer.id', $event_id);

        if ($requester && !$manager) {
          $query->condition('mer.user_id', $user->uid);
          $query->condition('mfts.value', $cancellable_status_normal, 'IN');
        }
        else {
          $query->condition('mfts.value', $cancellable_status_admin, 'IN');
        }

        $result = $query->execute()->fetchField();

        if ($result > 0) return TRUE;
      }
      catch (Exception $ex) {
        cf_error::on_exception($ex);
        return FALSE;
      }
    }
  }
  elseif ($operation == 'uncancel') {
    $uncancellable_status = array(
      MEW_EVENT_STATUS_CANCELLED,
    );

    // if the user is the venue coordinator, then allow them to cancel an event at any point in the process.
    try {
      $query = db_select('mew_event_requests', 'mer');

      $query->innerjoin('mew_current_top', 'mct', 'mer.id = mct.event_id');
      $query->innerjoin('mew_field_top_status', 'mfts', 'mct.event_id = mfts.event_id AND mct.status = mfts.revision AND mfts.delta = 0');

      $query->innerjoin('mew_current_venue_coordinator', 'mcvc', 'mer.id = mcvc.event_id');
      $query->innerjoin('mew_field_venue_coordinator_user_id', 'mfvcui', 'mcvc.event_id = mfvcui.event_id AND mcvc.user_id = mfvcui.revision AND mfvcui.delta = 0');

      // $query->countQuery() does not appear to be functioning as expected, so manually count.
      $query->addExpression('count(mer.id)');

      $query->condition('mer.id', $event_id);
      $query->condition('mfts.value', $uncancellable_status, 'IN');
      $query->condition('mfvcui.value', $user->uid);

      $result = $query->execute()->fetchField();

      if ($result > 0) return TRUE;
    }
    catch (Exception $ex) {
      cf_error::on_exception($ex);
      return FALSE;
    }

    if ($manager) {
      try {
        $query = db_select('mew_event_requests', 'mer');

        $query->innerjoin('mew_current_top', 'mct', 'mer.id = mct.event_id');
        $query->innerjoin('mew_field_top_status', 'mfts', 'mct.event_id = mfts.event_id AND mct.status = mfts.revision AND mfts.delta = 0');

        // $query->countQuery() does not appear to be functioning as expected, so manually count.
        $query->addExpression('count(mer.id)');

        $query->condition('mer.id', $event_id);
        $query->condition('mfts.value', $uncancellable_status, 'IN');

        $result = $query->execute()->fetchField();

        if ($result > 0) return TRUE;
      }
      catch (Exception $ex) {
        cf_error::on_exception($ex);

        return FALSE;
      }
    }
  }
  elseif ($operation == 'history') {
    if ($manager) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Check to see if a given user is allowed to review a given event.
 *
 * @param object $user
 *   User to check if is a valid reviewer of the given event.
 * @param int $event_id
 *   ID of the event to check review access for.
 * @param null|bool $review_restrictions
 *   When NULL, no review restrictions are applied.
 *   When FALSE, review view restrictions are applied.
 *   When TRUE, review edit restrictions are applied.
 *
 * @return bool
 *   TRUE on access granted, FALSE otherwise.
 */
function mcneese_event_workflow_management_page_event_reviewer_access($user, $event_id, $review_restrictions) {
  if (!is_object($user)) {
    cf_error::invalid_object('user');
    return FALSE;
  }

  if (!cf_is_integer($event_id)) {
    cf_error::invalid_integer('event_id');
    return FALSE;
  }

  if (!is_null($review_restrictions) && !is_bool($review_restrictions)) {
    cf_error::invalid_bool('review_restrictions');
    return FALSE;
  }

  try {
    $query = db_select('mew_event_requests', 'mer');

    $query->innerjoin('mew_current_top', 'mct', 'mer.id = mct.event_id');

    $query->innerjoin('mew_field_top_status', 'mfts', 'mct.event_id = mfts.event_id AND mct.status = mfts.revision AND mfts.delta = 0');
    $query->innerjoin('mew_field_top_step', 'mftsp', 'mct.event_id = mftsp.event_id AND mct.step = mftsp.revision AND mftsp.delta = 0');

    // $query->countQuery() does not appear to be functioning as expected, so manually count.
    $query->addExpression('count(mer.id)');

    $query->condition('mfts.value', MEW_EVENT_STATUS_DELETED, '<>');
    $query->condition('mfts.event_id', $event_id);

    $query->innerjoin('mew_current_event_coordinator', 'mcec', 'mer.id = mcec.event_id');
    $query->innerjoin('mew_field_event_coordinator_classification', 'mfecc', 'mcec.event_id = mfecc.event_id AND mcec.classification = mfecc.revision AND mfecc.delta = 0');

    $query->innerjoin('mew_current_venue_coordinator', 'mcvc', 'mer.id = mcvc.event_id');
    $query->innerjoin('mew_field_venue_coordinator_user_id', 'mfvcui', 'mcvc.event_id = mfvcui.event_id AND mcvc.user_id = mfvcui.revision AND mfvcui.delta = 0');

    $or = null;

    $show_status = array(
      MEW_EVENT_STATUS_LOCKED,
      MEW_EVENT_STATUS_UNLOCKED,
    );

    $show_step = array(
      MEW_REVIEW_STEP_VENUE_AVAILABLE,
      MEW_REVIEW_STEP_MAKE_DECISIONS,
    );

    // process venue coordinator access.
    if ($review_restrictions === TRUE) {
      $show_decision = array(
        MEW_REVIEW_DECISION_APPROVE,
        MEW_REVIEW_DECISION_DENY,
      );

      $already_reviewed_query = db_select('mew_field_review_review', 'mfrr');
      $already_reviewed_query->innerjoin('mew_current_review', 'mcr', 'mfrr.event_id = mcr.event_id and mfrr.revision = mcr.review');

      $already_reviewed_query->addfield('mfrr', 'step', 'step');

      $already_reviewed_query->where('mfrr.event_id = mftsp.event_id');
      $already_reviewed_query->condition('mfrr.user_id', $user->uid);
      $already_reviewed_query->condition('mfrr.step', $show_step, 'IN');
      $already_reviewed_query->condition('mfrr.decision', $show_decision, 'IN');
      $already_reviewed_query->distinct();

      $and = db_and();
      $and->condition('mfts.value', $show_status, 'IN');
      $and->condition('mftsp.value', $show_step, 'IN');
      $and->condition('mftsp.value', $already_reviewed_query, 'NOT IN');
      $and->condition('mfvcui.value', $user->uid);

      if (is_null($or)) {
        $or = db_or();
      }
      $or->condition($and);
    }
    elseif ($review_restrictions === FALSE) {
      if (is_null($or)) {
        $or = db_or();
      }
      $or->condition('mfvcui.value', $user->uid);
    }
    else {
      if (is_null($or)) {
        $or = db_or();
      }
      $or->condition('mer.user_id', $user->uid);
      $or->condition('mfvcui.value', $user->uid);
    }

    // process review access.
    $show_status = array(
      MEW_EVENT_STATUS_LOCKED,
    );

    $show_step = array(
      MEW_REVIEW_STEP_REVIEW,
      MEW_REVIEW_STEP_USAGE_FEES,
    );

    if ($review_restrictions === TRUE) {
      $show_decision = array(
        MEW_REVIEW_DECISION_APPROVE,
        MEW_REVIEW_DECISION_DENY
      );

      $can_review_query = db_select('mew_reviewers', 'c_mr_2');

      $can_review_query->addfield('c_mr_2', 'user_id', 'user_id');

      $can_review_query->where('c_mr_2.event_classification = mfecc.value AND c_mr_2.review_step = mftsp.value');
      $can_review_query->condition('c_mr_2.user_id', $user->uid);
      $can_review_query->condition('c_mr_2.review_step', $show_step, 'IN');
      $can_review_query->condition('c_mr_2.disabled', 0);
      $can_review_query->distinct();

      $already_reviewed_query = db_select('mew_field_review_review', 'mfrr');
      $already_reviewed_query->innerjoin('mew_current_review', 'mcr', 'mfrr.event_id = mcr.event_id and mfrr.revision = mcr.review');

      $already_reviewed_query->addfield('mfrr', 'step', 'step');

      $already_reviewed_query->where('mfrr.event_id = mftsp.event_id and mfrr.step = mftsp.value');
      $already_reviewed_query->condition('mfrr.user_id', $user->uid);
      $already_reviewed_query->condition('mfrr.step', $show_step, 'IN');
      $already_reviewed_query->condition('mfrr.decision', $show_decision, 'IN');
      $already_reviewed_query->distinct();

      $and = db_and();
      $and->condition('mfts.value', $show_status, 'IN');
      $and->condition('mftsp.value', $show_step, 'IN');
      $and->condition($user->uid, $can_review_query, 'IN');
      $and->condition('mftsp.value', $already_reviewed_query, 'NOT IN');

      if (is_null($or)) {
        $or = db_or();
      }
      $or->condition($and);
    }
    elseif ($review_restrictions === FALSE) {
      $can_review_query = db_select('mew_reviewers', 'c_mr_2');

      $can_review_query->addfield('c_mr_2', 'user_id', 'user_id');

      $can_review_query->where('c_mr_2.event_classification = mfecc.value AND c_mr_2.review_step = mftsp.value');
      $can_review_query->condition('c_mr_2.user_id', $user->uid);
      $can_review_query->condition('c_mr_2.review_step', $show_step, 'IN');
      $can_review_query->condition('c_mr_2.disabled', 0);
      $can_review_query->distinct();

      $and = db_and();
      $and->condition('mfts.value', $show_status, 'IN');
      $and->condition('mftsp.value', $show_step, 'IN');
      $and->condition($user->uid, $can_review_query, 'IN');

      if (is_null($or)) {
        $or = db_or();
      }
      $or->condition($and);
    }
    else {
      $can_review_query = db_select('mew_reviewers', 'c_mr_2');

      $can_review_query->addfield('c_mr_2', 'user_id', 'user_id');

      $can_review_query->where('c_mr_2.event_classification = mfecc.value');
      $can_review_query->condition('c_mr_2.user_id', $user->uid);
      $can_review_query->condition('c_mr_2.disabled', 0);
      $can_review_query->distinct();

      if (is_null($or)) {
        $or = db_or();
      }
      $or->condition($user->uid, $can_review_query, 'IN');
    }

    if (!is_null($or)) {
      $query->condition($or);
    }

    $result = $query->execute()->fetchField();

    if ($result > 0) return TRUE;

    return FALSE;
  }
  catch (Exception $ex) {
    cf_error::on_query_execution($ex);

    return FALSE;
  }

  return FALSE;
}

/**
 * Access callback for event workflow management page.
 *
 * @param bool
 *   TRUE on access granted, FALSE otherwise.
 */
function mcneese_event_workflow_management_page_access() {
  if (user_access('mcneese event workflow administer') || user_access('mcneese event workflow request') || user_access('mcneese event workflow review') || user_access('mcneese event workflow manage')) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_cronapi().
 */
function mcneese_event_workflow_cronapi() {
  $items = array();

  $items['mcneese_event_workflow_oracle_recache'] = array(
    'title' => t("Recreate Oracle Cache"),
    'callback' => 'mcneese_event_workflow_oracle_recache_cron',
    'callback arguments' => array(),
    'enabled' => FALSE,
  );

  return $items;
}

/**
 * Implements hook_mail().
 */
function mcneese_event_workflow_mail($key, &$message, $params) {
  global $base_url;

  $language = $message['language'];
  $headers = array();
  $subject = '';

  $headers['MIME-Version'] = '1.0';
  $headers['X-Mailer'] = 'McNeese Event Workflow System';
  $headers['Date'] = date('r', REQUEST_TIME);
  $headers['Content-Transfer-Encoding'] = '8Bit';

  $boundary = hash('sha256', drupal_random_key());
  $headers['Content-Type'] = 'multipart/mixed; boundary="' . $boundary . '"';

  $body = '--' . $boundary . "\n";
  $body .= 'Content-Type: text/plain; charset=UTF-8' . "\n\n";

  if ($key == 'event_request_alert') {
    $headers['Message-ID'] = '<';
    $headers['Message-ID'] .= drupal_random_key(12);
    $headers['Message-ID'] .= '.' . REQUEST_TIME;
    $headers['Message-ID'] .= '@';
    $headers['Message-ID'] .= 'mcneese_event_request';
    $headers['Message-ID'] .= '>';

    $headers['Keywords'] = 'McNeese, Event Request, Review';

    $subject = 'McNeese Event Request: ' . $params['event_id'] . ' - ' . $params['event_title'];

    if (!empty($params['title_suffix'])) {
      $subject .= ' - ' . $params['title_suffix'];
    }

    $body .= $params['content'] . "\n";

    $body .= "\n";
    $body .= "Event URL:\n - " . $base_url . '/events/view-0/' . $params['event_id'] . "\n\n";

    $body .= "\n";
    $body .= "This e-mail was generated on:\n - " . date("Y/m/d h:i:s a T", REQUEST_TIME) . "\n\n";

    // add PDF attachment
    if (!empty($params['filename'])) {
      foreach ($params['filename'] as $filename) {
        $file_path = 'private://event_requests/local/';

        $body .= "\n" . '--' . $boundary . "\n";
        $body .= 'Content-Type: application/pdf; name=' . $filename . "\n";
        $body .= 'Content-Disposition: attachment; filename=' . $filename . "\n";
        $body .= 'Content-Transfer-Encoding: base64' . "\n\n";
        $body .= chunk_split(base64_encode(file_get_contents($file_path . $filename))) . "\n";
      }
    }
  }
  else {
    return;
  }

  $body .= '--' . $boundary . "--\n";

  foreach ($headers as $header_name => $header_value) {
    $message['headers'][$header_name] = $header_value;
  }

  $message['subject'] = $subject;
  $message['body'] = array($body);
}

/**
 * Helper function to load files related to this project.
 *
 * @param int $id
 *   The number associated with the file to include.
 */
function mcneese_event_workflow_include($id) {
  if (!is_numeric($id)) {
    cf_error::invalid_number('id');
    return;
  }

  $module_path = drupal_get_path('module', 'mcneese_event_workflow');

  if ($id == 0) {
    require_once($module_path . '/includes/mcneese_event_workflow_table.inc');
  }
  elseif ($id == 1) {
    require_once($module_path . '/includes/mcneese_event_workflow_event_structure.inc');
  }
  elseif ($id == 2) {
    require_once($module_path . '/includes/mcneese_event_workflow_event_validation.inc');
  }
  elseif ($id == 3) {
    require_once($module_path . '/includes/mcneese_event_workflow_autocomplete.inc');
  }
  elseif ($id == 4) {
    require_once($module_path . '/includes/mcneese_event_workflow_list_options.inc');
  }
  elseif ($id == 5) {
    require_once($module_path . '/pages/mcneese_event_workflow_event_cancel_page.inc');
  }
  elseif ($id == 6) {
    require_once($module_path . '/includes/mcneese_event_workflow_workflow.inc');
  }
}

/**
 * Performs a select query.
 *
 * @param string $query
 *   A query string to process.
 * @param array $arguments
 *   (optional) An array of arguments
 *
 * @return array|bool
 *   An array containing the query results.
 *   FALSE is returned on error.
 */
function mcneese_event_workflow_oracle_select($query, $arguments = array()) {
  if (!is_string($query)) {
    cf_error::invalid_string('query');

    return FALSE;
  }

  if (!is_array($arguments)) {
    cf_error::invalid_array('arguments');

    return FALSE;
  }

  $results = array();

  try {
    $conn = Database::getConnection('default', 'oracle');

    $results = (array) $conn->oracleQuery($query, $arguments)->fetchAll();
  } catch (Exception $ex) {
    cf_error::on_exception($ex);

    return FALSE;
  }

  return $results;
}

/**
 * Returns a list of locations available.
 *
 * Note: ucs.msu_venue_list calls the building location 'category'.
 *
 * @param int|null $location
 *   (optional) When specified, load the location associated with the location id.
 * @param bool $disabled
 *   (optional) When TRUE, will also load the disabled rooms.
 *
 * @return array|object|bool
 *   An array of locations objects or a single location object.
 *   FALSE is returned on error.
 */
function mcneese_event_workflow_load_locations($location = NULL, $disabled = FALSE) {
  if (!is_null($location) && !cf_is_integer($location)) {
    cf_error::invalid_integer('location');
    return FALSE;
  }

  if (!is_bool($disabled)) {
    cf_error::invalid_bool('disabled');
    return FALSE;
  }

  $cache_id = __function__;

  if ($disabled) {
    $cache_id .= '_disabled';
  }

  $items = &drupal_static($cache_id, NULL);
  if (is_array($items)) {
    if (is_null($location)) {
      return $items;
    }

    if (array_key_exists($location, $items)) {
      return $items[$location];
    }

    return FALSE;
  }

  $items = array();
  try {
    $query = db_select('mew_banner_locations', 'mbl');

    if (!$disabled) {
      $query->condition('mbl.disabled', 0);
    }

    $query->addField('mbl', 'id', 'location_id');
    $query->addField('mbl', 'human_name', 'location_name');

    $query->orderBy('mbl.human_name');

    $items = $query->execute()->fetchAllAssoc('location_id');

    if (is_null($location)) {
      return $items;
    }
    elseif (array_key_exists($location, $items)) {
      return $items[$location];
    }
  }
  catch (Exception $ex) {
    cf_error::on_query_execution($ex);

    return FALSE;
  }

  return FALSE;
}

/**
 * Returns a list of buildings available.
 *
 * Note: ucs.msu_venue_list calls the building location 'category'.
 *
 * @param int|null $location
 *   (optional) When specified, load buildings associated with the location id.
 * @param int|null $building
 *   (optional) When specified, load the building associated with the building id.
 * @param bool $disabled
 *   (optional) When TRUE, will also load the disabled rooms.
 *
* @return array|object|bool
 *   An array of building objects or a single building object.
 *   FALSE is returned on error.
 */
function mcneese_event_workflow_load_buildings($location = NULL, $building = NULL, $disabled = FALSE) {
  if (!is_null($location) && !cf_is_integer($location)) {
    cf_error::invalid_integer('location');
    return FALSE;
  }

  if (!is_null($building) && !cf_is_integer($building)) {
    cf_error::invalid_integer('building');
    return FALSE;
  }

  if (!is_bool($disabled)) {
    cf_error::invalid_bool('disabled');
    return FALSE;
  }

  $cache_id = __function__;

  if (!is_null($location)) {
    $cache_id .= '_' . $location;
  }

  if ($disabled) {
    $cache_id .= '_disabled';
  }

  $items = &drupal_static($cache_id, NULL);
  if (is_array($items)) {
    if (is_null($building)) {
      return $items;
    }

    if (array_key_exists($building, $items)) {
      return $items[$building];
    }

    return FALSE;
  }

  $items = array();
  try {
    $query = db_select('mew_banner_buildings', 'mbb');

    if (!is_null($location)) {
      $query->innerJoin('mew_banner_building_to_location', 'mbbl', 'mbb.id = mbbl.building');
      $query->innerJoin('mew_banner_locations', 'mbl', 'mbbl.location = mbl.id');

      $query->condition('mbl.id', $location);

      $query->addField('mbl', 'id', 'location_id');
      $query->addField('mbl', 'machine_name', 'location_code');
      $query->addField('mbl', 'human_name', 'location_name');

      $query->orderBy('mbl.human_name');

      if (!$disabled) {
        $query->condition('mbl.disabled', 0);
      }
    }

    if (!$disabled) {
      $query->condition('mbb.disabled', 0);
    }

    $query->addField('mbb', 'id', 'building_id');
    $query->addField('mbb', 'machine_name', 'building_code');
    $query->addField('mbb', 'human_name', 'building_name');
    $query->orderBy('mbb.human_name');

    $items = $query->execute()->fetchAllAssoc('building_id');

    if (is_null($building)) {
      return $items;
    }
    elseif (array_key_exists($building, $items)) {
      return $items[$building];
    }
  }
  catch (Exception $ex) {
    cf_error::on_query_execution($ex);

    return FALSE;
  }

  return FALSE;
}

/**
 * Returns a list of rooms available.
 *
 * @param int|null $location
 *   (optional) When specified, load rooms associated with the location id.
 * @param int|null $building
 *   (optional) When specified, load rooms associated with the building id.
 * @param int|null $room
 *   (optional) When specified, load the room associated with the room id.
 * @param bool $disabled
 *   (optional) When TRUE, will also load the disabled rooms.
 *
 * @return array|bool
 *   An array of rooms or a single room array.
 *   FALSE is returned on error.
 */
function mcneese_event_workflow_load_rooms($location = NULL, $building = NULL, $room = NULL, $disabled = FALSE) {
  if (!is_null($location) && !cf_is_integer($location)) {
    cf_error::invalid_integer('location');
    return FALSE;
  }

  if (!is_null($building) && !cf_is_integer($building)) {
    cf_error::invalid_integer('building');
    return FALSE;
  }

  if (!is_null($room) && !cf_is_integer($room)) {
    cf_error::invalid_integer('room');
    return FALSE;
  }

  if (!is_bool($disabled)) {
    cf_error::invalid_bool('disabled');
    return FALSE;
  }

  $cache_id = __function__;

  if (!is_null($location) || !is_null($building)) {
    $cache_id .= '_' . $location;
    $cache_id .= '_' . $building;
  }

  if ($disabled) {
    $cache_id .= '_disabled';
  }

  $items = &drupal_static($cache_id, NULL);
  if (is_array($items)) {
    if (is_null($room)) {
      return $items;
    }

    if (array_key_exists($room, $items)) {
      return $items[$room];
    }

    return FALSE;
  }

  $items = array();
  try {
    $query = db_select('mew_banner_rooms', 'mbr');
    $query->innerJoin('mew_banner_buildings', 'mbb', 'mbr.building = mbb.id');

    if (!is_null($location)) {
      $query->innerJoin('mew_banner_building_to_location', 'mbbl', 'mbb.id = mbbl.building AND mbr.building = mbbl.building');
      $query->innerJoin('mew_banner_locations', 'mbl', 'mbbl.location = mbl.id');

      $query->condition('mbl.id', $location);

      $query->addField('mbl', 'id', 'location_id');
      $query->addField('mbl', 'machine_name', 'location_code');
      $query->addField('mbl', 'human_name', 'location_name');

      $query->orderBy('mbl.human_name');

      if (!$disabled) {
        $query->condition('mbl.disabled', 0);
      }
    }

    if (!$disabled) {
      $query->condition('mbr.disabled', 0);
      $query->condition('mbb.disabled', 0);
    }

    if (!is_null($building)) {
      $query->condition('mbb.id', $building);
    }

    $query->addField('mbr', 'id', 'room_id');
    $query->addField('mbr', 'machine_name', 'room_number');
    $query->addField('mbr', 'human_name', 'room_name');
    $query->addField('mbr', 'coordinator_id', 'coordinator_id');
    $query->addField('mbr', 'capacity_normal', 'capacity_normal');
    $query->addField('mbr', 'capacity_max', 'capacity_max');

    $query->addField('mbb', 'id', 'building_id');
    $query->addField('mbb', 'machine_name', 'building_code');
    $query->addField('mbb', 'human_name', 'building_name');

    $query->orderBy('mbb.human_name');
    $query->orderBy('mbr.human_name');
    $query->orderBy('mbr.machine_name');

    $items = $query->execute()->fetchAllAssoc('room_id');
    if (is_null($room)) {
      return $items;
    }
    elseif (array_key_exists($room, $items)) {
      return $items[$room];
    }
  }
  catch (Exception $ex) {
    cf_error::on_query_execution($ex);

    return FALSE;
  }

  return FALSE;
}

/**
 * Returns a list of user roles available.
 *
 * @return array|bool
 *   An array containing the roles.
 *   FALSE is returned on error.
 */
function mcneese_event_workflow_load_event_user_roles() {
  $cache_id = __function__;
  $roles = &drupal_static($cache_id, NULL);
  if (is_array($roles)) {
    return $roles;
  }

  if ($cache = cache_get($cache_id)){
    return $cache->data;
  }

  $columns = array();
  $rows = (array) mcneese_event_workflow_oracle_select('select distinct role from ucs.msu_event_role');

  // strip out redundant rows provided by oracle.
  foreach ($rows as $row) {
    if (is_array($row)) {
      foreach ($row as $key => $value) {
        // oracle returns duplicate/redundant data in numeric rows.
        if (is_numeric($key)) continue;

        $roles[] = $value;
      }
    }
  }

  if (empty($roles)) return FALSE;

  cache_set($cache_id, $roles, 'cache', CACHE_PERMANENT);

  return $roles;
}

/**
 * Returns an array containg mapping information for oracle.
 *
 * Use this to map drupal event role taxonomy terms with the oracle roles.
 *
 * @return array|bool
 *   An array containing the mapping information.
 *   FALSE is returned on error.
 */
function mcneese_event_workflow_load_event_user_role_mapping() {
  $cache_id = __function__;
  $terms = &drupal_static($cache_id, array());
  if (!empty($terms)) {
    return $terms;
  }

  try {
    $query = db_select('taxonomy_term_data', 'ttd');
    $query->innerJoin('taxonomy_vocabulary', 'tv', 'tv.vid = ttd.vid');
    $query->fields('ttd', array('tid'));
    $query->condition('tv.machine_name', 'user_roles');

    $executed = $query->execute();
    foreach ($executed as $row) {
      $term = taxonomy_term_load($row->tid);
      $name = $term->field_role_oracle_name['und'][0]['value'];

      $terms[$name] = array('tid' => FALSE, 'role' => FALSE, 'rid' => FALSE, 'name' => FALSE);


      if (!empty($term->field_role_oracle_name['und'][0]['value'])) {
        $terms[$name]['tid'] = $row->tid;
      }

      if (!empty($term->field_role_system_name['und'][0]['value'])) {
        $role = user_role_load_by_name($term->field_role_system_name['und'][0]['value']);

        if (is_object($role)) {
          $terms[$name]['role'] = $role->name;
          $terms[$name]['rid'] = $role->rid;
        }

        unset($role);
      }

      if (!empty($term->name)) {
        $terms[$name]['name'] = $term->name;
      }
    }
  } catch (Exception $ex) {
    cf_error::on_exception($ex);

    return FALSE;
  }

  return $terms;
}

/**
 * Returns user's information.
 *
 * @param string $banner_id
 *   The numeric banner id string uniquely representing some user.
 *
 * @return array|bool
 *   An array containing the user information.
 *   FALSE is returned on error.
 */
function mcneese_event_workflow_load_event_user($banner_id) {
  $cache_id = __function__;
  $user = &drupal_static($cache_id, NULL);
  if (is_array($user)) {
    return $user;
  }

  if (!is_string($banner_id)) {
    cf_error::invalid_string('banner_id');

    return FALSE;
  }

  $user = array();
  $rows = (array) mcneese_event_workflow_oracle_select('select * from ucs.msu_event_role where id = :banner_id', array('banner_id' => $banner_id));

  // strip out redundant rows provided by oracle.
  foreach ($rows as $row) {
    foreach ($row as $key => $value) {
      // oracle returns duplicate/redundant data in numeric rows.
      if (is_numeric($key)) continue;

      if ($key == 'role') {
        if (!array_key_exists('role', $user)) {
          $user['role'] = array();
        }

        $user['role'][] = $value;
      }
      else {
        $user[$key] = $value;
      }
    }
  }

  if (empty($user)) return FALSE;

  return $user;
}

/**
 * Synchronizes the user settings with the oracle settings.
 *
 * @param object|null $user
 *   (optional) The user object to synchronize.
 *   If not specified, then the current user is synchronized.
 * @param array $roles
 *   (optional) Additional roles to assign the user to.
 *   Providing this will override the auto-assign role as requester.
 *   This is an array of role names and not role ids.
 *
 * @return bool
 *   TRUE on success, FALSE otherwise.
 */
function mcneese_event_workflow_synchronize_user_settings($user = NULL, $roles = array()) {
  if (is_null($user)) {
    $user = cf_current_user();
  }

  if (!is_object($user)) {
    cf_error::invalid_object('user');
    return FALSE;
  }

  if (!is_array($roles)) {
    cf_error::invalid_array('roles');
    return FALSE;
  }

  // a collection of user ids who should not have their roles changed.
  $whitelist = array();

  // skip special-case ldapless user.
  $whitelist[8] = 8;

  // kday
  $whitelist[6] = 6;

  // gfisher
  $whitelist[19] = 19;

  // colleen
  $whitelist[22] = 22;

  // gbodin
  $whitelist[23] = 23;

  // shogan
  $whitelist[45] = 45;

  if (array_key_exists($user->uid, $whitelist)) {
    return TRUE;
  }

  $mappings = mcneese_event_workflow_load_event_user_role_mapping();

  // unset all system role information associated with oracle.
  $system_roles = (array) $user->roles;
  foreach ($mappings as $mapping) {
    if (array_key_exists($mapping['rid'], $system_roles)) {
      unset($system_roles[$mapping['rid']]);
    }
  }

  // if the (non-admin) user has no core roles, then assign requester role.
  $assign_requester_role = TRUE;
  foreach ($system_roles as $key => &$role) {
    if ($role == 'administrator') {
      $assign_requester_role = FALSE;
      break;
    }

    if ($role == 'reviewer') {
      $assign_requester_role = FALSE;
      break;
    }

    if ($role == 'manager') {
      $assign_requester_role = FALSE;
      break;
    }

    if ($role == 'requester') {
      $assign_requester_role = FALSE;
      break;
    }
  }

  if (!empty($roles)) {
    $assign_requester_role = FALSE;

    foreach ($roles as $role) {
      $role = user_role_load_by_name($role);

      if (is_object($role)) {
        $system_roles[$role->rid] = $role;
      }
    }
  }

  if ($assign_requester_role) {
    $role = user_role_load_by_name('requester');
    $system_roles[$role->rid] = 'requester';
  }

  if (isset($user->field_user_banner_id['und'][0]['value'])) {
    $u = mcneese_event_workflow_load_event_user($user->field_user_banner_id['und'][0]['value']);

    if ($u == FALSE) {
      // @todo: throw watchdog error?
      $u = array();
    }

    $event_roles = array();
    if (!empty($u['role'])) {
      foreach ($u['role'] as $role) {
        if (isset($mappings[$role]['tid'])) {
          $event_roles[] = array('tid' => $mappings[$role]['tid']);
          $system_roles[$mappings[$role]['rid']] = $mappings[$role]['role'];
        }
      }
    }

    $edit = array('field_user_event_roles' => array('und' => $event_roles), 'roles' => $system_roles);

    if (user_save($user, $edit)) return TRUE;
  }

  return FALSE;
}

/**
 * Loads the user by e-mail and if the user does not exist. create it.
 *
 * @param string $email
 *   The users mcneese e-mail address.
 * @param array $roles
 *   An array of roles to assign the user to. If none is specified, then the
 *   default is to assign the reviewer role.
 *
 * @return object|false
 *   User object on success, FALSE otherwise.
 */
function mcneese_event_workflow_ensure_user_by_email($email, $roles = array()) {
  if (!is_string($email) || empty($email)) {
    cf_error::invalid_string('email');
    return FALSE;
  }

  if (!is_array($roles)) {
    cf_error::invalid_array('roles');
    return FALSE;
  }

  $email_parts = explode('@', $email);

  if (count($email_parts) != 2) {
    return FALSE;
  }

  $username = trim($email_parts[0]);
  $hostname = trim($email_parts[1]);

  if ($hostname != 'mcneese.edu' && $hostname != 'student.mcneese.edu') {
    return FALSE;
  }

  $user = user_load_by_name($username);
  if (is_object($user)) {
    return $user;
  }
  unset($user);


  // check to see if the user exists in ldap.
  $auth_conf = ldap_authentication_get_valid_conf();
  $ldap_user = FALSE;
  $ldap_server = NULL;
  $detailed_watchdog_log = variable_get('ldap_help_watchdog_detail', 0);
  $authentication_result = LDAP_AUTHENTICATION_RESULT_FAIL_GENERIC;

  foreach ($auth_conf->enabledAuthenticationServers as $sid => $ldap_server) {
    $watchdog_tokens = array();
    $authentication_result = LDAP_AUTHENTICATION_RESULT_FAIL_GENERIC;
    $result = $ldap_server->connect();

    if ($result != LDAP_SUCCESS) {
      $authentication_result = LDAP_AUTHENTICATION_RESULT_FAIL_CONNECT;
      $watchdog_tokens['%err_msg'] = $ldap_server->errorMsg('ldap');

      if ($detailed_watchdog_log) {
        watchdog('ldap_authentication',  '%username : Failed connecting to %sid.  Error: %err_msg', $watchdog_tokens, WATCHDOG_DEBUG);
      }

      continue;
    }

    $bind_success = FALSE;
    if ($ldap_server->bind_method != LDAP_SERVERS_BIND_METHOD_ANON && $ldap_server->bind_method != LDAP_SERVERS_BIND_METHOD_ANON_USER) {
      // this can only work using anonymous bindings.
      continue;
    }

    $bind_success = ($ldap_server->bind(NULL, NULL, TRUE) == LDAP_SUCCESS);

    if (!$bind_success) {
      if ($detailed_watchdog_log) {
        $watchdog_tokens['%err_text'] = $ldap_server->errorMsg('ldap');
        watchdog('ldap_authentication', '%username : Trying server %sid where bind_method = %bind_method.  Error: %err_text', $watchdog_tokens, WATCHDOG_DEBUG);
      }
      $authentication_result = ($ldap_server->bind_method == LDAP_SERVERS_BIND_METHOD_USER) ? LDAP_AUTHENTICATION_RESULT_FAIL_CREDENTIALS : LDAP_AUTHENTICATION_RESULT_FAIL_BIND;
      continue; // if bind fails, onto next server
    }

    $ldap_user = $ldap_server->userUserNameToExistingLdapEntry($username);
    if ($ldap_user !== FALSE) {
      break;
    }
  }

  if (empty($ldap_user)) {
    return FALSE;
  }


  // create the new user.
  $auth_conf = ldap_authentication_get_valid_conf();
  $watchdog_tokens = array(
    '%authname' => $username,
    '%account_name_attr' => $username,
    '%drupal_accountname' => $username,
  );

  if (!$auth_conf) {
    watchdog('ldap_authentication', 'Failed to get valid ldap authentication configuration.', array(), WATCHDOG_ERROR);
    return FALSE;
  }

  if (!$auth_conf->hasEnabledAuthenticationServers()) {
    watchdog('ldap_authentication',  'No LDAP servers configured.', array(), WATCHDOG_ERROR);
    return FALSE;
  }

  if (!$auth_conf->ldapUser->provisionEnabled(LDAP_USER_PROV_DIRECTION_TO_DRUPAL_USER, LDAP_USER_DRUPAL_USER_PROV_ON_AUTHENTICATE)) {
    watchdog('ldap_user', 'Drupal account for authname=%authname account name=%account_name_attr does not exist and provisioning of Drupal accounts on authentication is not enabled', $watchdog_tokens, WATCHDOG_INFO);
    return;
  }

  $user_register = variable_get('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);
  if ($auth_conf->ldapUser->acctCreation == LDAP_USER_ACCT_CREATION_USER_SETTINGS_FOR_LDAP && $user_register == USER_REGISTER_ADMINISTRATORS_ONLY) {
    watchdog('ldap_user', 'Failed to create account for %drupal_accountname. Administrative user must create user.', $watchdog_tokens, WATCHDOG_ERROR);
    return FALSE;
  }

  if ($auth_conf->ldapUser->acctCreation == LDAP_AUTHENTICATION_ACCT_CREATION_USER_SETTINGS_FOR_LDAP && $user_register == USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL) {
    $user_edit = array('name' => $username, 'mail' => $email, 'status' => 0); // if admin approval required, set status to 0.
  }
  else {
    $user_edit = array('name' => $username, 'mail' => $email, 'status' => 1);
  }

  // don't pass in ldap user to provisionDrupalAccount, because want to requery with correct attributes needed
  // this may be a case where efficiency dictates querying for all attributes
  $drupal_account = $auth_conf->ldapUser->provisionDrupalAccount(FALSE, $user_edit, NULL, TRUE);

  if ($drupal_account === FALSE) {
    watchdog('ldap_user', 'Failed to find or create %drupal_accountname.', $watchdog_tokens, WATCHDOG_ERROR);
    return FALSE;
  }

  if ($drupal_account === TRUE) {
    $drupal_account = user_load_by_name($username);
  }

  user_set_authmaps($drupal_account, array('authname_ldap_user' => $username));

  // Using Rules allows emails to be fired and many other possible reactions
  // to the creation of a user.
  if (function_exists('rules_invoke_event')) {
    rules_invoke_event('ldap_user_created', $drupal_account, FALSE);
  }

  mcneese_event_workflow_synchronize_user_settings($drupal_account, $roles);

  // reset the user object cache to force loading of new settings.
  $user = user_load($drupal_account->uid, TRUE);

  return $user;
}

/**
 * Manually trigger cache save or cache reset.
 *
 * The purpose of this is to provide a way to cache all database information.
 * The oracle database at McNeese has scheduled downtime.
 * This system is supposed to operate even when the database is down.
 * Therefore, caching is necessary and needs to be performed prior to downtime.
 *
 * @param bool $save
 *   (optional) When TRUE, caches are saved.
 *   When FALSE, caches are purged.
 */
function mcneese_event_workflow_force_cache($save = TRUE) {
  // reset is performed in both cases to ensure that the cache is fresh.
  cache_clear_all('mcneese_event_workflow_load_event_user_roles', 'cache');

  if ($save) {
    mcneese_event_workflow_sync_banner_to_local();
  }
}

/**
 * Synchronizes the local database with the banner venue information.
 *
 * @return bool
 *   TRUE on success, FALSE otherwise.
 */
function mcneese_event_workflow_sync_banner_to_local() {
  $join = ' inner join ucs.msu_venue_list mvl on (mvl.category = mvd.category and mvl.building_code = mvd.building_code and mvl.room_number = mvd.room_number)';

  $select = 'mvd.*';
  $select .= ', mvl.building_desc as building_desc';
  $select .= ', mvl.room_desc as room_desc';

  $rows = mcneese_event_workflow_oracle_select('select ' . $select . ' from ucs.msu_venue_detail mvd' . $join);

  // determine columns names by selecting the first
  if (empty($rows)) {
    return FALSE;
  }

  $row = array_pop($rows);

  mcneese_event_workflow_include(4);
  $event_locations = event_workflow_get_event_location_list_options(NULL, TRUE);

  $transaction = db_transaction();
  try {
    // disable all locations, buildings, and rooms such that the ones that are not added back will be disabled.
    if (is_array($rows) && !empty(($rows))) {
      $query = db_update('mew_banner_locations');
      $query->fields(array('disabled' => 1));
      $query->execute();

      $query = db_update('mew_banner_buildings');
      $query->fields(array('disabled' => 1));
      $query->execute();

      $query = db_update('mew_banner_rooms');
      $query->fields(array('disabled' => 1));
      $query->execute();

      $query = db_update('mew_banner_building_to_location');
      $query->fields(array('disabled' => 1));
      $query->execute();
    }

    foreach ($rows as $row) {
      $location_item = array();
      $building_item = array();
      $room_item = array();
      $coordinator_room_item = array();
      $coordinator_venue_item = array();
      $location_to_building_item = array();

      if (is_array($row)) {
        foreach ($row as $key => $value) {
          // oracle returns duplicate/redundant data in numeric rows.
          if (is_numeric($key)) continue;

          // remove possible trailing whitespaces.
          $v = trim($value);

          if ($key == 'building_code') {
            $building_item['machine_name'] = $v;
            $building_item['disabled'] = 0;
          }
          elseif ($key == 'building_desc') {
            $building_item['human_name'] = $v;
          }
          elseif ($key == 'room_number') {
            $room_item['machine_name'] = $v;
            $room_item['disabled'] = 0;

            // Banner stores other things inside of the room number, so if it actually is a number, store it in the human name, which contains the description.
            if (isset($room_item['human_name']) && cf_is_integer($room_item['machine_name'])) {
              if (empty($room_item['human_name'])) {
                $room_item['human_name'] = "Room #"  . $room_item['machine_name'];
              }
              else {
                $room_item['human_name'] .= " " . $room_item['machine_name'];
              }
            }
          }
          elseif ($key == 'room_desc') {
            $room_item['human_name'] = $v;

            // Banner stores other things inside of the room number, so if it actually is a number, store it in the human name, which contains the description.
            if (isset($room_item['machine_name']) && cf_is_integer($room_item['machine_name'])) {
              if (empty($room_item['human_name'])) {
                $room_item['human_name'] = "Room";
              }
              $room_item['human_name'] .= " #" . $room_item['machine_name'];
            }
          }
          elseif ($key == 'capacity') {
            $room_item['capacity_normal'] = $v;
          }
          elseif ($key == 'max_capacity') {
            $room_item['capacity_max'] = $v;
          }
          elseif ($key == 'category') {
            $location_item['machine_name'] = $v;
            $location_item['human_name'] = $v;
            $location_item['disabled'] = 0;

            if (array_key_exists($v, $event_locations)) {
              $location_item['human_name'] = substr($event_locations[$v], 0, 63);
            }
          }
          elseif ($key == 'room_coordinator_email') {
            $coordinator_room_item['email'] = $v;
          }
          elseif ($key == 'venue_coordinator_email') {
            $coordinator_venue_item['email'] = $v;

            // have the room coordinator fallback to the venue coordinator if no room coordinator is specified.
            if (!isset($coordinator_room_item['email'])) {
              $coordinator_room_item['email'] = $v;
            }
          }
        }

        // add the room and venue coordinators.
        $room_coordinator = NULL;
        if (!empty($coordinator_room_item['email'])) {
          $room_coordinator = mcneese_event_workflow_ensure_user_by_email($coordinator_room_item['email'], array('reviewer'));
        }

        if (!is_object($room_coordinator) && !empty($coordinator_venue_item['email'])) {
          $room_coordinator = mcneese_event_workflow_ensure_user_by_email($coordinator_venue_item['email'], array('reviewer'));
        }

        if (is_object($room_coordinator)) {
          $room_item['coordinator_id'] = $room_coordinator->uid;
        }
        else {
          $room_item['coordinator_id'] = MEW_FAILSAFE_COORDINATOR_ID;
        }

        // add/update the location.
        $query = db_select('mew_banner_locations', 'mbl');
        $query->addField('mbl', 'id', 'id');
        $query->condition('mbl.machine_name', $location_item['machine_name']);

        $location_id = $query->execute()->fetchField();

        if ($location_id > 0) {
          $query = db_update('mew_banner_locations');
          $query->fields($location_item);
          $query->condition('id', $location_id);
          $query->execute();
        }
        else {
          $query = db_insert('mew_banner_locations');
          $query->fields($location_item);
          $location_id = $query->execute();
        }

        // add/update the building.
        $query = db_select('mew_banner_buildings', 'mbb');
        $query->addField('mbb', 'id', 'id');
        $query->condition('mbb.machine_name', $building_item['machine_name']);

        $building_id = $query->execute()->fetchField();

        if ($building_id > 0) {
          $query = db_update('mew_banner_buildings');
          $query->fields($building_item);
          $query->condition('id', $building_id);
          $query->execute();
        }
        else {
          $query = db_insert('mew_banner_buildings');
          $query->fields($building_item);
          $building_id = $query->execute();
        }

        $room_item['building'] = $building_id;

        // add/update the room.
        $query = db_select('mew_banner_rooms', 'mbr');
        $query->addField('mbr', 'id', 'id');
        $query->condition('mbr.machine_name', $room_item['machine_name']);
        $query->condition('mbr.building', $building_id);

        $room_id = $query->execute()->fetchField();

        if ($room_id > 0) {
          $query = db_update('mew_banner_rooms');
          $query->fields($room_item);
          $query->condition('id', $room_id);
          $query->execute();
        }
        else {
          $query = db_insert('mew_banner_rooms');
          $query->fields($room_item);
          $room_id = $query->execute();
        }

        // add/update the location to building relations
        $location_to_building_item['location'] = $location_id;
        $location_to_building_item['building'] = $building_id;
        $location_to_building_item['disabled'] = 0;

        $query = db_select('mew_banner_building_to_location', 'mbbl');
        $query->addExpression('count(mbbl.building)');
        $query->condition('mbbl.location', $location_id);
        $query->condition('mbbl.building', $building_id);

        $building_to_location_count = $query->execute()->fetchField();

        if ($building_to_location_count > 0) {
          $query = db_update('mew_banner_building_to_location');
          $query->fields($location_to_building_item);
          $query->condition('location', $location_id);
          $query->condition('building', $building_id);
          $query->execute();
        }
        else {
          $query = db_insert('mew_banner_building_to_location');
          $query->fields($location_to_building_item);
          $query->execute();
        }
      }
    }

    // enforce transaction execution
    unset($transaction);
  } catch (Exception $ex) {
    $transaction->rollback();
    cf_error::on_exception($ex);

    return FALSE;
  }

  return TRUE;
}

/**
 * Executes the cron queue to recreate the oracle cache.
 *
 * This requires the ultimate_cron module to function.
 *
 * @see mcneese_event_workflow_cronapi()
 * @see mcneese_event_workflow_force_cache()
 */
function mcneese_event_workflow_oracle_recache_cron() {
  mcneese_event_workflow_force_cache();
}

/**
 * Generate an array structure for a specific event request item.
 *
 * @param int $event_id
 *   The id representing the specific event request.
 * @param string $field_group
 *   The name of the group the values are associated with.
 * @param string $field_name
 *   The name of the field the values are associated with.
 * @param array $values
 *   An array of values associated with this field.
 * @param array $presentation
 *   A collection of variables to tweak how this value is presented.
 * @param array $event
 *   The event array containing all of the event values.
 *
 * @return array|bool|null
 *   The built array.
 *   NULL is returned when there should be no array to build.
 *   FALSE is returned on failure.
 */
function mcneese_event_workflow_build_event_request_item_structure($event_id, $field_group, $field_name, $values, $presentation, $event) {
  if (!cf_is_integer($event_id)) {
    cf_error::invalid_integer('event_id');
    return FALSE;
  }

  if (!is_string($field_group)) {
    cf_error::invalid_string('field_group');
    return FALSE;
  }

  if (!is_string($field_name)) {
    cf_error::invalid_string('field_name');
    return FALSE;
  }

  if (!is_array($values)) {
    cf_error::invalid_array('values');
    return FALSE;
  }

  if (!is_array($presentation)) {
    cf_error::invalid_array('presentation');
    return FALSE;
  }

  $event = event_workflow_load_event_by_id($event_id);
  if (empty($event)) {
    return FALSE;
  }

  // define if the label should be displayed or not.
  $label_display = TRUE;
  if (!empty($presentation['label_display'])) {
    $label_display = (bool) $presentation['label_display'];
  }

  // define when label gets placed (prepend or postpend).
  $label_prepend = TRUE;
  if (!empty($presentation['label_prepend'])) {
    $label_prepend = (bool) $presentation['label_prepend'];
  }

  // define when label gets placed (prepend or postpend).
  $size = 'auto';
  if (!empty($presentation['size'])) {
    $size = (string) $presentation['size'];
  }

  // define the label text presented to the user.
  $label = '';
  if (isset($presentation['label'])) {
    $label = $presentation['label'];
  }

  $label_length = strlen($label);

  $output = array();
  $no_values = TRUE;
  foreach ($values as $delta => &$value) {
    $generated = mcneese_event_workflow_build_event_request_value_structure($event_id, $field_group, $field_name, $delta, $value, $presentation, $event);

    if ($generated !== FALSE && !isset($generated['no_values'])) {
      $id = 'field-event-' . $event_id . '-item-' . $field_group . '-' . $field_name . '-' . $delta;

      if ($size == 'auto') {
        $size = 'small';

        $value_length = 0;
        if (!empty($generated)) {
          foreach ($generated as $key => $generated_value) {
            if (isset($generated_value['markup']['#length'])) {
              $value_length += $generated_value['markup']['#length'];
            }
          }
        }

        if ($label_length + $value_length > 50) {
          $size = 'large';
        }
      }

      $output[$delta] = array(
        '#id' => $id,
        '#type' => 'container',
        '#attributes' => array(
          'class' => array(
            'item-delta-' . $delta,
            'item-request-' . $event_id,
            'item-group-' . $field_group,
            'item-field-' . $field_name,
            'item-size-' . $size,
            'item-event',
          ),
        ),
      );

      if ($label_display) {
        $output[$delta]['label'] = array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array(
              'item-label',
            ),
          ),
          '#weight' => ($label_prepend) ? -1 : 1,
        );

        $output[$delta]['label']['markup'] = array(
          '#markup' => $label,
        );
      }

      $output[$delta]['value'] = $generated;
      $no_values = FALSE;
    }

    unset($generated);
  }

  if ($no_values) {
    // this is added in case later on it is decided that $output should be returned.
    // the item class needs to communicate that this group has no values.
    $delta = 0;

    $class = $field_group . '-' . $field_name . '-' . $delta;
    $id = 'field-event-' . $event_id . '-item-' . $class;

    $output = array();
    $output[$delta] = array(
      '#id' => $id,
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'field-event-item',
          'field-event-item-' . $class,
          'field-event-item-size-' . $size,
        ),
      ),
    );

    $output['item']['#attributes']['class'][] = 'field-event-item-no_values';

    return NULL;
  }

  return $output;
}

/**
 * Generate an array structure for a specific event request value.
 *
 * @param int $event_id
 *   The id representing the specific event request.
 * @param string $field_group
 *   The name of the group the values are associated with.
 * @param string $field_name
 *   The name of the field the values are associated with.
 * @param int $delta
 *   This is for multiple values, each value has its own delta.
 * @param object $value
 *   The value object in the format in the database structure or in a sumulated
 *   structure.
 * @param array $presentation
 *   A collection of variables to tweak how this value is presented.
 * @param array $event
 *   The event array containing all of the event values.
 * @param array $options
 *   (optional) An array of options tweaking how this function will run.
 *   - 'no_prefix': If TRUE, don't show prefix.
 *   - 'no_suffix': If TRUE, don't show suffix.
 *   - 'print_delta_for_multiple': If TRUE, prepend the delta to the value for
 *      fields that have #multiple set to TRUE.
 *
 * @return array|bool
 *   The built array.
 *   FALSE is returend on failure.
 */
function mcneese_event_workflow_build_event_request_value_structure($event_id, $field_group, $field_name, $delta, $value, $presentation, $event, $options = array()) {
  if (!is_string($field_group)) {
    cf_error::invalid_string('field_group');
    return FALSE;
  }

  if (!is_string($field_name)) {
    cf_error::invalid_string('field_name');
    return FALSE;
  }

  if (!cf_is_integer($delta)) {
    cf_error::invalid_integer('delta');
    return FALSE;
  }

  if (!is_object($value)) {
    cf_error::invalid_object('value');
    return FALSE;
  }

  if (!is_array($presentation)) {
    cf_error::invalid_array('presentation');
    return FALSE;
  }

  $event = event_workflow_load_event_by_id($event_id);
  if (empty($event)) {
    return FALSE;
  }

  if (!is_array($options)) {
    cf_error::invalid_array('options');
    return FALSE;
  }

  // define the combined option.
  $combined = FALSE;
  if (!empty($presentation['combined'])) {
    $combined = (bool) $presentation['combined'];
  }

  // define the presentation type.
  $type = array('value' => 'string');
  if (!empty($presentation['type'])) {
    $type = (array) $presentation['type'];
  }

  // define the presentation display.
  $display = array('value' => 'raw');
  if (!empty($presentation['display'])) {
    $display = (array) $presentation['display'];
  }

  // define the presentation value names.
  $value_names = array('value');
  if (!empty($presentation['value_names'])) {
    $value_names = (array) $presentation['value_names'];
  }

  // define a prefix to append before the value.
  $prefix = '';
  if (!empty($presentation['prefix'])) {
    $prefix = $presentation['prefix'];
  }

  if (isset($options['no_prefix']) && $options['no_prefix']) {
    $prefix = '';
  }

  // define a suffix to prepend after the value.
  $suffix = '';
  if (!empty($presentation['suffix'])) {
    $suffix = $presentation['suffix'];
  }

  if (isset($options['no_suffix']) && $options['no_suffix']) {
    $suffix = '';
  }

  $delta_prefix = '';
  if (isset($options['print_delta_for_multiple']) && $options['print_delta_for_multiple']) {
    if (isset($presentation['multiple']) && $presentation['multiple']) {
      $delta_prefix = '<span class="item-delta">[' . $delta . ']</span> ';
    }
  }

  $venue_coordinator = NULL;
  if (!empty($event['venue_coordinator']['user_id'][0]->value)) {
    $venue_coordinator = user_load($event['venue_coordinator']['user_id'][0]->value);
  }

  global $base_path;

  $id = 'field-event-' . $event_id . '-item-' . $field_group . '-' . $field_name . '-' . $delta . '-value';

  $output = array();
  $empty_value = TRUE;
  $no_values = TRUE;

  foreach ($value_names as $value_name) {
    if ($combined) {
      if (!isset($output['value']['markup']['#markup'])) {
        $output['value'] = array(
          '#id' => $id . '-' . $value_name,
          '#type' => 'container',
          '#attributes' => array(
            'class' => array(
              'item-value',
              'item-value-name-' . $value_name,
            ),
          ),
        );

        $output['value']['markup'] = array(
          '#markup' => NULL,
        );

        if (!array_key_exists('value', $type)) {
          $type['value'] = 'string';
        }

        $output['value']['#attributes']['class'][] = 'item-value-type-value';

        $output['value']['markup']['#length'] = 0;
      }

      $markup = &$output['value']['markup']['#markup'];
      $output_value = &$output['value'];
      $length = &$output['value']['markup']['#length'];
    }
    else {
      $output[$value_name] = array(
        '#id' => $id . '-' . $value_name,
        '#type' => 'container',
        '#attributes' => array(
          'class' => array(
            'item-value',
            'item-value-name-' . $value_name,
          ),
        ),
      );

      $output[$value_name]['markup'] = array(
        '#markup' => NULL,
      );

      if (!array_key_exists($value_name, $type)) {
        $type[$value_name] = 'string';
      }

      $output[$value_name]['#attributes']['class'][] = 'item-value-type-' . $type[$value_name];
      $output['value']['markup']['#length'] = 0;

      $markup = &$output[$value_name]['markup']['#markup'];
      $output_value = &$output[$value_name];
      $length = &$output['value']['markup']['#length'];
    }

    if (property_exists($value, $value_name) && (is_numeric($value->$value_name) || !empty($value->$value_name))) {
      if ($type[$value_name] == 'string' || $type[$value_name] == 'text') {
        $markup .= check_plain($value->$value_name);

        $length += strlen($value->$value_name);
      }
      elseif ($type[$value_name] == 'timestamp') {
        if (!array_key_exists($value_name, $display)) {
          $display[$value_name] = 'Y/m/d h:ia';
        }

        if ($display[$value_name] == 'stamp') {
          $markup .= check_plain($value->$value_name);
        }
        else {
          $markup .= check_plain(date($display[$value_name], $value->$value_name));
        }

        $length += strlen($value->$value_name);
      }
      elseif ($type[$value_name] == 'taxonomy') {
        $term = taxonomy_term_load($value->$value_name);

        if (is_object($term)) {
          $markup .= check_plain($term->name);
          $length += strlen($term->name);
        }

        unset($term);
      }
      elseif ($type[$value_name] == 'user_id') {
        $user = user_load($value->$value_name);

        if (is_object($user)){
          if (!array_key_exists($value_name, $display)) {
            $display[$value_name] = 'name';
          }

          $user_name = check_plain($user->name);

          if (!empty($user->field_user_last_name['und'][0]['value'])) {
            $user_name = check_plain($user->field_user_last_name['und'][0]['value']) . ', ';
          }

          if (!empty($user->field_user_first_name['und'][0]['value'])) {
            $user_name .= check_plain($user->field_user_first_name['und'][0]['value']);
          }

          if ($display[$value_name] == 'account_name') {
            $markup .= '<a href="' . $base_path . 'user/' . $user->uid . '">' . $user_name . '</a>';
            $length += strlen($user_name);
          }
          elseif ($display[$value_name] != 'pass' && property_exists($user, $display)) {
            $markup .= check_plain($user->$display[$value_name]);
            $length += strlen($user->$display[$value_name]);
          }
        }

        unset($user);
      }
      elseif ($type[$value_name] == 'status') {
        mcneese_event_workflow_include(4);

        $status_options = event_workflow_get_event_status_list_options();

        if (isset($status_options[$value->$value_name])) {
          $markup .= $status_options[$value->$value_name];
          $length += strlen($value->$value_name);
        }
      }
      elseif ($type[$value_name] == 'step') {
        mcneese_event_workflow_include(4);

        $step_options = event_workflow_get_event_steps_list_options();

        if (isset($step_options[$value->$value_name])) {
          $markup .= $step_options[$value->$value_name];
          $length += strlen($step_options[$value->$value_name]);
        }
      }
      elseif ($type[$value_name] == 'location') {
        mcneese_event_workflow_include(4);

        $location_options = event_workflow_get_event_location_list_options();

        if (isset($location_options[$value->$value_name])) {
          $markup .= $location_options[$value->$value_name];
          $length += strlen($location_options[$value->$value_name]);
        }
      }
      elseif ($type[$value_name] == 'building') {
        mcneese_event_workflow_include(4);

        $building_options = event_workflow_get_event_building_list_options();

        if (isset($building_options[$value->$value_name])) {
          $markup .= $building_options[$value->$value_name];
          $length += strlen($building_options[$value->$value_name]);
        }
      }
      elseif ($type[$value_name] == 'room') {
        mcneese_event_workflow_include(4);

        $room_options = event_workflow_get_event_room_list_options();

        if (isset($room_options[$value->$value_name])) {
          $markup .= $room_options[$value->$value_name];
          $length += strlen($room_options[$value->$value_name]);
        }
      }
      elseif ($type[$value_name] == 'currency') {
        $currency = event_workflow_convert_value_from_database_format($value->$value_name, 'currency');

        if ($currency !== FALSE) {
          $processed_markup = '$' . printf('%01.2f', $currency);
          $markup .= $processed_markup;
          $length += strlen($processed_markup);
        }
      }
      elseif ($type[$value_name] == 'boolean') {
        $boolean = (bool) $value->$value_name;

        if ($boolean) {
          $markup .= 'yes';
          $length += 3;
        }
        else {
          $markup .= 'no';
          $length += 2;
        }

        if ($display[$value_name] == 'when_true') {
          if (!$boolean) {
            continue;
          }
        }
        elseif ($display[$value_name] == 'when_false') {
          if ($boolean) {
            continue;
          }
        }
      }
      elseif ($type[$value_name] == 'use_fee_personnel') {
        $markup .= ' ' . $value->$value_name . ' personnel';
        $length += strlen($value->$value_name . ' personnel');
      }
      elseif ($type[$value_name] == 'use_fee_hours') {
        $hours = event_workflow_convert_value_from_database_format($value->$value_name, 'currency');

        if (intval($hours) == $hours) {
          $markup .= ' ' . $hours . ' hours';
        }
        else {
          $markup .= ' ' . sprintf('%01.2f', $hours) . ' hours';
        }

        $length += strlen($hours . ' hours');
      }
      elseif ($type[$value_name] == 'use_fee_days') {
        $days = event_workflow_convert_value_from_database_format($value->$value_name, 'currency');

        if (intval($days) == $days) {
          $markup .= ' ' . $days . ' days';
        }
        else {
          $markup .= ' ' . sprintf('%01.2f', $days) . ' days';
        }

        $length += strlen($days . 'days');
      }
      elseif ($type[$value_name] == 'use_fee_amount') {
        $amount = event_workflow_convert_value_from_database_format($value->$value_name, 'currency');

        if ($amount !== FALSE) {
          $processed_markup = ' at $' . sprintf('%01.2f', $amount);

          // calculate total and append from other fields that should exist.
          $total = $amount;

          if (in_array('quantity', $value_names) && isset($value->quantity) && is_numeric($value->quantity)) {
            $total = $total * $value->quantity;
          }

          if (in_array('hours', $value_names) && isset($value->hours) && is_numeric($value->hours)) {
            $hours = event_workflow_convert_value_from_database_format($value->hours, 'currency');

            if ($hours !== FALSE) {
              $total = $total * $hours;
            }
          }

          if (in_array('days', $value_names) && isset($value->days) && is_numeric($value->days)) {
            $days = event_workflow_convert_value_from_database_format($value->days, 'currency');

            if ($days !== FALSE) {
              $total = $total * $days;
            }
          }

          $processed_markup .= ' = $' . sprintf('%01.2f', $total);

          $markup .= $processed_markup;
          $length += strlen($processed_markup);
        }
      }
      elseif ($type[$value_name] == 'venue_coordinator') {
        if ($display[$value_name] == 'name') {
          $processed_markup = '';

          $first_name = FALSE;
          if (!empty($venue_coordinator->field_user_last_name['und'][0]['safe_value'])) {
            $first_name = TRUE;
            $processed_markup .= $venue_coordinator->field_user_last_name['und'][0]['safe_value'];
          }

          if (!empty($venue_coordinator->field_user_first_name['und'][0]['safe_value'])) {
            if ($first_name) {
              $processed_markup .=  ', ';
            }

            $processed_markup .= $venue_coordinator->field_user_first_name['und'][0]['safe_value'];
          }

          $markup .= $processed_markup;
          $length += strlen($processed_markup);
        }
        elseif ($display[$value_name] == 'email') {
          $markup .= $venue_coordinator->mail;
          $length += strlen($venue_coordinator->mail);
        }
        elseif ($display[$value_name] == 'phone') {
          if (!empty($venue_coordinator->field_user_phone_number['und'][0]['safe_value'])) {
            $markup .= $venue_coordinator->field_user_phone_number['und'][0]['safe_value'];
            $length += strlen($venue_coordinator->field_user_phone_number['und'][0]['safe_value']);
          }
        }
      }
      elseif ($type[$value_name] == 'review_decision') {
        if ($value->$value_name == MEW_REVIEW_DECISION_APPROVE) {
          $markup .= "Approved";
          $length += strlen("Approved");
        }
        elseif ($value->$value_name == MEW_REVIEW_DECISION_DENY) {
          $markup .= "Denied";
          $length += strlen("Denied");
        }
      }

      if (!is_numeric($markup) && empty($markup)) {
        $output_value['#attributes']['class'][] = 'empty_value';
      }
      else {
        $empty_value = FALSE;

        if (!$combined) {
          $markup = $delta_prefix . $prefix . $markup . $suffix;
        }
      }

      $no_values = FALSE;
    }
  }

  if ($no_values) {
    $output_value['#attributes']['class'][] = 'no_value';
    $output['no_values'] = TRUE;
  }
  elseif ($combined && !$empty_value) {
    $output['value']['markup']['#markup'] = $delta_prefix . $prefix . $output['value']['markup']['#markup'] . $suffix;
  }

  return $output;
}

/***
 * Convert a given value to the appropraite database format.
 *
 * @param string $value
 *   The date or time string to convert.
 * @param string $method
 *   The method to use for converting.
 * @param string|array $option
 *   (optional) Additional options to pass to the method for conversion.
 * @param array $form_state
 *   (optional) The form state array, containing all available values.
 * @param array $delta
 *   (optional) The delta location for processing data of the same delta.
 *
 * @return
 *   The appropriate datatype suitable for storing into the database.
 *   FALSE is returned on error.
 */
function event_workflow_convert_value_to_database_format($value, $method, $option = array(), $form_state = array(), $delta = array()) {
  if ($method == 'timestamp') {
    if (empty($value)) {
      return FALSE;
    }

    if (array_key_exists('relative_to', $option) && is_string($option['relative_to']) && !empty($option['relative_to'])) {
      if (!is_array($form_state) || !array_key_exists('values', $form_state)) {
        return FALSE;
      }

      $current = &$form_state['values'];

      $parts = explode('][', $option['relative_to']);
      foreach ($parts as $part) {
        if (is_array($current) && array_key_exists($part, $current)) {
          $current = &$current[$part];
        }
        else {
          return FALSE;
        }
      }

      if (is_array($current) && array_key_exists($delta, $current)) {
        $current = &$current[$delta];
      }
      else {
        return FALSE;
      }

      $date_stamp = strtotime($current, 0);
      return strtotime($value, $date_stamp);
    }

    return strtotime($value);
  }
  elseif ($method == 'timestamp_relative') {
    if (empty($value)) {
      return FALSE;
    }

    return strtotime($value, 0);
  }
  elseif ($method == 'date_popup') {
    if (!is_string($value) || empty($value)) {
      return FALSE;
    }

    // force the date to begin at the earlies time in the day.
    $date_stamp = strtotime($value);
    $date = date("Y/m/d", $date_stamp);
    return strtotime($date, 0);
  }
  elseif ($method == 'date_month') {
    if (!is_string($value) || empty($value)) {
      return FALSE;
    }

    $date_stamp = strtotime($value);
    return (int) date("m", $date_stamp);
  }
  elseif ($method == 'date_day') {
    if (!is_string($value) || empty($value)) {
      return FALSE;
    }

    $date_stamp = strtotime($value);
    return (int) date("d", $date_stamp);
  }
  elseif ($method == 'currency') {
    if (is_null($value)) {
      return FALSE;
    }

    // shift decimal over to digits.
    return floor($value * 100);
  }

  return FALSE;
}

/***
 * Convert a given value to the appropraite database format.
 *
 * @param string $value
 *   The date or time string to convert.
* @param string $method
 *   The method to use for converting.
 * @param string|array $option
 *   (optional) Additional options to pass to the method for conversion.
 *
 * @return
 *   The appropriate datatype suitable for storing into the database.
 *   FALSE is returned on error.
 */
function event_workflow_convert_value_from_database_format($value, $method, $option = array()) {
  if ($method == 'timestamp') {
    if (empty($value)) return NULL;

    return date($option['view'], $value);
  }
  elseif ($method == 'timestamp_relative') {
    if (empty($value)) return NULL;

    return date($option['view'], $value);
  }
  elseif ($method == 'date_popup') {
    if (empty($value)) return NULL;

    return date('Y-m-d', $value);
  }
  elseif ($method == 'date_month') {
    if (empty($value)) return NULL;

    return $value;
  }
  elseif ($method == 'date_day') {
    if (empty($value)) return NULL;

    return $value;
  }
  elseif ($method == 'currency') {
    if (is_null($value)) return NULL;

    return $value / 100;
  }

  return FALSE;
}

/**
 * Loads an event by its ID.
 *
 * @param int $event_id
 *   The numeric event id.
 * @param bool $reset
 *   (optional) If TRUE, the cache for the specified event is reset.
 *
 * @return array|bool
 *   An array of values associated with the event id.
 *   FALSE is returned on error.
 *   An empty array is returned when there is no event by that id.
 */
function event_workflow_load_event_by_id($event_id, $reset = FALSE) {
  if (!cf_is_integer($event_id)) {
    cf_error::invalid_integer('event_id');
    return FALSE;
  }

  $cache_id = __function__;
  $cached_events = &drupal_static($cache_id, NULL);
  if (!$reset && is_array($cached_events) && array_key_exists($event_id, $cached_events)) {
    return $cached_events[$event_id];
  }

  mcneese_event_workflow_include(0);

  $event = array();
  $structure = mcneese_event_workflow_table_structure();

  try {
    $query = db_select('mew_event_requests', 'mer');
    $query->fields('mer');
    $query->condition('id', $event_id);

    $results = $query->execute()->fetchAll();

    if (empty($results)) {
      return array();
    }

    $mer = array_pop($results);

    // manually add the event request information and presentation fields.
    if (!isset($event['mer'])) {
      $event['mer'] = array();
      foreach (array('id', 'user_id', 'created', 'updated') as $key) {
        $event['mer'][$key] = array(0 => new stdClass());
        $event['mer'][$key][0]->value = $mer->$key;
      }
    }

    foreach ($structure as $table_name => &$fields) {
      $current_table_name = 'mew_current_' . $table_name;

      if (!array_key_exists($table_name, $event)) {
        $event[$table_name] = array();
      }

      $query = db_select($current_table_name, 'mctn');
      $query->condition('mctn.event_id', $event_id);
      $query->fields('mctn');

      $results = $query->execute()->fetchAll();

      if (empty($results)) {
        unset($current);
        unset($executed);
        unset($query);

        continue;
      }

      $current = array_pop($results);

      // build a list of current tables so that revision ids may be processed at any point.
      if (!isset($event['current'])) {
        $event['current'] = array();
      }

      $event['current'][$table_name] = array();
      foreach ((array) $current as $current_keys => $current_values) {
        if ($current_keys == 'event_id') continue;
        $event['current'][$table_name][$current_keys] = $current_values;
      }

      foreach ($fields as $field_name => &$field_values) {
        if (isset($structure[$table_name][$field_name]['storage']) && $structure[$table_name][$field_name]['storage'] == 'alternate' && array_key_exists('alternate', $structure[$table_name][$field_name])) {
          foreach ($structure[$table_name][$field_name]['alternate'] as $alternate_name => &$alternate_data) {
            $field_table_name = 'mew_field_' . $table_name . '_' . $alternate_name;

            $query = db_select($field_table_name, 'mftf');
            $query->condition('mftf.event_id', $event_id);
            $query->condition('mftf.revision', $current->$alternate_name);
            $query->fields('mftf');

            $results = $query->execute()->fetchAll();

            if (empty($results)) {
              $event[$table_name][$alternate_name] = array();
            }
            else {
              $event[$table_name][$alternate_name] = $results;
            }
          }
        }
        else {
          $field_table_name = 'mew_field_' . $table_name . '_' . $field_name;

          $query = db_select($field_table_name, 'mftf');
          $query->condition('mftf.event_id', $event_id);
          $query->condition('mftf.revision', $current->$field_name);
          $query->fields('mftf');

          $results = $query->execute()->fetchAll();

          if (empty($results)) {
            $event[$table_name][$field_name] = array();
          }
          else {
            $event[$table_name][$field_name] = $results;
          }
        }

        unset($results);
        unset($query);
      }

      unset($current);
      unset($results);
      unset($query);
    }
  }
  catch (Exception $ex) {
    cf_error::on_exception($ex);
    return FALSE;
  }

  $cached_events[$event_id] = &$event;

  return $cached_events[$event_id];
}


/**
 * Loads event with fields matching a revision timestamp.
 *
 * @param int $event_id
 *   The numeric event id.
 * @param int $revision
 *   Unix Timestamp representing the exact date and time to load.
 * @param array $desired_fields
 *   (optional) An array of field names to load that match the specified date.
 *   These are nested by their table structure. When an empty array is
 *   provided, all values are used.
 * @param bool $reset
 *   (optional) If TRUE, the cache for the specified event is reset.
 *
 * @return array|bool
 *   An array of values associated with the event, date, and fields.
 *   FALSE is returned on error.
 *
 * @see mcneese_event_workflow_table_structure()
 */
function event_workflow_load_event_by_timestamp($event_id, $revision, $desired_fields = array()) {
  if (!cf_is_integer($event_id)) {
    cf_error::invalid_integer('event_id');
    return FALSE;
  }

  if (!cf_is_integer($revision)) {
    cf_error::invalid_integer('revision');
    return FALSE;
  }

  if (!is_array($desired_fields)) {
    cf_error::invalid_array('desired_fields');
    return FALSE;
  }

  mcneese_event_workflow_include(0);

  $event = array();
  $structure = mcneese_event_workflow_table_structure();

  // filter out all fields that were not requested.
  if (!empty($desired_fields)) {
    foreach ($structure as $table_name => &$fields) {
      if (!array_key_exists($table_name, $desired_fields)) {
        unset($structure[$table_name]);
        continue;
      }

      foreach ($fields as $field_name => &$field_values) {
        if (!array_key_exists($field_name, $desired_fields)) {
          unset($structure[$field_name]);
          continue;
        }
      }
    }
  }

  try {
    $query = db_select('mew_event_requests', 'mer');
    $query->innerjoin('mew_event_revisions', 'merv', 'mer.id = merv.event_id');

    $query->fields('mer');
    $query->addField('merv', 'revision', 'revision');

    $query->condition('id', $event_id);
    $query->condition('merv.date', $revision);

    $query->orderBy('merv.date');

    $results = $query->execute()->fetchAll();

    // manually add the event request information and presentation fields.
    $event['mer'] = array();
    if (!empty($results)) {
      foreach ($results as $index => $mer) {
        foreach (array('id', 'user_id', 'created', 'updated') as $key) {
          if (!isset($event['mer'][$key][$mer->revision])) {
            $event['mer'][$key][$mer->revision] = new stdClass();
          }

          $event['mer'][$key][$mer->revision]->value = $mer->$key;
        }
      }
    }

    foreach ($structure as $table_name => &$fields) {
      $current_table_name = 'mew_current_' . $table_name;

      if (!array_key_exists($table_name, $event)) {
        $event[$table_name] = array();
      }

      // build a list of current tables so that revision ids may be processed at any point.
      if (!isset($event['current'])) {
        $event['current'] = array();
      }

      $event['current'][$table_name] = array();

      foreach ($fields as $field_name => &$field_values) {
        if (isset($structure[$table_name][$field_name]['storage']) && $structure[$table_name][$field_name]['storage'] == 'alternate' && array_key_exists('alternate', $structure[$table_name][$field_name])) {
          foreach ($structure[$table_name][$field_name]['alternate'] as $alternate_name => &$alternate_data) {
            $field_table_name = 'mew_field_' . $table_name . '_' . $alternate_name;

            $query = db_select($field_table_name, 'mftf');
            $query->condition('mftf.event_id', $event_id);
            $query->condition('mftf.date', $revision);
            $query->fields('mftf');

            $results = $query->execute()->fetchAll();

            if (empty($results)) {
              $event[$table_name][$alternate_name] = array();

              $event['current'][$table_name][$field_name] = NULL;
            }
            else {
              $event[$table_name][$alternate_name] = $results;

              $first_result = reset($results);
              $event['current'][$table_name][$field_name] = $first_result->revision;
            }
          }
        }
        else {
          $field_table_name = 'mew_field_' . $table_name . '_' . $field_name;

          $query = db_select($field_table_name, 'mftf');
          $query->condition('mftf.event_id', $event_id);
          $query->condition('mftf.date', $revision);
          $query->fields('mftf');

          #$results = $query->execute()->fetchAll();
          $executed = $query->execute();
          $results = $executed->fetchAll();

          if (empty($results)) {
            $event[$table_name][$field_name] = array();

            $event['current'][$table_name][$field_name] = NULL;
          }
          else {
            $event[$table_name][$field_name] = $results;

            $first_result = reset($results);
            $event['current'][$table_name][$field_name] = $first_result->revision;
          }
        }

        unset($results);
        unset($query);
      }

      unset($results);
      unset($query);
    }
  }
  catch (Exception $ex) {
    cf_error::on_exception($ex);
    return FALSE;
  }

  return $event;
}

/**
 * Loads the event revision number.
 *
 * @param int $event_id
 *   The numeric event id.
 * @param string $table_field_name
 *   (optional) The name of a specific table to load a revision number from.
 *   When not specified, this returns the latest revision number of a given
 *   event.
 *
 * @return int|bool
 *  FALSE is returned on error.
 *  NULL is returned when there is no existing revision number.
 */
function mcneese_event_workflow_load_event_revision_number($event_id, $table_field_name = NULL) {
  if (!cf_is_integer($event_id)) {
    cf_error::invalid_integer('event_id');
    return FALSE;
  }

  if (is_null($table_field_name)) {
    try {
      $query = db_select('mew_event_revisions', 'merv');
      $query->addfield('merv', 'revision', 'revision');
      $query->condition('merv.event_id', $event_id);
      $query->orderBy('merv.revision', 'DESC');
      $query->range(0, 1);

      $field = $query->execute()->fetchfield();

      if ($field === FALSE) {
        return NULL;
      }

      return $field;
    }
    catch (Exception $ex) {
      cf_error::on_query_execution($ex);
    }

    return FALSE;
  }

  if (!is_string($table_field_name)) {
    cf_error::invalid_string('table_field_name');
    return FALSE;
  }

  try {
    $query = db_select($table_field_name, 'tfn');
    $query->fields('tfn', array('revision'));
    $query->condition('tfn.event_id', $event_id);
    $query->orderBy('tfn.revision', 'DESC');
    $query->range(0, 1);

    $result = $query->execute()->fetchField();

    return $result;
  }
  catch (Exception $ex) {
    cf_error::on_exception($ex);
    return FALSE;
  }

  return FALSE;
}

/**
 * Loads a system user by its Banner ID.
 *
 * @param int $banner_id
 *   The numeric banner id.
 * @param bool $reset
 *   (optional) If TRUE, the cache for the specified user is reset.
 *
 * @return object|null|bool
 *   The
 *   FALSE is returned on error.
 *   An empty array is returned when there is no event by that id.
 */
function event_workflow_load_user_by_banner_id($banner_id, $reset = FALSE) {
  if (!cf_is_integer($banner_id)) {
    cf_error::invalid_integer('banner_id');
    return FALSE;
  }

  $cache_id = __function__;
  $cached_user = &drupal_static($cache_id, NULL);
  if (!$reset && is_array($cached_user) && array_key_exists($banner_id, $cached_user)) {
    return $cached_user[$banner_id];
  }

  try {
    $query = db_select('users', 'u');

    $query->innerjoin('field_data_field_user_first_name', 'fdfufn', 'u.uid = fdfufn.entity_id AND fdfufn.delta = 0');
    $query->innerjoin('field_data_field_user_last_name', 'fdfuln', 'u.uid = fdfuln.entity_id AND fdfuln.delta = 0');
    $query->innerjoin('field_data_field_user_banner_id', 'fdfubi', 'u.uid = fdfubi.entity_id AND fdfubi.delta = 0');

    $query->addField('u', 'uid', 'user_id');
    $query->addField('u', 'name', 'name');
    $query->addField('u', 'created', 'created');
    $query->addField('u', 'status', 'status');
    $query->addField('u', 'mail', 'email');

    $query->addField('fdfufn', 'field_user_first_name_value', 'first_name');
    $query->addField('fdfuln', 'field_user_last_name_value', 'last_name');
    $query->addField('fdfubi', 'field_user_banner_id_value', 'banner_id');

    $query->condition('field_user_banner_id_value', $banner_id);

    $results = $query->execute()->fetchAll();
  }
  catch (Exception $ex) {
    cf_error::on_exception($ex);
    return FALSE;
  }

  if (empty($results)) {
    return NULL;
  }

  $cached_user[$banner_id] = array_pop($results);

  return $cached_user[$banner_id];
}

/**
 * Build the table structure for saving new or existing information.
 *
 * @param array $structure
 *   Describes how the secondary tables are populated and processed.
 * @param array $structure_tables
 *   A collection of 'current' tables to create or update.
 * @param array $structure_field_tables
 *   A collection of 'field' tables to create or update.
 * @param string $table_name
 *   Name of the current table being processed.
 * @param string $field_name
 *   Name of the current field being processed.
 * @param string $db_table
 *   The name of the 'current' table as defined the SQL database.
 * @param string $db_table_field
 *   The name of the 'field' table as defined the SQL database.
 * @param array $user_data
 *   An array of user related information:
 *   - 'user_id': The users ID.
 * @param array $form_state
 *   The form state for advanced processing of fields that depend on other
 *   fields when they are converted into the database format.
 * @param array|null $event
 *   (optional) When NULL, this created tables are new tables.
 *   When an array, the created tables are updates to existing values.
 *   The array should be populated by event_workflow_load_event_by_id().
 *
 * @see mcneese_event_workflow_table_structure()
 * @see event_workflow_load_event_by_id()
 */
function mcneese_event_workflow_build_table_structure($structure, &$structure_tables, &$structure_field_tables, $table_name, $field_name, $db_table, $db_table_field, $user_data, $values, $form_state, $event = NULL) {
  if (is_null($event)) {
    $event_id = NULL;
    $revision = 0;
  }
  else {
    $event_id = $event['mer']['id'][0]->value;
    $structure_tables[$db_table]['event_id'] = $event_id;

    $revision = mcneese_event_workflow_load_event_revision_number($event_id, $db_table_field);
    if ($revision === FALSE) {
      watchdog('mew', "Failed to load revision number for event %event_id while building the table structure, forcing revision number to be 0.", array('%event_id' => $event_id), WATCHDOG_ERROR);
      $revision = 0;
    }
    elseif (is_null($revision)) {
      $revision = 0;
    }
    else {
      $revision++;
    }
  }

  if (!isset($structure_field_tables[$db_table_field])) {
    $structure_field_tables[$db_table_field] = array();
  }

  if (array_key_exists('storage', $structure[$table_name][$field_name])) {
    if (!is_string($structure[$table_name][$field_name]['storage']) || empty($structure[$table_name][$field_name]['storage'])) {
      // @todo: present a watchdog error message here.
      return;
    }

    $storage_key = $structure[$table_name][$field_name]['storage'];
    if (!array_key_exists($storage_key, $structure[$table_name][$field_name]) || empty($structure[$table_name][$field_name][$storage_key])) {
      // @todo: present a watchdog error message here.
      return;
    }

    // alternate is used for handling fields that are stored in multiple separate tables.
    if ($storage_key == 'alternate') {
      unset($structure_tables[$db_table][$field_name]);
      unset($structure_field_tables[$db_table_field]);

      foreach ($values as $delta => $value) {
        $alternate_values = array();
        if (!empty($structure[$table_name][$field_name]['alternate_method'])) {
          foreach ($structure[$table_name][$field_name]['alternate_method'] as $method_name => $method_values) {
            if ($method_name == 'explode') {
              $alternate_values = explode($method_values[0], $value, $method_values[1]);
            }

            break;
          }
        }

        foreach ($structure[$table_name][$field_name]['alternate'] as $alternate_name => &$alternate_data) {
          if (!array_key_exists('key', $alternate_data)) continue;

          $db_table_field = 'mew_field_' . $table_name . '_' . $alternate_name;

          if (!isset($structure_field_tables[$db_table_field])) {
            $structure_field_tables[$db_table_field] = array();
          }

          $structure_field_tables[$db_table_field][$delta] = array();
          $structure_field_tables[$db_table_field][$delta]['user_id'] = $user_data['user_id'];
          $structure_field_tables[$db_table_field][$delta]['date'] = REQUEST_TIME;
          $structure_field_tables[$db_table_field][$delta]['delta'] = $delta;
          $structure_field_tables[$db_table_field][$delta]['revision'] = $revision;

          if (isset($alternate_values[$alternate_data['key']]) && (is_numeric($alternate_values[$alternate_data['key']]) || !empty($alternate_values[$alternate_data['key']]))) {
            $structure_field_tables[$db_table_field][$delta]['value'] = $alternate_values[$alternate_data['key']];
          }

          if (!is_null($event_id)) {
            $structure_field_tables[$db_table_field][$delta]['event_id'] = $event_id;
          }

          $structure_tables[$db_table][$alternate_name] = $revision;
        }
      }
    }
    else {
      $structure_tables[$db_table][$field_name] = $revision;

      foreach ($values as $delta => $value) {
        $structure_field_tables[$db_table_field][$delta] = array();
        $structure_field_tables[$db_table_field][$delta]['user_id'] = $user_data['user_id'];
        $structure_field_tables[$db_table_field][$delta]['date'] = REQUEST_TIME;
        $structure_field_tables[$db_table_field][$delta]['delta'] = $delta;
        $structure_field_tables[$db_table_field][$delta]['revision'] = $revision;

        if (!is_null($event)) {
          $structure_field_tables[$db_table_field][$delta]['event_id'] = $event_id;
        }

        $storage_values = FALSE;
        if (isset($structure[$table_name][$field_name][$storage_key]) && is_array($structure[$table_name][$field_name][$storage_key])) {
          $storage_values = event_workflow_convert_value_to_database_format($value, $storage_key, $structure[$table_name][$field_name][$storage_key], $form_state, $delta);
        }

        if ($storage_values !== FALSE && !is_null($storage_values)) {
          $structure_field_tables[$db_table_field][$delta]['value'] = $storage_values;
        }

        if (isset($structure[$table_name][$field_name]['type'])) {
          // exception case: the time type is also stored in a field with the y/m/d set to 0 for quick and easy relative searches at the cost of extra space usage.
          if ($structure[$table_name][$field_name]['type'] == 'time' && $storage_key == 'timestamp') {
            $storage_values = FALSE;
            if (isset($structure[$table_name][$field_name][$storage_key]) && is_array($structure[$table_name][$field_name][$storage_key])) {
              $storage_options = $structure[$table_name][$field_name][$storage_key];
              unset($storage_options['relative_to']);
              $storage_values = event_workflow_convert_value_to_database_format($value, 'timestamp_relative', $storage_options);
              unset($storage_options);
            }

            if ($storage_values !== FALSE && !is_null($storage_values)) {
              $structure_field_tables[$db_table_field][$delta]['value_relative'] = $storage_values;
            }
          }
          // exception case: the date_popup type is also stored in a month and a day field for quick and easy relative searches at the cost of extra space usage.
          elseif ($structure[$table_name][$field_name]['type'] == 'date' && $storage_key == 'date_popup') {
            $storage_values = FALSE;
            if (isset($structure[$table_name][$field_name][$storage_key]) && is_array($structure[$table_name][$field_name][$storage_key])) {
              $storage_options = $structure[$table_name][$field_name][$storage_key];
              unset($storage_options['relative_to']);
              $storage_values = event_workflow_convert_value_to_database_format($value, 'date_month', $storage_options);
              unset($storage_options);
            }

            if ($storage_values !== FALSE && !is_null($storage_values)) {
              $structure_field_tables[$db_table_field][$delta]['value_month'] = $storage_values;
            }

            $storage_values = FALSE;
            if (isset($structure[$table_name][$field_name][$storage_key]) && is_array($structure[$table_name][$field_name][$storage_key])) {
              $storage_options = $structure[$table_name][$field_name][$storage_key];
              unset($storage_options['relative_to']);
              $storage_values = event_workflow_convert_value_to_database_format($value, 'date_day', $storage_options);
              unset($storage_options);
            }

            if ($storage_values !== FALSE && !is_null($storage_values)) {
              $structure_field_tables[$db_table_field][$delta]['value_day'] = $storage_values;
            }
          }
        }
      }
    }
  }
  else {
    $structure_tables[$db_table][$field_name] = $revision;

    foreach ($values as $delta => $value) {
      $structure_field_tables[$db_table_field][$delta] = array();
      $structure_field_tables[$db_table_field][$delta]['user_id'] = $user_data['user_id'];
      $structure_field_tables[$db_table_field][$delta]['date'] = REQUEST_TIME;
      $structure_field_tables[$db_table_field][$delta]['delta'] = $delta;
      $structure_field_tables[$db_table_field][$delta]['revision'] = $revision;

      if (!is_null($event)) {
        $structure_field_tables[$db_table_field][$delta]['event_id'] = $event_id;
      }

      if (isset($structure[$table_name][$field_name]['columns'])) {
        foreach ($structure[$table_name][$field_name]['columns'] as $special_field_id => &$special_field_name) {
          if (isset($value[$special_field_id]) && $value[$special_field_id] > 0) {
            $structure_field_tables[$db_table_field][$delta][$special_field_name] = $special_field_id;
          }
        }
      }
      elseif (is_numeric($value) || !empty($value)) {
        $structure_field_tables[$db_table_field][$delta]['value'] = $value;
      }
    }
  }
}

/**
 * Returns the reviewers.
 *
 * @param array $conditions
 *   An array containing select conditions, such as:
 *   - 'mr.id': reviewer id.
 *   - 'mr.user_id': user id (uid).
 *   - 'mr.event_classification': event classification.
 *   - 'mr.review_step': event review step.
 *   - 'mr.reviewer_classification': reviewer classification.
 * @param bool $join
 *   (optional) When TRUE, the drupal user table is joined to the reviewers table.
 *   Only select portions of the user table is joined.
 *   This also joins custom field tables for user first and last name.
 * @param array $sort
 *   (optional) When specified, representings the database sorting.
 *
 * @return array|false
 *   An array of database objects representing the reviewers.
 *   FALSE is returned on error.
 */
function mcneese_event_workflow_get_reviewers($conditions = array(), $join = FALSE, $sort = array()) {
  if (!is_array($conditions)) {
    cf_error::invalid_array('conditions');
    return FALSE;
  }

  if (!is_bool($join)) {
    cf_error::invalid_bool('join');
    return FALSE;
  }

  if (!is_array($sort)) {
    cf_error::invalid_sort('sort');
    return FALSE;
  }

  try {
    $query = db_select('mew_reviewers', 'mr');
    $query->fields('mr');

    if ($join) {
      $query->innerjoin('users', 'u', 'u.uid = mr.user_id');
      $query->innerjoin('field_data_field_user_first_name', 'fdfufn', 'u.uid = fdfufn.entity_id AND fdfufn.delta = 0');
      $query->innerjoin('field_data_field_user_last_name', 'fdfuln', 'u.uid = fdfuln.entity_id AND fdfuln.delta = 0');
      $query->innerjoin('field_data_field_user_banner_id', 'fdfubi', 'u.uid = fdfubi.entity_id AND fdfubi.delta = 0');

      $query->innerjoin('taxonomy_term_data', 'ttd1', 'ttd1.vid = 1 AND mr.event_classification = ttd1.tid');
      $query->innerjoin('taxonomy_term_data', 'ttd2', 'ttd2.vid = 19 AND mr.review_step = ttd2.tid');
      $query->innerjoin('taxonomy_term_data', 'ttd3', 'ttd3.vid = 17 AND mr.reviewer_classification = ttd3.tid');

      $query->addField('u', 'name', 'name');
      $query->addField('u', 'created', 'created');
      $query->addField('u', 'status', 'status');
      $query->addField('u', 'mail', 'email');

      $query->addField('fdfufn', 'field_user_first_name_value', 'first_name');
      $query->addField('fdfuln', 'field_user_last_name_value', 'last_name');
      $query->addField('fdfubi', 'field_user_banner_id_value', 'banner_id');

      $query->addField('ttd1', 'name', 'event_classification_name');
      $query->addField('ttd2', 'name', 'review_step_name');
      $query->addField('ttd3', 'name', 'reviewer_classification_name');
    }

    if (!empty($conditions)) {
      foreach ($conditions as $condition_id => $condition) {
        $query->condition($condition_id, $condition);
      }
    }

    if (!empty($sort)) {
      foreach ($sort as $sort_name => $sort_value) {
        $query->orderBy($sort_name, $sort_value);
      }
    }

    $results = $query->execute()->fetchAll();
  }
  catch (Exception $ex) {
    cf_error::on_query_execution($ex);

    return FALSE;
  }

  if (is_array($results)) {
    return $results;
  }

  return FALSE;
}

/**
 * Checks to see if the given room is available at the given times.
 *
 * For the dates and times to work properly, it is expected that:
 * - unix timestamps are used.
 * - date values have their time reset to 0 (aka: 12:00:00am).
 * - time values have their dates set to the same day as the date value.
 *
 * @param string $room
 *   The room string.
 * @param array $dates
 *   An array containing the date values.
 * @param array $time_start
 *   An array containing the time start values.
 * @param array $time_stop
 *   An array containing the time stop values.
 * @param int|null $event_id
 *   (optional) When not NULL, this represents the event_id to ignore.
 *   Use this so that when editing an existing event, it does not report
 *   itself as the event using the room.
 *
 * @return array|false
 *   An array containing any events currently using the room at the specified date and time.
 *   FALSE on error.
 */
function mcneese_event_workflow_check_room_availability($room, $date, $time_start, $time_stop, $event_id = NULL) {
  if (!is_string($room) || empty($room)) {
    cf_error::invalid_string('room');
    return FALSE;
  }

  if (!is_array($date) || empty($date)) {
    cf_error::invalid_array('date');
    return FALSE;
  }

  if (!is_array($time_start) || empty($time_start)) {
    cf_error::invalid_array('time_start');
    return FALSE;
  }

  if (!is_array($time_stop) || empty($time_stop)) {
    cf_error::invalid_array('time_stop');
    return FALSE;
  }

  if (!is_null($event_id) && !cf_is_integer($event_id)) {
    cf_error::invalid_integer('event_id');
    return FALSE;
  }

  try {
    $query = db_select('mew_event_requests', 'mer');

    $query->innerjoin('mew_current_top', 'mct', 'mer.id = mct.event_id');
    $query->innerjoin('mew_current_dates', 'mcd', 'mer.id = mcd.event_id AND mct.event_id = mcd.event_id');

    $query->innerjoin('mew_field_top_status', 'mfts', 'mct.event_id = mfts.event_id AND mcd.event_id = mfts.event_id AND mct.status = mfts.revision AND mfts.delta = 0');
    $query->innerjoin('mew_field_top_step', 'mftsp', 'mct.event_id = mftsp.event_id AND mcd.event_id = mftsp.event_id AND mct.step = mftsp.revision AND mftsp.delta = 0');
    $query->innerjoin('mew_field_top_room', 'mftr', 'mct.event_id = mftr.event_id AND mcd.event_id = mftr.event_id AND mct.room = mftr.revision AND mftr.delta = 0');

    $query->innerjoin('mew_field_dates_date', 'mfdd', 'mct.event_id = mfdd.event_id AND mcd.event_id = mfdd.event_id AND mcd.date = mfdd.revision');

    $query->addField('mer', 'id', 'event_id');
    $query->addField('mfdd', 'value', 'date');
    $query->addField('mcd', 'date', 'date_revision');
    $query->addField('mcd', 'time_start', 'time_start_revision');
    $query->addField('mcd', 'time_stop', 'time_stop_revision');

    $query->distinct();

    $statuses = array(
      MEW_EVENT_STATUS_LOCKED,
      MEW_EVENT_STATUS_CLOSED_ACCEPTED,
    );

    $query->condition('mfts.value', $statuses, 'IN');
    $query->condition('mftr.value', $room);
    $query->condition('mfdd.value', $date, 'IN');

    if (!is_null($event_id)) {
      $query->condition('mer.id', $event_id, '<>');
    }

    $results = $query->execute()->fetchAll();

    // no rooms in use.
    if (empty($results)) {
      return array();
    }

    $event_ids = array();

    // the results contain all locked events that have something in the given room during the given date.
    // however, this does not mention the time, so loop through the times and see if they are all valid.
    foreach ($results as $result) {
      $query = db_select('mew_field_dates_date', 'mfdd');

      $query->innerjoin('mew_field_dates_time_start', 'mfdts', 'mfdd.event_id = mfdts.event_id AND mfdd.delta = mfdts.delta');
      $query->innerjoin('mew_field_dates_time_stop', 'mfdtsp', 'mfdd.event_id = mfdtsp.event_id AND mfdd.delta = mfdtsp.delta');

      $query->addField('mfdd', 'event_id', 'event_id');
      $query->addField('mfdd', 'revision', 'revision');
      $query->addField('mfdd', 'delta', 'delta');
      $query->addField('mfdd', 'value', 'date');
      $query->addField('mfdts', 'value', 'time_start');
      $query->addField('mfdtsp', 'value', 'time_stop');

      $query->condition('mfdd.event_id', $result->event_id);
      $query->condition('mfdts.event_id', $result->event_id);
      $query->condition('mfdtsp.event_id', $result->event_id);

      $query->condition('mfdd.revision', $result->date_revision);
      $query->condition('mfdts.revision', $result->time_start_revision);
      $query->condition('mfdtsp.revision', $result->time_stop_revision);

      if (!is_null($event_id)) {
        $query->condition('mfdd.event_id', $event_id, '<>');
      }

      $or = db_or();

      // all day events match, they have NULL for start and stop time values.
      $and = db_and();
      $and->condition('mfdd.value', $date, 'IN');
      $and->isNull('mfdts.value');
      $and->isNull('mfdtsp.value');

      $or->condition($and);

      foreach ($date as $key => $value) {
        // all day events match, they have NULL for start and stop time values.
        if (is_null($time_start[$key]) && is_null($time_stop[$key])) {
          $event_ids[] = $result->event_id;
        }

        $and = db_and();
        $and->condition('mfdd.value', $value);
        $and->condition('mfdts.value', $time_start[$key], '<=');
        $and->condition('mfdtsp.value', $time_start[$key], '>');
        $or->condition($and);

        $and = db_and();
        $and->condition('mfdd.value', $value);
        $and->condition('mfdts.value', $time_stop[$key], '<');
        $and->condition('mfdtsp.value', $time_stop[$key], '>=');
        $or->condition($and);
      }

      $query->condition($or);

      $matches = $query->execute()->fetchAll();

      foreach ($matches as $match) {
        $event_ids[] = $match->event_id;
      }
    }
  }
  catch (Exception $ex) {
    cf_error::on_query_execution($ex);
    return FALSE;
  }

  return $event_ids;
}

/**
 * Prints a warning message about the room being unavailable.
 *
 * @see mcneese_event_workflow_check_room_availability()
 */
function mcneese_event_workflow_display_room_unavailable_message() {
  $unavailable_message = '';
  $unavailable_message .= '<span class="uppercase">Warning</span>: The specified room is currently unavailable. ';
  $unavailable_message .= 'You may still submit this request and your request attempt will still be logged. ';
  drupal_set_message($unavailable_message, 'warning');
}

/**
 * Builds the event pdf and saves it to the local disk.
 *
 * @param int $event_id
 *   The Event ID.
 * @param int $mode
 *   (optional) The page mode used to determine which parts of a page are
 *   processed.
 * @param bool $local
 *   (optional) If TRUE, then the file is saved to the local disk.
 *   If FALSE, then the file is print to stdout.
 *
 * @return bool
 *   TRUE on success, FALSE otherwise.
 */
function mcneese_event_workflow_generate_pdf($event_id, $mode = 1, $local = FALSE) {
  $event = event_workflow_load_event_by_id($event_id);

  if (empty($event)) {
    watchdog('mew', "Unable to find event with id of @event_id.", array('@event_id' => $event_id), WATCHDOG_ERROR);
    return FALSE;
  }

  $form = array();
  $form_state = array();

  $page = array();
  $page['html'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'id' => 'mcneese-event-workflow-event-view-0-page',
      'class' => array(
        'mcneese-event-workflow-event-pdf-0',
      ),
    ),
  );

  $page['html']['content'] = array(mcneese_event_workflow_event_view_0_page($form, $form_state, $event_id, $mode, TRUE));
  $renderred = drupal_render($page);
  $html = drupal_render_page($renderred);

  return mcneese_event_workflow_event_pdf_0_page_using_wkhtmltopdf($event_id, $html, $local);
}

/**
 * Renders a PDF of a given event request using the wkhtmltopdf library.
 *
 * @param int $event_id
 *   The unique identifier for an event request.
 * @param bool $local
 *   (optional) If TRUE, then the file is saved to the local disk.
 *   If FALSE, then the file is print to stdout.
 *
 * @return bool
 *   TRUE on success, FALSE otherwise.
 */
function mcneese_event_workflow_event_pdf_0_page_using_wkhtmltopdf($event_id, $html, $local = FALSE) {
  $event = event_workflow_load_event_by_id($event_id);

  if (empty($event)) {
    watchdog('mew', "Unable to find event with id of @event_id.", array('@event_id' => $event_id), WATCHDOG_ERROR);
    return FALSE;
  }

  if (!is_string($html)) {
    cf_error::invalid_string('html');
    return FALSE;
  }

  if (!is_bool($local)) {
    cf_error::invalid_bool('local');
    return FALSE;
  }

  $library = libraries_load('phpwkhtmltopdf');
  if ($library === FALSE || empty($library['loaded'])) {
    return FALSE;
  }

  // Reconstruct the HTML output.
  $cf_dom = new cf_dom(TRUE, TRUE, TRUE, $html);

  $meta_tags = $cf_dom->get_body()->getElementsByTagName('meta');
  $style_tags = $cf_dom->get_body()->getElementsByTagName('style');
  $link_tags = $cf_dom->get_body()->getElementsByTagName('link');
  $title_tags = $cf_dom->get_body()->getElementsByTagName('title');
  $main_tag = $cf_dom->get_dom()->getElementById('mcneese-content-main');

  $head_markup = '<meta http-equiv="Content-Type" content="text/html; charset=utf-8">';
  $body_markup = '';
  $css_markup = '';

  // meta tags
  foreach ($meta_tags as $tag) {
    $head_markup .= $cf_dom->get_dom()->saveHTML($tag) . "\n";
  }

  // style tags
  $head_markup = '';
  foreach ($style_tags as $tag) {
    // drupal generates css styles using @import, remove all of these.
    $matched = array();
    $matches = preg_match_all('/@import url\("([^"]*)/i', $tag->nodeValue, $matched);

    $media = NULL;
    if ($tag->hasAttribute('media')) {
      $media = $tag->getAttribute('media');
    }
    if (empty($media)) {
      $media = 'all';
    }

    if ($matches > 0) {
      if ($media == 'all' || $media == 'print,embossed,tv' || $media == 'print') {
        $match = array_pop($matched);

        foreach ($match as $m) {
          // skip past css uneeded css
          if ($media == 'all') {
            $parts = explode('/', $m);
            if (!isset($parts[4])) {
              continue;
            }
            if ($parts[3] == 'system') {
            }

            if (isset($parts[5])) {
              if ($parts[5] == 'mcneese') {
              }
              elseif ($parts[5] == 'mcneese_event_workflow') {
              }
              else {
                continue;
              }
            }
          }

          $fixed_path = preg_replace('/\?.*$/i', '', $m);
          $parts = explode('/', $fixed_path);
          array_shift($parts);
          array_shift($parts);
          $fixed_path = implode('/', $parts);
          $content = drupal_load_stylesheet(DRUPAL_ROOT . '/' . $fixed_path);


          if (!empty($content)) {
            // mPDF does not properly support the > selector.
            $css_markup .= preg_replace('@ > @i', ' ', $content);
          }

          unset($content);
          unset($parts);
          unset($fixed_path);
        }
      }
    }
    else {
      $head_markup .= $cf_dom->get_dom()->saveHTML($tag) . "\n";
    }
  }

  if (!empty($css_markup)) {
    $head_markup .= '<style>' . $css_markup . '</style>';
  }

  // link tags
  foreach ($link_tags as $tag) {
    $head_markup .= $cf_dom->get_dom()->saveHTML($tag) . "\n";
  }

  // title tags
  $page_title = "Event Request: " . $event['information']['title'][0]->value;
  $head_markup .= '<title>Event Request #' . $event_id . ': ' . $event['information']['title'][0]->value . '</title>';

  $body_markup .= $cf_dom->get_dom()->saveHTML($main_tag) . "\n";

  $body_class = 'mcneese mcneese-pdf';
  $cf = &drupal_static('cf_theme_get_variables', array());
  if (isset($cf['markup_css']['body']['class'])) {
    $body_class .= $cf['markup_css']['body']['class'];
  }

  $html = '';
  $html = '<!DOCTYPE html>' . "\n";
  $html .= '<html lang="en" dir="ltr">' . "\n";

  $html .= '<head>' . $head_markup . '</head>';
  $html .= '<body class="' . $body_class . '">';
  $html .= '  <div id="mcneese-page" class="mcneese-page">';
  $html .= '    <div id="mcneese-page-content" class="mcneese-content full" role="main">';
  $html .= '    <header class="page-title html_tag-header">';
  $html .= '      <hgroup class="html_tag-hgroup">';
  $html .= '        <h1 class="page-title html_tag-heading" role="main">' . $page_title . '</h1>';
  $html .= '      </hgroup>';
  $html .= '    </header>';
  $html .= '    ' . $body_markup;
  $html .= '    </div>';
  $html .= '  </div>';
  $html .= '</body>';
  $html .= '</html>' . "\n";


  $wkpdf = new WkHtmlToPdf();

  // setup the default options
  $wkpdf->setOptions(array(
    'ignoreWarnings' => TRUE, // when not ignored, the PDF does not get generated.
  ));

  $wkpdf->addPage($html);

  $filename = mcneese_event_workflow_build_filename($event_id, 0);

  if ($local) {
    // save the file, locally.
    $temporary_name = drupal_tempnam('temporary://', 'file');
    $wkpdf->saveAs($temporary_name);

    file_unmanaged_move($temporary_name, 'private://event_requests/local/' . $filename, FILE_EXISTS_REPLACE);
  }
  else {
    // send to the browser
    #$result = $wkpdf->send($filename, TRUE);

    // send as a download
    $result = $wkpdf->send($filename, FALSE);
  }

  if (!$result) {
    watchdog('mew', "Error occured while generating the PDF of event @id: @error", array('@id' => $event_id, '@error' => $wkpdf->getError()), WATCHDOG_ERROR);
  }

  return TRUE;
}

/**
 * Builds the PDF filename string for an event.
 *
 * @param int $event_id
 *   The Event ID.
 * @param int $mode
 *   (optional) Determines how the filename is generated:
 *   0 - use the local filename method.
 *   1 - use the BDM filename PDF.
 *   2 - use the BDM filename Meta.
 *   3 - use the Email filename marker.
 *
 * @return string|false
 *   The built filename string or FALSE on error.
 */
function mcneese_event_workflow_build_filename($event_id, $mode = 0) {
  $event = event_workflow_load_event_by_id($event_id);

  if (empty($event)) {
    watchdog('mew', "Unable to find event with id of @event_id.", array('@event_id' => $event_id), WATCHDOG_ERROR);
    return FALSE;
  }

  if (!cf_is_integer($mode) || $mode < 0 || $mode > 3) {
    cf_error::invalid_integer('mode');
    return FALSE;
  }

  if ($mode == 0) {
    $fixed_title = preg_replace('/\W/i', '_', $event['information']['title'][0]->value);
    $fixed_title = preg_replace('/_+/i', '_', $fixed_title);

    return sprintf("%'010s", $event_id) . '-event_request-' . $fixed_title . '.pdf';
  }

  if ($mode == 1) {
    return sprintf("%'010s", $event_id) . '.pdf';
  }

  if ($mode == 2) {
    return sprintf("%'010s", $event_id) . '.meta';
  }

  if ($mode == 3) {
    return sprintf("%'010s", $event_id) . '.email';
  }

  return FALSE;
}

/**
 * Load a listing of events.
 *
 * This can be used as a very simple and straightforward search.
 *
 * This will load a total results of $limit +1 to communicate when a given
 * result set has more results than the limit. This should help with
 * implementing next and previous options.
 *
 * @param string|null|array $search
 *   (optional) When not NULL, this is either the string of text to search for.
 *   or an array of possible
 * @param bool $sensitive
 *   (optional) TRUE for case sensitive and FALSE otherwise.
 * @param int $start
 *   (optional) The starting range.
 * @param bool $limit
 *   (optional) The total number of search results to load.
 * @param array $sorting
 *   (optional) Table sort options.
 * @param null|bool $review_restrictions
 *   (optional) When NULL, no review restrictions are applied.
 *   When FALSE, review view restrictions are applied.
 *   When TRUE, review edit restrictions are applied.
 *
 * @return array|FALSE
 *   An array of all items found or FALSE on error.
 */
function mcneese_event_workflow_event_load_listing($search = NULL, $sensitive = FALSE, $start = 0, $limit = 20, $sorting = array(), $review_restrictions = NULL) {
  if (!is_null($search) && !is_string($search) && !is_array($search)) {
    cf_error::invalid_string('search');
    return FALSE;
  }

  if (is_array($search) && empty($search)) {
    $search = NULL;
  }

  if (!is_bool($sensitive)) {
    cf_error::invalid_bool('sensitive');
    return FALSE;
  }

  if (!cf_is_integer($start) || $start < 0) {
    cf_error::invalid_integer('start');
    return FALSE;
  }

  if (!cf_is_integer($limit) || $limit < 0) {
    cf_error::invalid_integer('limit');
    return FALSE;
  }

  if (!is_array($sorting)) {
    cf_error::invalid_array('sorting');
    return FALSE;
  }

  if (!is_null($review_restrictions) && !is_bool($review_restrictions)) {
    cf_error::invalid_bool('review_restrictions');
    return FALSE;
  }

  $user = cf_current_user();

  $manager = user_access('mcneese event workflow manage');
  $reviewer = user_access('mcneese event workflow review');
  $requester = user_access('mcneese event workflow request');

  $s = 'i';
  $like = 'ILIKE';
  if ($sensitive) {
    $s = '';
    $like = 'LIKE';
  }

  // load sorting information
  $order = NULL;
  if (isset($sorting['order'])) {
    $order = strtolower($sorting['order']);
  }

  $sort = NULL;
  if (isset($sorting['sort'])) {
    $sort = strtoupper($sorting['sort']);

    if ($sort != 'ASC' && $sort != 'DESC') {
      $sort = NULL;
    }
  }

  mcneese_event_workflow_include(4);

  $status_options = event_workflow_get_event_status_list_options();
  $step_options = event_workflow_get_event_steps_list_options();
  $information_type_options = event_workflow_get_information_type_list_options();

  // load search options
  if (is_null($search)) {
    // nothing to do
  }
  elseif (is_string($search)) {
    $fixed_text = preg_replace('/(\s)/i', ' ', $search);
    $fixed_text = preg_replace('/\s\s*/i', ' ', $fixed_text);

    $search_parts = explode(' ', $fixed_text);

    // remove empty search parts.
    $remove = array();
    foreach ($search_parts as $key => $search_part) {
      if (empty($search_part) && !is_numeric($search_part)) {
        $remove[$key] = $key;
      }
    }

    foreach ($remove as $key) {
      unset($search_parts[$key]);
    }
    unset($remove);

    // don't search when there is nothing to search for.
    if (empty($search_parts)) {
      return array();
    }

    // quote all except the '*' operator, but preg_quote will change '*'.
    $preg_parts = array();
    foreach ($search_parts as $search_key => $search_part) {
      $preg_part_pieces = explode('*', $search_part);

      if (count($preg_part_pieces) == 1) {
        $preg_parts[$search_key] = $search_part;
        continue;
      }

      $preg_part_pieces_fixed = array();
      foreach ($preg_part_pieces as $preg_part_pieces_key => $preg_part_piece) {
        $preg_part_pieces_fixed[$preg_part_pieces_key] = preg_quote($preg_part_piece, '/');
      }

      $preg_parts[$search_key] = '\b' . implode('.*', $preg_part_pieces_fixed) . '\b';
    }

    $status = array();
    foreach ($preg_parts as $search_part) {
      foreach ($status_options as $key => $option) {
        if (preg_match('/' . $search_part . '/' . $s, $option)) {
          $status[$key] = $key;
        }
      }
    }

    $steps = array();
    foreach ($preg_parts as $search_part) {
      foreach ($step_options as $key => $option) {
        if (preg_match('/' . $search_part . '/' . $s, $option)) {
          $steps[$key] = $key;
        }
      }
    }

    $information_type = array();
    foreach ($preg_parts as $search_part) {
      foreach ($information_type_options as $key => $option) {
        if (preg_match('/' . $search_part . '/' . $s, $option)) {
          $information_type[$key] = $key;
        }
      }
    }
  }

  $already_joined_count = 0;
  $already_joined = array();

  $already_added = array();

  $found = array();
  try {
    $query = db_select('mew_event_requests', 'mer');

    $query->innerjoin('mew_current_top', 'mct', 'mer.id = mct.event_id');
    $query->innerjoin('mew_current_information', 'mci', 'mer.id = mci.event_id');
    $query->innerjoin('mew_current_dates', 'mcd', 'mer.id = mcd.event_id');

    $already_joined['mew_current_top'] = 'mct';
    $already_joined['mew_current_information'] = 'mci';
    $already_joined['mew_current_dates'] = 'mcd';

    $query->innerjoin('mew_field_top_status', 'mfts', 'mct.event_id = mfts.event_id AND mct.status = mfts.revision AND mfts.delta = 0');
    $query->innerjoin('mew_field_top_step', 'mftsp', 'mct.event_id = mftsp.event_id AND mct.step = mftsp.revision AND mftsp.delta = 0');
    $query->innerjoin('mew_field_top_location', 'mftl', 'mct.event_id = mftl.event_id AND mct.location = mftl.revision AND mftl.delta = 0');
    $query->innerjoin('mew_field_top_room', 'mftr', 'mct.event_id = mftr.event_id AND mct.room = mftr.revision AND mftr.delta = 0');

    $already_joined['mew_field_top_status'] = 'mfts';
    $already_joined['mew_field_top_step'] = 'mftsp';
    $already_joined['mew_field_top_location'] = 'mftl';
    $already_joined['mew_field_top_room'] = 'mftr';

    $query->innerjoin('mew_banner_rooms', 'mbr', 'mftr.value = mbr.id');
    $query->innerjoin('mew_banner_buildings', 'mbb', 'mbr.building = mbb.id');
    $query->innerjoin('mew_banner_locations', 'mbl', 'mftl.value = mbl.id');

    $already_joined['mew_banner_rooms'] = 'mbr';
    $already_joined['mew_banner_buildings'] = 'mbb';
    $already_joined['mew_banner_locations'] = 'mbl';

    $query->innerjoin('mew_field_information_title', 'mfit', 'mci.event_id = mfit.event_id AND mci.title = mfit.revision AND mfit.delta = 0');
    $query->innerjoin('mew_field_information_type', 'mfitp', 'mci.event_id = mfitp.event_id AND mci.type = mfitp.revision AND mfitp.delta = 0');

    $already_joined['mew_field_information_title'] = 'mfit';
    $already_joined['mew_field_information_type'] = 'mfitp';

    if (is_null($search)) {
      $query->innerjoin('mew_field_dates_date', 'mfdd', 'mcd.event_id = mfdd.event_id AND mcd.date = mfdd.revision AND mfdd.delta = 0');
      $query->innerjoin('mew_field_dates_time_start', 'mfdts', 'mcd.event_id = mfdts.event_id AND mcd.time_start = mfdts.revision AND mfdts.delta = 0');
      $query->innerjoin('mew_field_dates_time_stop', 'mfdtsp', 'mcd.event_id = mfdtsp.event_id AND mcd.time_stop = mfdtsp.revision AND mfdtsp.delta = 0');
    }
    else {
      $query->distinct();

      $query->innerjoin('mew_field_dates_date', 'mfdd', 'mcd.event_id = mfdd.event_id AND mcd.date = mfdd.revision');
      $query->innerjoin('mew_field_dates_time_start', 'mfdts', 'mcd.event_id = mfdts.event_id AND mcd.time_start = mfdts.revision');
      $query->innerjoin('mew_field_dates_time_stop', 'mfdtsp', 'mcd.event_id = mfdtsp.event_id AND mcd.time_stop = mfdtsp.revision');

      // when using simple search, include a few additional textarea fields.
      if (is_string($search)) {
        $query->innerjoin('mew_field_top_additional', 'mfta', 'mct.event_id = mfta.event_id AND mct.additional = mfta.revision AND mfta.delta = 0');
        $query->innerjoin('mew_field_information_organization', 'mfio', 'mci.event_id = mfio.event_id AND mci.organization = mfio.revision AND mfta.delta = 0');

        $already_joined['mew_field_top_additional'] = 'mfta';
        $already_joined['mew_field_information_organization'] = 'mfio';

        $query->innerjoin('mew_current_plans', 'mcp', 'mer.id = mcp.event_id');
        $query->innerjoin('mew_field_plans_activities', 'mfpa', 'mcp.event_id = mfpa.event_id AND mcp.activities = mfpa.revision AND mfpa.delta = 0');
        $query->innerjoin('mew_field_plans_description', 'mfpd', 'mcp.event_id = mfpd.event_id AND mcp.description = mfpd.revision AND mfpd.delta = 0');

        $already_joined['mew_current_plans'] = 'mcp';
        $already_joined['mew_field_plans_activities'] = 'mfpa';
        $already_joined['mew_field_plans_description'] = 'mfpd';
      }
    }

    $already_joined['mew_field_dates_date'] = 'mfdd';
    $already_joined['mew_field_dates_time_start'] = 'mfdts';
    $already_joined['mew_field_dates_time_stop'] = 'mfdtsp';

    $query->addField('mfit', 'value', 'title');
    $query->addField('mfitp', 'value', 'type');

    $already_added['title'] = 'mfit.value';
    $already_added['type'] = 'mfitp.value';

    $query->addField('mbr', 'id', 'room');
    $query->addField('mbb', 'id', 'building');
    $query->addField('mbl', 'id', 'location');

    $already_added['location'] = 'mbr.room';
    $already_added['building'] = 'mbb.building';
    $already_added['room'] = 'mbl.location';

    $query->addField('mbr', 'human_name', 'room_name');
    $query->addField('mbb', 'human_name', 'building_name');
    $query->addField('mbl', 'human_name', 'location_name');

    $already_added['room_name'] = 'mbr.human_name';
    $already_added['building_name'] = 'mbb.human_name';
    $already_added['location_name'] = 'mbl.human_name';

    $query->addField('mfts', 'value', 'status');
    $query->addField('mftsp', 'value', 'step');

    $already_added['status'] = 'mfts.value';
    $already_added['step'] = 'mftsp.value';

    if (is_null($search)) {
      $query->addField('mfdd', 'value', 'date');
      $query->addField('mfdts', 'value', 'time_start');
      $query->addField('mfdtsp', 'value', 'time_stop');

      $already_added['date'] = 'mfdd.value';
      $already_added['time_start'] = 'mfdts.value';
      $already_added['time_stop'] = 'mfdtsp.value';
    }

    $query->fields('mer');

    if (is_array($search)) {
      $operand = db_and();
      $result = mcneese_event_workflow_event_process_listing_search_array($query, $operand, $already_joined, $already_joined_count, $already_added, $search, 1, $like);

      if ($result) {
        $query->condition($operand);
      }
    }

    if ($limit > 0) {
      $query->range($start, $limit + 1);
    }

    if ($reviewer || $manager) {
      $query->innerjoin('mew_current_event_coordinator', 'mcec', 'mer.id = mcec.event_id');
      $query->innerjoin('mew_field_event_coordinator_classification', 'mfecc', 'mcec.event_id = mfecc.event_id AND mcec.classification = mfecc.revision AND mfecc.delta = 0');

      $query->innerjoin('mew_current_venue_coordinator', 'mcvc', 'mer.id = mcvc.event_id');
      $query->innerjoin('mew_field_venue_coordinator_user_id', 'mfvcui', 'mcvc.event_id = mfvcui.event_id AND mcvc.user_id = mfvcui.revision AND mfvcui.delta = 0');

      $or = NULL;

      // process venue coordinator access.
      $show_status = array(
        MEW_EVENT_STATUS_LOCKED,
        MEW_EVENT_STATUS_UNLOCKED,
      );

      $show_step = array(
        MEW_REVIEW_STEP_VENUE_AVAILABLE,
        MEW_REVIEW_STEP_MAKE_DECISIONS
      );

      if ($review_restrictions === TRUE) {
        $show_decision = array(
          MEW_REVIEW_DECISION_APPROVE,
          MEW_REVIEW_DECISION_DENY
        );

        $already_reviewed_query = db_select('mew_field_review_review', 'mfrr');
        $already_reviewed_query->innerjoin('mew_current_review', 'mcr', 'mfrr.event_id = mcr.event_id and mfrr.revision = mcr.review');

        $already_reviewed_query->addfield('mfrr', 'step', 'step');

        $already_reviewed_query->where('mfrr.event_id = mftsp.event_id');
        $already_reviewed_query->condition('mfrr.user_id', $user->uid);
        $already_reviewed_query->condition('mfrr.step', $show_step, 'IN');
        $already_reviewed_query->condition('mfrr.decision', $show_decision, 'IN');
        $already_reviewed_query->distinct();

        $and = db_and();
        $and->condition('mfts.value', $show_status, 'IN');
        $and->condition('mftsp.value', $show_step, 'IN');
        $and->condition('mftsp.value', $already_reviewed_query, 'NOT IN');
        $and->condition('mfvcui.value', $user->uid);

        if (is_null($or)) {
          $or = db_or();
        }
        $or->condition($and);
      }
      elseif ($review_restrictions === FALSE) {
        if (!$manager) {
          if (is_null($or)) {
            $or = db_or();
          }
          $or->condition('mfvcui.value', $user->uid);
        }
      }
      else {
        if (!$manager) {
          if (is_null($or)) {
            $or = db_or();
          }
          $or->condition('mer.user_id', $user->uid);
          $or->condition('mfvcui.value', $user->uid);
        }
      }

      // process reviewer access.
      $show_status = array(
        MEW_EVENT_STATUS_LOCKED,
      );

      $show_step = array(
        MEW_REVIEW_STEP_REVIEW,
        MEW_REVIEW_STEP_USAGE_FEES,
      );

      if ($review_restrictions === TRUE) {
        $show_decision = array(
          MEW_REVIEW_DECISION_APPROVE,
          MEW_REVIEW_DECISION_DENY
        );

        $can_review_query = db_select('mew_reviewers', 'c_mr_2');

        $can_review_query->addfield('c_mr_2', 'user_id', 'user_id');

        $can_review_query->where('c_mr_2.event_classification = mfecc.value AND c_mr_2.review_step = mftsp.value');
        $can_review_query->condition('c_mr_2.user_id', $user->uid);
        $can_review_query->condition('c_mr_2.review_step', $show_step, 'IN');
        $can_review_query->condition('c_mr_2.disabled', 0);
        $can_review_query->distinct();

        $already_reviewed_query = db_select('mew_field_review_review', 'mfrr');
        $already_reviewed_query->innerjoin('mew_current_review', 'mcr', 'mfrr.event_id = mcr.event_id and mfrr.revision = mcr.review');

        $already_reviewed_query->addfield('mfrr', 'step', 'step');

        $already_reviewed_query->where('mfrr.event_id = mftsp.event_id and mfrr.step = mftsp.value');
        $already_reviewed_query->condition('mfrr.user_id', $user->uid);
        $already_reviewed_query->condition('mfrr.step', $show_step, 'IN');
        $already_reviewed_query->condition('mfrr.decision', $show_decision, 'IN');
        $already_reviewed_query->distinct();

        $and = db_and();
        $and->condition('mfts.value', $show_status, 'IN');
        $and->condition('mftsp.value', $show_step, 'IN');
        $and->condition($user->uid, $can_review_query, 'IN');
        $and->condition('mftsp.value', $already_reviewed_query, 'NOT IN');

        if (is_null($or)) {
          $or = db_or();
        }
        $or->condition($and);
      }
      elseif ($review_restrictions === FALSE) {
        if (!$manager) {
          $can_review_query = db_select('mew_reviewers', 'c_mr_2');

          $can_review_query->addfield('c_mr_2', 'user_id', 'user_id');

          $can_review_query->where('c_mr_2.event_classification = mfecc.value AND c_mr_2.review_step = mftsp.value');
          $can_review_query->condition('c_mr_2.user_id', $user->uid);
          $can_review_query->condition('c_mr_2.review_step', $show_step, 'IN');
          $can_review_query->condition('c_mr_2.disabled', 0);
          $can_review_query->distinct();

          $and = db_and();
          $and->condition('mfts.value', $show_status, 'IN');
          $and->condition('mftsp.value', $show_step, 'IN');
          $and->condition($user->uid, $can_review_query, 'IN');

          if (is_null($or)) {
            $or = db_or();
          }
          $or->condition($and);
        }
      }
      else {
        if (!$manager) {
          $can_review_query = db_select('mew_reviewers', 'c_mr_2');

          $can_review_query->addfield('c_mr_2', 'user_id', 'user_id');

          $can_review_query->where('c_mr_2.event_classification = mfecc.value');
          $can_review_query->condition('c_mr_2.user_id', $user->uid);
          $can_review_query->condition('c_mr_2.disabled', 0);
          $can_review_query->distinct();

          if (is_null($or)) {
            $or = db_or();
          }
          $or->condition($user->uid, $can_review_query, 'IN');
        }
      }

      if (!is_null($or)) {
        $query->condition($or);
      }
    }
    elseif ($requester) {
      $query->condition('mer.user_id', $user->uid);
    }
    else {
      // failsafe, should never happen.
      return FALSE;
    }

    // do not include deleted requests.
    $query->condition('mfts.value', MEW_EVENT_STATUS_DELETED, '<>');

    if (!is_null($search) && is_string($search)) {
      $or = db_or();

      foreach ($search_parts as $search_part) {
        $search_part_pieces = explode('*', $search_part);

        if (count($search_part_pieces) == 1) {
          $or->condition('mfit.value', db_like($search_part), $like);
          $or->condition('mfit.value', '%' . db_like($search_part) . '%', $like);

          $or->condition('mfio.value', db_like($search_part), $like);
          $or->condition('mfio.value', '%' . db_like($search_part) . '%', $like);

          $or->condition('mfta.value', db_like($search_part), $like);
          $or->condition('mfta.value', '%' . db_like($search_part) . '%', $like);

          $or->condition('mfpa.value', db_like($search_part), $like);
          $or->condition('mfpa.value', '%' . db_like($search_part) . '%', $like);

          $or->condition('mfpd.value', db_like($search_part), $like);
          $or->condition('mfpd.value', '%' . db_like($search_part) . '%', $like);

          $or->condition('mbl.human_name', db_like($search_part), $like);
          $or->condition('mbl.human_name', '%' . db_like($search_part) . '%', $like);

          $or->condition('mbb.human_name', db_like($search_part), $like);
          $or->condition('mbb.human_name', '%' . db_like($search_part) . '%', $like);

          $or->condition('mbr.human_name', db_like($search_part), $like);
          $or->condition('mbr.human_name', '%' . db_like($search_part) . '%', $like);

          continue;
        }

        $search_part_pieces_fixed = array();
        foreach ($preg_part_pieces as $preg_part_pieces_key => $preg_part_piece) {
          $search_part_pieces_fixed[$preg_part_pieces_key] = db_like($preg_part_piece);
        }

        $search_part_pieces_combined = implode('%', $search_part_pieces_fixed);
        $or->condition('mfit.value', $search_part_pieces_combined, $like);
        $or->condition('mfit.value', '%' . $search_part_pieces_combined . '%', $like);

        $or->condition('mfio.value', $search_part_pieces_combined, $like);
        $or->condition('mfio.value', '%' . $search_part_pieces_combined . '%', $like);

        $or->condition('mfta.value', $search_part_pieces_combined, $like);
        $or->condition('mfta.value', '%' . $search_part_pieces_combined . '%', $like);

        $or->condition('mfpa.value', $search_part_pieces_combined, $like);
        $or->condition('mfpa.value', '%' . $search_part_pieces_combined . '%', $like);

        $or->condition('mfpd.value', $search_part_pieces_combined, $like);
        $or->condition('mfpd.value', '%' . $search_part_pieces_combined . '%', $like);

        $or->condition('mbl.human_name', $search_part_pieces_combined, $like);
        $or->condition('mbl.human_name', '%' . $search_part_pieces_combined . '%', $like);

        $or->condition('mbb.human_name', $search_part_pieces_combined, $like);
        $or->condition('mbb.human_name', '%' . $search_part_pieces_combined . '%', $like);

        $or->condition('mbr.human_name', $search_part_pieces_combined, $like);
        $or->condition('mbr.human_name', '%' . $search_part_pieces_combined . '%', $like);
      }

      if (!empty($status)) {
        $or->condition('mfts.value', $status, 'IN');
      }

      if (!empty($steps)) {
        $or->condition('mftsp.value', $steps, 'IN');
      }

      if (!empty($information_type)) {
        $or->condition('mfitp.value', $information_type, 'IN');
      }

      $query->condition($or);
    }

    if (is_null($order)) {
      $query->orderBy('created', 'DESC');
    }
    else {
      if ($order == 'id') {
        $query->orderBy('mer.id', is_null($sort) ? 'DESC' : $sort);
      }
      elseif ($order == 'title') {
        $query->orderBy('title', is_null($sort) ? 'ASC' : $sort);
      }
      elseif ($order == 'status') {
        $query->orderBy('status', is_null($sort) ? 'ASC' : $sort);
      }
      elseif ($order == 'step') {
        $query->orderBy('step', is_null($sort) ? 'ASC' : $sort);
      }
      elseif ($order == 'location') {
        $query->orderBy('location_name', is_null($sort) ? 'ASC' : $sort);
      }
      elseif ($order == 'building') {
        $query->orderBy('building_name', is_null($sort) ? 'ASC' : $sort);
      }
      elseif ($order == 'room') {
        $query->orderBy('room_name', is_null($sort) ? 'ASC' : $sort);
      }
      elseif ($order == 'date') {
        // @todo: find a way to sort by dates (due to multiple values, one cannot simply just sort delta = 0).
        #$query->orderBy('date', is_null($sort) ? 'ASC' : $sort);
        #$query->orderBy('time_start', is_null($sort) ? 'ASC' : $sort);
      }
      elseif ($order == 'submitted by') {
        $query->orderBy('user_id', is_null($sort) ? 'ASC' : $sort);
      }
      elseif ($order == 'submitted on') {
        $query->orderBy('created', is_null($sort) ? 'DESC' : $sort);
      }
    }

    $results = $query->execute()->fetchAll();

    $date_order = array();
    foreach ($results as $result) {
      if (array_key_exists($result->id, $found)) {
        continue;
      }
      else {
        $found[$result->id] = $result;

        if ($found[$result->id] === FALSE) {
          unset($found[$result->id]);
          continue;
        }
      }

      // fetch all available dates:
      $sub_query = db_select('mew_current_dates', 'mcd');
      $sub_query->innerjoin('mew_field_dates_date', 'mfdd', 'mcd.event_id = mfdd.event_id AND mcd.date = mfdd.revision');
      $sub_query->innerjoin('mew_field_dates_time_start', 'mfdts', 'mcd.event_id = mfdts.event_id AND mcd.time_start = mfdts.revision and mfdd.event_id = mfdts.event_id and mfdd.delta = mfdts.delta');
      $sub_query->innerjoin('mew_field_dates_time_stop', 'mfdtsp', 'mcd.event_id = mfdtsp.event_id AND mcd.time_start = mfdtsp.revision and mfdd.event_id = mfdts.event_id and mfdd.delta = mfdtsp.delta');

      $sub_query->addField('mfdd', 'value', 'date');
      $sub_query->addField('mfdd', 'delta', 'delta');
      $sub_query->addField('mfdts', 'value', 'time_start');
      $sub_query->addField('mfdtsp', 'value', 'time_stop');

      $sub_query->condition('mfdd.event_id', $result->id);

      $sub_query->orderBy('date', 'ASC');
      $sub_query->orderBy('time_start', 'ASC');

      $sub_results = $sub_query->execute()->fetchAll();

      $found[$result->id]->date = array();
      $found[$result->id]->time_start = array();
      $found[$result->id]->time_stop = array();

      foreach ($sub_results as $delta => $sub_result) {
        $found[$result->id]->date[$sub_result->delta] = $sub_result->date;
        $found[$result->id]->time_start[$sub_result->delta] = $sub_result->time_start;
        $found[$result->id]->time_stop[$sub_result->delta] = $sub_result->time_stop;

        if (is_null($sub_result->time_start)) {
          if (!isset($date_order['start'][$sub_result->date])) {
            $date_order['start'][$sub_result->date][$result->id] = $found[$result->id];
          }
        }
        else {
          if (!isset($date_order['start'][$sub_result->time_start])) {
            $date_order['start'][$sub_result->time_start][$result->id] = $found[$result->id];
          }
        }
      }
    }
  }
  catch (Exception $ex) {
    cf_error::on_query_execution($ex);

    return FALSE;
  }

  if (!is_null($order)) {
    $ordered = array();

    if ($order == 'status') {
      foreach ($found as $event_id => $field) {
        $ordered[$status_options[$field->status]][$field->id] = $field;
      }
    }
    elseif ($order == 'step') {
      foreach ($found as $event_id => $field) {
        $ordered[$step_options[$field->step]][$field->id] = $field;
      }
    }
    elseif ($order == 'date' && isset($date_order['start'])) {
      $ordered = $date_order['start'];
    }

    if (!empty($ordered)) {
      if ($sort == 'DESC') {
        krsort($ordered);
      }
      else {
        ksort($ordered);
      }

      $found = array();
      foreach ($ordered as $key => $fields) {
        $found = array_merge($found, $fields);
      }
    }
  }

  return $found;
}

/**
 * Recursively append search conditions for loading a list of events.
 *
 * @param object $query
 *   The query object.
 * @param object $operand
 *   The query operand, such as and, or or for processing the conditions.
 * @param array $already_joined
 *   An array of table names that have already been joined in the query object.
 * @param int $already_joined_count
 *   A counter for uniquely generating table alias names.
 * @param array $already_added
 *   An array of field names that have already been added as select parameters
 *   for the query object.
 * @param string $like
 *   The appropriate SQL like or ilike string for sensitive and insensitive.
 *
 * @param bool
 *   TRUE when a valid field is found and added to the $operand and FALSE
 *   otherwise.
 *
 * @see mcneese_event_workflow_event_load_listing()
 */
function mcneese_event_workflow_event_process_listing_search_array(&$query, &$operand, &$already_joined, &$already_joined_count, &$already_added, $search, $recurse_count, $like) {
  if (!is_object($query)) {
    cf_error::invalid_object('query');
    return FALSE;
  }

  if (!is_object($operand)) {
    cf_error::invalid_object('operand');
    return FALSE;
  }

  if (!is_array($search)) {
    cf_error::invalid_array('search');
    return FALSE;
  }

  if (!cf_is_integer($recurse_count)) {
    cf_error::invalid_integer('recurse_count');
    return FALSE;
  }

  if (!is_array($already_joined)) {
    cf_error::invalid_array('already_joined');
    return FALSE;
  }

  if (!cf_is_integer($already_joined_count)) {
    cf_error::invalid_integer('already_joined_count');
    return FALSE;
  }

  if (!is_array($already_added)) {
    cf_error::invalid_array('already_added');
    return FALSE;
  }

  if (!is_string($like)) {
    cf_error::invalid_string('like');
    return FALSE;
  }

  if ($recurse_count > MEW_MAX_SEARCH_RECURSION) {
    return FALSE;
  }
  $found_values = FALSE;

  // process the inner fields, can be either a 'field_+', 'or_+', 'and_+', 'nor_+', or 'nand_+'.
  foreach ($search as $search_operand_or_field => $search_values) {
    $search_op = explode('_', $search_operand_or_field, 2);

    if (count($search_op) != 2) {
      // not valid, just skip.
      continue;
    }

    if (!is_array($search_values) || empty($search_values)) {
      // not valid, just skip.
      continue;
    }

    if ($search_op[0] == 'field') {
      if (empty($search_values['group_name'])) {
        // not valid, just skip.
        continue;
      }

      if (empty($search_values['field_name'])) {
        // not valid, just skip.
        continue;
      }

      if (empty($search_values['column'])) {
        // not valid, just skip.
        continue;
      }

      $mew_current = 'mew_current_' . $search_values['group_name'];
      $mew_field = 'mew_field_' . $search_values['group_name'] . '_' . $search_values['field_name'];

      if (!array_key_exists($mew_current, $already_joined)) {
        $already_joined[$mew_current] = 'mc_c_' . $already_joined_count;
        $already_joined_count++;

        $current_alias = $already_joined[$mew_current];

        $query->innerjoin($mew_current, $current_alias, 'mer.id = ' . $current_alias . '.event_id');
      }
      else {
        $current_alias = $already_joined[$mew_current];
      }

      if (!array_key_exists($mew_field, $already_joined)) {
        $already_joined[$mew_field] = 'mfg_c_' . $already_joined_count;
        $already_joined_count++;

        $field_alias = $already_joined[$mew_field];

        if (isset($search_values['multiple']) && $search_values['multiple']) {
          $query->innerjoin($mew_field, $field_alias, $current_alias . '.event_id = ' . $field_alias . '.event_id AND ' . $current_alias . '.' . $search_values['field_name'] . ' = ' . $field_alias . '.revision');
        }
        else {
          $query->innerjoin($mew_field, $field_alias, $current_alias . '.event_id = ' . $field_alias . '.event_id AND ' . $current_alias . '.' . $search_values['field_name'] . ' = ' . $field_alias . '.revision AND ' . $field_alias . '.delta = 0');
        }
      }
      else {
        $field_alias = $already_joined[$mew_field];
      }

      if (!array_key_exists($search_values['field_name'], $already_added)) {
        $query->addField($field_alias, $search_values['column'], $search_values['group_name'] . '_' . $search_values['field_name']);
      }

      $operator = '=';
      $search_string = $search_values['search'];
      if ($search_values['operator'] == MEW_OPERATOR_LESS_THAN) {
        $operator = '<';
      }
      elseif ($search_values['operator'] == MEW_OPERATOR_LESS_THAN_EQUAL) {
        $operator = '<=';
      }
      elseif ($search_values['operator'] == MEW_OPERATOR_EQUAL) {
        $operator = '=';
      }
      elseif ($search_values['operator'] == MEW_OPERATOR_LIKE) {
        if ($search_string == "") {
          $operator = '=';
        }
        else {
          $operator = $like;
          $search_string = '%' . db_like($search_values['search']) . '%';
        }
      }
      elseif ($search_values['operator'] == MEW_OPERATOR_GREATER_THAN_EQUAL) {
        $operator = '>=';
      }
      elseif ($search_values['operator'] == MEW_OPERATOR_GREATER_THAN) {
        $operator = '>';
      }
      elseif ($search_values['operator'] == MEW_OPERATOR_NOT_EQUAL) {
        $operator = '<>';
      }
      elseif ($search_values['operator'] == MEW_OPERATOR_NOT_LIKE) {
        if ($search_string == "") {
          $operator = '=';
        }
        else {
          $operator = 'NOT ' . $like;
          $search_string = '%' . db_like($search_values['search']) . '%';
        }
      }

      $operand->condition($field_alias . '.' . $search_values['column'], $search_string, $operator);

      $found_values = TRUE;
      continue;
    }
    elseif ($search_op[0] == 'or') {
      $inner_operand = db_or();
    }
    elseif ($search_op[0] == 'and') {
      $inner_operand = db_and();
    }
    elseif ($search_op[0] == 'nor') {
      $inner_operand = db_or();
      $inner_operand->not();
    }
    elseif ($search_op[0] == 'nand') {
      $inner_operand = db_and();
      $inner_operand->not();
    }
    else {
      // not valid, just skip.
      continue;
    }

    $next_count = $recurse_count + 1;
    $result = mcneese_event_workflow_event_process_listing_search_array($query, $inner_operand, $already_joined, $already_joined_count, $already_added, $search_values, $next_count, $like);

    if ($result) {
      $operand->condition($inner_operand);
      $found_values = TRUE;
    }

    unset($next_count);
  }

  return $found_values;
}

/**
 * Changes a form field's required state.
 *
 * @param string $field
 *   The array path name of the field.
 * @param array $form
 *   The form array where the field is stored.
 *   This will be updated.
 * @param bool $is_required
 *   Whether or not to change the field to required or not required.
 *
 * @return bool
 *   TRUE on successfull processing, FALSE otherwise.
 */
function mcneese_event_workflow_assign_validation_requirement($field, &$form, $is_required) {
  if (!is_string($field)) {
    cf_error::invalid_string('field');
    return FALSE;
  }

  if (!is_array($form)) {
    cf_error::invalid_array('form');
    return FALSE;
  }

  if (!is_bool($is_required)) {
    cf_error::invalid_bool('is_required');
    return FALSE;
  }

  $parts = explode('][', $field);

  $found = TRUE;
  $location = &$form;
  while (!empty($parts)) {
    $part = array_shift($parts);
    if (!is_array($location) || !array_key_exists($part, $location)) {
      $found = FALSE;
      break;
    }

    $location = &$location[$part];
  }

  if ($found && !empty($location)) {
    foreach ($location as $delta => &$location_field) {
      if (!is_numeric($delta)) continue;

      if (array_key_exists('#required', $location_field)) {
        if (isset($location['#options']) && is_array($location_field['#options'])) {
          if ($is_required) {
            if (array_key_exists('', $location_field['#options'])) {
              unset($location_field['#options']['']);
            }
          }
          else {
            if (!array_key_exists('', $location_field['#options'])) {
              $location_field['#options'][''] = '';
            }
          }
        }

        $location_field['#required'] = $is_required;
      }
    }
  }

  return TRUE;
}

/**
 * Loads the reviews by step, classification, and date.
 *
 * @parem int $event_id
 *   The numeric event id representing the event request to process.
 * @parem array $steps
 *   (optional) Limit the results to only the provided steps.
 * @parem array $decisions
 *   (optional) An array of decisions to limit the results to.
 *
 * @return array|bool
 *   An array of reviews by order of step, classification, and then date
 *   (with the date descending). FALSE is returned on error.
 */
function mcneese_event_workflow_get_latest_reviews($event_id, $steps = array(), $decisions = array()) {
  if (!cf_is_integer($event_id)) {
    cf_error::invalid_integer('event_id');
    return FALSE;
  }

  if (!is_array($steps)) {
    cf_error::invalid_array('steps');
    return FALSE;
  }

  if (!is_array($decisions)) {
    cf_error::invalid_array('decisions');
    return FALSE;
  }

  $reviews = array();
  try {
    $query = db_select('mew_field_review_review', 'mfrr');

    $query->innerjoin('mew_review_classifications', 'mrc', 'mfrr.id = mrc.review_id');
    $query->innerjoin('mew_current_review', 'mcr', 'mfrr.event_id = mcr.event_id and mfrr.revision = mcr.review');

    $query->addField('mfrr', 'id', 'id');
    $query->addField('mfrr', 'user_id', 'user_id');
    $query->addField('mfrr', 'date', 'date');
    $query->addField('mfrr', 'step', 'step');
    $query->addField('mfrr', 'decision', 'decision');
    $query->addfield('mrc', 'classification', 'classification');

    $query->condition('mfrr.event_id', $event_id);

    if (!empty($steps)) {
      $query->condition('mfrr.step', $steps, 'IN');
    }

    if (!empty($decisions)) {
      $query->condition('mfrr.decision', $decisions, 'IN');
    }

    $query->orderBy('mfrr.step');
    $query->orderBy('mrc.classification');
    $query->orderBy('mfrr.date', 'DESC');

    $results = $query->execute()->fetchAll();
    if (is_array($results)) {
      foreach ($results as $result) {

        if (!isset($reviews[$result->step])) {
          $reviews[$result->step] = array();
        }

        if (!isset($reviews[$result->step][$result->classification])) {
          $reviews[$result->step][$result->classification] = array();
        }

        $reviews[$result->step][$result->classification][$result->id] = $result;
      }
    }
  }
  catch (Exception $ex) {
    cf_error::on_exception($ex);

    return FALSE;
  }

  return $reviews;
}

/**
 * Builds a table listing of event requests.
 *
 * @param array $items
 *   An array of items to add to the table as returned by
 *   mcneese_event_workflow_event_load_listing().
 * @param int $max_rows
 *   The number of items allowed to be listed on the table at one time.
 *
 * @return array
 *   A generated table array structure for passing to theme_table().
 *   Additional keys are added to the table structure:
 *   - 'error': TRUE on success, FALSE on error.
 *
 * @see: mcneese_event_workflow_event_load_listing()
 * @see: theme_table()
 */
function mcneese_event_workflow_build_request_table($items, $max_rows, $columns = array('id' => "ID", 'title' => "Title", 'location' => "Location", 'building' => "Building", 'room' => "Room", 'date' => "Date", 'submitted_on' => "Submitted On", 'operations' => "Operations"), $user = NULL) {
  $table = array();
  foreach ($columns as $column_name => $column_title) {
    if ($column_name == 'operations') {
      $table['header'][] = $column_title;
    }
    else {
      $table['header'][$column_name] = array(
        'field' => $column_name,
        'data' => $column_title,
        'align' => 'center',
      );
    }
  }

  $table['attributes'] = array();
  $table['rows'] = array();
  $table['empty'] = t("No event requests were found.");

  if (!is_array($items) && $items !== FALSE) {
    cf_error::invalid_array('items');
    $table['error'] = TRUE;
    return $table;
  }

  if (is_null($user) || !is_object($user)) {
    $user = cf_current_user();
  }

  global $base_path;

  $rows = array();
  $total_results = 0;
  $rows_count = 0;

  if (empty($items)) {
    return $table;
  }

  $total_results = count($items);
  foreach ($items as $item) {
    $row = array();
    $rows_count++;

    // Rows per page + 1 is loaded so that it can be detected whether or not a 'next' link needs to be provided.
    if ($rows_count > $max_rows) {
      break;
    }

    $can_view_event = mcneese_event_workflow_management_page_event_access('view', $item->id, $user);
    $can_edit_event = mcneese_event_workflow_management_page_event_access('edit', $item->id, $user);
    $can_review_event = mcneese_event_workflow_management_page_event_access('review', $item->id, $user);
    $can_log_event = mcneese_event_workflow_management_page_event_access('log', $item->id, $user);
    $can_history_event = mcneese_event_workflow_management_page_event_access('history', $item->id, $user);
    $can_delete_event = mcneese_event_workflow_management_page_event_access('delete', $item->id, $user);

    if (isset($columns['id'])) {
      $row['id'] = $item->id;
    }

    if (isset($columns['title'])) {
      $row['title'] = check_plain($item->title);
    }

    $location_options = event_workflow_get_event_location_list_options();
    $building_options = event_workflow_get_event_building_list_options($item->location);
    $room_options = event_workflow_get_event_room_list_options();

    if (isset($columns['location'])) {
      $location = "";
      if (!empty($item->location)) {
        if (isset($location_options[$item->location])) {
          $location = check_plain($location_options[$item->location]);
        }
      }

      $row['location'] = $location;
    }

    if (isset($columns['building'])) {
      $building = "";
      if (!empty($item->building)) {
        if (isset($building_options[$item->building])) {
          $building = check_plain($building_options[$item->building]);
        }
      }

      $row['building'] = $building;
    }

    if (isset($columns['room'])) {
      $room = "";
      if (!empty($item->room)) {
        if (isset($room_options[$item->room])) {
          $room = check_plain($room_options[$item->room]);
        }
      }

      $row['room'] = $room;
    }

    if (isset($columns['date'])) {
      foreach ($item->date as $delta => $date) {
        if (!isset($row['date'])) {
          $row['date'] = '';
        }
        else {
          $row['date'] .= '<br>';
        }

        $row['date'] .= check_plain(date("Y/m/d", $date));

        if (array_key_exists($delta, $item->time_start) && !is_null($item->time_start[$delta]) && array_key_exists($delta, $item->time_stop) && !is_null($item->time_stop[$delta])) {
          $row['date'] .= ' ' . check_plain(date("h:ia", $item->time_start[$delta]));
          $row['date'] .= ' to ' . check_plain(date("h:ia", $item->time_stop[$delta]));
        }
      }
    }

    if (isset($columns['submitted_on'])) {
      $date_stamp = $item->created;
      $row['submitted_on'] = check_plain(date("Y/m/d h:ia", $date_stamp));
    }

    if (isset($columns['operations'])) {
      $row['operations'] = '';

      if ($can_view_event) {
        $row['operations'] .= '<a href="' . $base_path . 'events/view-0/' . $item->id . '" class="operation-link operation-link-view">View</a> ';
      }

      if ($can_edit_event) {
        $row['operations'] .= '<a href="' . $base_path . 'events/edit-0/' . $item->id . '/request" class="operation-link operation-link-edit">Edit</a> ';
      }

      if ($can_review_event) {
        $row['operations'] .= '<a href="' . $base_path . 'events/view-0/' . $item->id . '/3" class="operation-link operation-link-review">Review</a> ';
      }

      if ($can_log_event) {
        $row['operations'] .= '<a href="' . $base_path . 'events/view-0/' . $item->id . '/2" class="operation-link operation-link-log">Log</a> ';
      }

      if ($can_history_event) {
        $row['operations'] .= '<a href="' . $base_path . 'events/history-0/' . $item->id . '" class="operation-link operation-link-history">History</a> ';
      }

      if ($can_delete_event) {
        $row['operations'] .= '<a href="' . $base_path . 'events/delete-0/' . $item->id . '" class="operation-link operation-link-delete">Delete</a> ';
      }
    }

    $rows[$item->id] = $row;
  }

  $table['rows'] = $rows;
  $table['error'] = FALSE;

  return $table;
}

/**
 * Load venue coordinators that are available.
 *
 * @return array|bool
 *   An array of venue coordinators or FALSE on error.
 */
function mcneese_event_workflow_event_get_available_venue_coordinators() {
  $ilike = 'LIKE';
  if (db_driver() == 'pgsql') {
    $ilike = 'ILIKE';
  }

  try {
    $query = db_select('users', 'u');
    $query->innerjoin('field_data_field_user_first_name', 'fdfufn', 'u.uid = fdfufn.entity_id AND u.uid = fdfufn.entity_id AND fdfufn.delta = 0');
    $query->innerjoin('field_data_field_user_last_name', 'fdfuln', 'u.uid = fdfuln.entity_id AND u.uid = fdfuln.entity_id AND fdfufn.entity_id = fdfuln.entity_id AND fdfuln.delta = 0');

    $query->addField('u', 'uid', 'user_id');
    $query->addField('u', 'name', 'name');
    $query->addField('u', 'mail', 'email');

    $query->addField('fdfufn', 'field_user_first_name_value', 'first_name');
    $query->addField('fdfuln', 'field_user_last_name_value', 'last_name');

    $subquery = db_select('mew_banner_rooms', 'mbr');
    $subquery->addField('mbr', 'coordinator_id', 'coordinator_id');
    $subquery->condition('mbr.disabled', 0);
    $subquery->distinct();

    $query->condition('u.uid', $subquery, 'IN');
    $query->condition('u.status', 0, '<>');
    $query->condition('u.uid', 1, '>');

    $query->orderBy('last_name');
    $query->orderBy('first_name');
    $query->orderBy('name');
    $query->orderBy('uid');

    $results = $query->execute()->fetchAll();
  }
  catch (Exception $e) {
    cf_error::on_query_execution($e);
    return FALSE;
  }

  $matches = array();
  foreach ($results as $result) {
    $name = "";
    if (!empty($result->last_name)) {
      $name .= $result->last_name;
    }

    if (!empty($result->last_name)) {
      if (!empty($name)) {
        $name .= ", ";
      }
      $name .= $result->first_name;
    }

    $name_value = $name;

    if (!empty($name)) {
      $name = '"' . $name . '" ';
    }

    $value = $name . $result->email;
    $matches[$result->user_id] = $value;
  }

  return $matches;
}

/**
 * Loads a list of reviewers who have yet to review the given event.
 *
 * This only applies to the current active review state.
 *
 * @param int $event_id
 *   The event id of the event to operate on.
 *
 * @return array|bool
 *   An array of reviewers, with their reviewer classifications, who have not
 *   yet reviewed the given event. FALSE is returned on error.
 */
function mcneese_event_workflow_get_reviewers_yet_to_review($event_id) {
  $event = event_workflow_load_event_by_id($event_id);

  if (empty($event)) {
    watchdog('mew', "Unable to find event with id of @event_id.", array('@event_id' => $event_id), WATCHDOG_ERROR);
    return FALSE;
  }

  $conditions = array(
    'mr.event_classification' => $event['event_coordinator']['classification'][0]->value,
    'mr.review_step' => $event['top']['step'][0]->value,
    'mr.disabled' => 0,
  );

  $reviewers = mcneese_event_workflow_get_reviewers($conditions);
  if (empty($reviewers)) {
    return array();
  }

  mcneese_event_workflow_include(4);

  $reviewer_classification_options = event_workflow_get_reviewer_classification_list_options();

  $review_classifications = array();
  $reviewer_ids = array();
  $yet_to_review = array();

  foreach ($reviewers as $reviewer) {
    if (!isset($review_classifications[$reviewer->user_id])) {
      $review_classifications[$reviewer->user_id] = array();
    }

    $review_classifications[$reviewer->user_id][$reviewer->reviewer_classification] = $reviewer->reviewer_classification;
    $reviewer_ids[$reviewer->user_id] = $reviewer->user_id;
    $yet_to_review[$reviewer->reviewer_classification] = $reviewer_classification_options[$reviewer->reviewer_classification];
  }
  unset($reviewers);

  try {
    $query = db_select('mew_field_review_review', 'mfrr');
    $query->innerjoin('mew_current_review', 'mcr', 'mfrr.event_id = mcr.event_id and mfrr.revision = mcr.review');

    $query->addField('mfrr', 'user_id', 'user_id');

    $query->condition('mfrr.event_id', $event_id);
    $query->condition('mfrr.step', $event['top']['step'][0]->value);
    $query->condition('mfrr.user_id', $reviewer_ids, 'IN');
    $query->condition('mfrr.decision', array(MEW_REVIEW_DECISION_APPROVE, MEW_REVIEW_DECISION_DENY), 'IN');
    $query->distinct();

    $results = $query->execute()->fetchAll();

    if (!empty($results)) {
      foreach ($results as $result) {
        if (array_key_exists($result->user_id, $review_classifications)) {
          foreach ($review_classifications[$result->user_id] as $review_classification) {
            unset($yet_to_review[$review_classification]);
          }
        }
      }
    }
  }
  catch (Exception $ex) {
    cf_error::on_query_execution($ex);

    return FALSE;
  }

  return $yet_to_review;
}

/**
 * @} End of '@defgroup mcneese_event_workflow McNeese Event Workflow'.
 */
